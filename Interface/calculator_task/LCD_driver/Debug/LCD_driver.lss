
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ebe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000ebe  00000f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000f4a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000242a  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ac7  00000000  00000000  0000354a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f4a  00000000  00000000  00004011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e0  00000000  00000000  00004f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aa5  00000000  00000000  0000543c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a5a  00000000  00000000  00005ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  0000793b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <main>
  7a:	0c 94 5d 07 	jmp	0xeba	; 0xeba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HKEYPAD_HKEYPAD_t_Create>:
	{'4','5','6','*'},
	{'1','2','3','-'},
	{'C','0','=','+'}
};

HKEYPAD_t HKEYPAD_HKEYPAD_t_Create(Pin_t A_Pin_t_rowPins[HKEYPAD_ROWS_NO], Pin_t A_Pin_t_colPins[HKEYPAD_COLS_NO]){
  82:	cf 92       	push	r12
  84:	df 92       	push	r13
  86:	ff 92       	push	r15
  88:	0f 93       	push	r16
  8a:	1f 93       	push	r17
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	60 97       	sbiw	r28, 0x10	; 16
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	6c 01       	movw	r12, r24
  a2:	8b 01       	movw	r16, r22
	u8 L_u8_i;
	HKEYPAD_t L_HKEYPAD_t_keypad;
	
	for (L_u8_i = 0; L_u8_i < HKEYPAD_ROWS_NO ;L_u8_i++)
  a4:	f1 2c       	mov	r15, r1
  a6:	11 c0       	rjmp	.+34     	; 0xca <HKEYPAD_HKEYPAD_t_Create+0x48>
	{
		L_HKEYPAD_t_keypad.rowPins[L_u8_i] = A_Pin_t_rowPins[L_u8_i];
  a8:	2f 2d       	mov	r18, r15
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f6 01       	movw	r30, r12
  ae:	e2 0f       	add	r30, r18
  b0:	f3 1f       	adc	r31, r19
  b2:	80 81       	ld	r24, Z
  b4:	e9 e0       	ldi	r30, 0x09	; 9
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	ec 0f       	add	r30, r28
  ba:	fd 1f       	adc	r31, r29
  bc:	e2 0f       	add	r30, r18
  be:	f3 1f       	adc	r31, r19
  c0:	80 83       	st	Z, r24
		
		MDIO_voidSetPinDir(A_Pin_t_rowPins[L_u8_i],INPUT_PULL_UP);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	0e 94 3b 06 	call	0xc76	; 0xc76 <MDIO_voidSetPinDir>

HKEYPAD_t HKEYPAD_HKEYPAD_t_Create(Pin_t A_Pin_t_rowPins[HKEYPAD_ROWS_NO], Pin_t A_Pin_t_colPins[HKEYPAD_COLS_NO]){
	u8 L_u8_i;
	HKEYPAD_t L_HKEYPAD_t_keypad;
	
	for (L_u8_i = 0; L_u8_i < HKEYPAD_ROWS_NO ;L_u8_i++)
  c8:	f3 94       	inc	r15
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	8f 15       	cp	r24, r15
  ce:	60 f7       	brcc	.-40     	; 0xa8 <HKEYPAD_HKEYPAD_t_Create+0x26>
  d0:	f1 2c       	mov	r15, r1
  d2:	17 c0       	rjmp	.+46     	; 0x102 <HKEYPAD_HKEYPAD_t_Create+0x80>
		MDIO_voidSetPinDir(A_Pin_t_rowPins[L_u8_i],INPUT_PULL_UP);
	}
	
	for (L_u8_i = 0; L_u8_i < HKEYPAD_COLS_NO ;L_u8_i++)
	{
		L_HKEYPAD_t_keypad.colPins[L_u8_i] = A_Pin_t_colPins[L_u8_i];
  d4:	2f 2d       	mov	r18, r15
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	68 01       	movw	r12, r16
  da:	c2 0e       	add	r12, r18
  dc:	d3 1e       	adc	r13, r19
  de:	f6 01       	movw	r30, r12
  e0:	80 81       	ld	r24, Z
  e2:	ed e0       	ldi	r30, 0x0D	; 13
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ec 0f       	add	r30, r28
  e8:	fd 1f       	adc	r31, r29
  ea:	e2 0f       	add	r30, r18
  ec:	f3 1f       	adc	r31, r19
  ee:	80 83       	st	Z, r24
		
		MDIO_voidSetPinDir(A_Pin_t_colPins[L_u8_i],OUTPUT);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	0e 94 3b 06 	call	0xc76	; 0xc76 <MDIO_voidSetPinDir>
		MDIO_voidSetPinVal(A_Pin_t_colPins[L_u8_i],HIGH);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	f6 01       	movw	r30, r12
  fa:	80 81       	ld	r24, Z
  fc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
		L_HKEYPAD_t_keypad.rowPins[L_u8_i] = A_Pin_t_rowPins[L_u8_i];
		
		MDIO_voidSetPinDir(A_Pin_t_rowPins[L_u8_i],INPUT_PULL_UP);
	}
	
	for (L_u8_i = 0; L_u8_i < HKEYPAD_COLS_NO ;L_u8_i++)
 100:	f3 94       	inc	r15
 102:	f3 e0       	ldi	r31, 0x03	; 3
 104:	ff 15       	cp	r31, r15
 106:	30 f7       	brcc	.-52     	; 0xd4 <HKEYPAD_HKEYPAD_t_Create+0x52>
		
		MDIO_voidSetPinDir(A_Pin_t_colPins[L_u8_i],OUTPUT);
		MDIO_voidSetPinVal(A_Pin_t_colPins[L_u8_i],HIGH);
	}
	
	return L_HKEYPAD_t_keypad;
 108:	88 e0       	ldi	r24, 0x08	; 8
 10a:	fe 01       	movw	r30, r28
 10c:	39 96       	adiw	r30, 0x09	; 9
 10e:	de 01       	movw	r26, r28
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	01 90       	ld	r0, Z+
 114:	0d 92       	st	X+, r0
 116:	8a 95       	dec	r24
 118:	e1 f7       	brne	.-8      	; 0x112 <HKEYPAD_HKEYPAD_t_Create+0x90>
 11a:	29 81       	ldd	r18, Y+1	; 0x01
 11c:	3a 81       	ldd	r19, Y+2	; 0x02
 11e:	4b 81       	ldd	r20, Y+3	; 0x03
 120:	5c 81       	ldd	r21, Y+4	; 0x04
 122:	6d 81       	ldd	r22, Y+5	; 0x05
 124:	7e 81       	ldd	r23, Y+6	; 0x06
}
 126:	8f 81       	ldd	r24, Y+7	; 0x07
 128:	98 85       	ldd	r25, Y+8	; 0x08
 12a:	60 96       	adiw	r28, 0x10	; 16
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	df 90       	pop	r13
 142:	cf 90       	pop	r12
 144:	08 95       	ret

00000146 <HKEYPAD_u8_getChar>:


u8 HKEYPAD_u8_getChar(HKEYPAD_t * A_HKEYPAD_t_keypad){
 146:	bf 92       	push	r11
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	7c 01       	movw	r14, r24
	u8 L_u8_i,L_u8_j,L_u8_temp;
	u8 L_u8_pressedChar = HKEYPAD_DEFAULT_RETURN_CHAR;	
 15a:	b1 2c       	mov	r11, r1
	
	for (L_u8_i=0;L_u8_i < HKEYPAD_COLS_NO;L_u8_i++)
 15c:	c1 2c       	mov	r12, r1
 15e:	2b c0       	rjmp	.+86     	; 0x1b6 <HKEYPAD_u8_getChar+0x70>
	{	
		MDIO_voidSetPinVal(A_HKEYPAD_t_keypad->colPins[L_u8_i],LOW);
 160:	0c 2d       	mov	r16, r12
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	f7 01       	movw	r30, r14
 166:	e0 0f       	add	r30, r16
 168:	f1 1f       	adc	r31, r17
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	84 81       	ldd	r24, Z+4	; 0x04
 16e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
		
		for (L_u8_j=0;L_u8_j < HKEYPAD_ROWS_NO;L_u8_j++)
 172:	d1 2c       	mov	r13, r1
 174:	15 c0       	rjmp	.+42     	; 0x1a0 <HKEYPAD_u8_getChar+0x5a>
		{
			L_u8_temp = MDIO_u8GetPinVal(A_HKEYPAD_t_keypad->rowPins[L_u8_j]);
 176:	cd 2d       	mov	r28, r13
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	f7 01       	movw	r30, r14
 17c:	ec 0f       	add	r30, r28
 17e:	fd 1f       	adc	r31, r29
 180:	80 81       	ld	r24, Z
 182:	0e 94 c8 06 	call	0xd90	; 0xd90 <MDIO_u8GetPinVal>
			if(L_u8_temp == LOW){
 186:	81 11       	cpse	r24, r1
 188:	0a c0       	rjmp	.+20     	; 0x19e <HKEYPAD_u8_getChar+0x58>
				L_u8_pressedChar = keypadData[L_u8_j][L_u8_i];
 18a:	cc 0f       	add	r28, r28
 18c:	dd 1f       	adc	r29, r29
 18e:	cc 0f       	add	r28, r28
 190:	dd 1f       	adc	r29, r29
 192:	c8 59       	subi	r28, 0x98	; 152
 194:	df 4f       	sbci	r29, 0xFF	; 255
 196:	c0 0f       	add	r28, r16
 198:	d1 1f       	adc	r29, r17
 19a:	b8 80       	ld	r11, Y
				
				#if WAIT_BUTTON_TO_RELEASE==1
					//wait button to be released
					L_u8_j = L_u8_j - 1;
 19c:	da 94       	dec	r13
	
	for (L_u8_i=0;L_u8_i < HKEYPAD_COLS_NO;L_u8_i++)
	{	
		MDIO_voidSetPinVal(A_HKEYPAD_t_keypad->colPins[L_u8_i],LOW);
		
		for (L_u8_j=0;L_u8_j < HKEYPAD_ROWS_NO;L_u8_j++)
 19e:	d3 94       	inc	r13
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	8d 15       	cp	r24, r13
 1a4:	40 f7       	brcc	.-48     	; 0x176 <HKEYPAD_u8_getChar+0x30>
					L_u8_j = L_u8_j - 1;
				#endif
			}
		}
		
		MDIO_voidSetPinVal(A_HKEYPAD_t_keypad->colPins[L_u8_i],HIGH);
 1a6:	f7 01       	movw	r30, r14
 1a8:	e0 0f       	add	r30, r16
 1aa:	f1 1f       	adc	r31, r17
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	84 81       	ldd	r24, Z+4	; 0x04
 1b0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>

u8 HKEYPAD_u8_getChar(HKEYPAD_t * A_HKEYPAD_t_keypad){
	u8 L_u8_i,L_u8_j,L_u8_temp;
	u8 L_u8_pressedChar = HKEYPAD_DEFAULT_RETURN_CHAR;	
	
	for (L_u8_i=0;L_u8_i < HKEYPAD_COLS_NO;L_u8_i++)
 1b4:	c3 94       	inc	r12
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	8c 15       	cp	r24, r12
 1ba:	90 f6       	brcc	.-92     	; 0x160 <HKEYPAD_u8_getChar+0x1a>
		MDIO_voidSetPinVal(A_HKEYPAD_t_keypad->colPins[L_u8_i],HIGH);
	}
	
	
	
	MDELAY_void_milli(HKEPAD_DELAY_TIME_MS_AFTER_READ);
 1bc:	64 e1       	ldi	r22, 0x14	; 20
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 b0 05 	call	0xb60	; 0xb60 <MDELAY_void_milli>
	
	return L_u8_pressedChar;
}
 1c8:	8b 2d       	mov	r24, r11
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	bf 90       	pop	r11
 1dc:	08 95       	ret

000001de <HLCD_void_send>:
	A_HLCD_t_lcd,
	HLCD_CURSOR_DISPLAY_SHIFT_CMD(0,0),
	HLCD_CURSOR_DISPLAY_SHIFT_CMD_RS,
	HLCD_CURSOR_DISPLAY_SHIFT_CMD_RW,
	HLCD_CURSOR_DISPLAY_SHIFT_CMD_TIME_US);	
}
 1de:	af 92       	push	r10
 1e0:	bf 92       	push	r11
 1e2:	cf 92       	push	r12
 1e4:	df 92       	push	r13
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	b6 2e       	mov	r11, r22
 1f6:	a2 2e       	mov	r10, r18
 1f8:	67 01       	movw	r12, r14
 1fa:	78 01       	movw	r14, r16
 1fc:	64 2f       	mov	r22, r20
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 204:	6a 2d       	mov	r22, r10
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 20c:	88 81       	ld	r24, Y
 20e:	85 fd       	sbrc	r24, 5
 210:	18 c0       	rjmp	.+48     	; 0x242 <HLCD_void_send+0x64>
 212:	29 c0       	rjmp	.+82     	; 0x266 <HLCD_void_send+0x88>
 214:	21 2f       	mov	r18, r17
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	47 e0       	ldi	r20, 0x07	; 7
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	42 1b       	sub	r20, r18
 21e:	53 0b       	sbc	r21, r19
 220:	8b 2d       	mov	r24, r11
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <HLCD_void_send+0x4c>
 226:	95 95       	asr	r25
 228:	87 95       	ror	r24
 22a:	4a 95       	dec	r20
 22c:	e2 f7       	brpl	.-8      	; 0x226 <HLCD_void_send+0x48>
 22e:	68 2f       	mov	r22, r24
 230:	61 70       	andi	r22, 0x01	; 1
 232:	fe 01       	movw	r30, r28
 234:	e2 0f       	add	r30, r18
 236:	f3 1f       	adc	r31, r19
 238:	84 81       	ldd	r24, Z+4	; 0x04
 23a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 23e:	1f 5f       	subi	r17, 0xFF	; 255
 240:	01 c0       	rjmp	.+2      	; 0x244 <HLCD_void_send+0x66>
 242:	10 e0       	ldi	r17, 0x00	; 0
 244:	18 30       	cpi	r17, 0x08	; 8
 246:	30 f3       	brcs	.-52     	; 0x214 <HLCD_void_send+0x36>
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 250:	68 ee       	ldi	r22, 0xE8	; 232
 252:	73 e0       	ldi	r23, 0x03	; 3
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <MDELAY_void_micro>
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 264:	52 c0       	rjmp	.+164    	; 0x30a <HLCD_void_send+0x12c>
 266:	6b 2d       	mov	r22, r11
 268:	66 1f       	adc	r22, r22
 26a:	66 27       	eor	r22, r22
 26c:	66 1f       	adc	r22, r22
 26e:	8c 81       	ldd	r24, Y+4	; 0x04
 270:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 274:	b6 fa       	bst	r11, 6
 276:	66 27       	eor	r22, r22
 278:	60 f9       	bld	r22, 0
 27a:	8d 81       	ldd	r24, Y+5	; 0x05
 27c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 280:	b5 fa       	bst	r11, 5
 282:	66 27       	eor	r22, r22
 284:	60 f9       	bld	r22, 0
 286:	8e 81       	ldd	r24, Y+6	; 0x06
 288:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 28c:	b4 fa       	bst	r11, 4
 28e:	66 27       	eor	r22, r22
 290:	60 f9       	bld	r22, 0
 292:	8f 81       	ldd	r24, Y+7	; 0x07
 294:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 2a0:	68 ee       	ldi	r22, 0xE8	; 232
 2a2:	73 e0       	ldi	r23, 0x03	; 3
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <MDELAY_void_micro>
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	8b 81       	ldd	r24, Y+3	; 0x03
 2b0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 2b4:	68 ee       	ldi	r22, 0xE8	; 232
 2b6:	73 e0       	ldi	r23, 0x03	; 3
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <MDELAY_void_micro>
 2c0:	b3 fa       	bst	r11, 3
 2c2:	66 27       	eor	r22, r22
 2c4:	60 f9       	bld	r22, 0
 2c6:	8c 81       	ldd	r24, Y+4	; 0x04
 2c8:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 2cc:	b2 fa       	bst	r11, 2
 2ce:	66 27       	eor	r22, r22
 2d0:	60 f9       	bld	r22, 0
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 2d8:	b1 fa       	bst	r11, 1
 2da:	66 27       	eor	r22, r22
 2dc:	60 f9       	bld	r22, 0
 2de:	8e 81       	ldd	r24, Y+6	; 0x06
 2e0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 2e4:	6b 2d       	mov	r22, r11
 2e6:	61 70       	andi	r22, 0x01	; 1
 2e8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ea:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 2f6:	68 ee       	ldi	r22, 0xE8	; 232
 2f8:	73 e0       	ldi	r23, 0x03	; 3
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <MDELAY_void_micro>
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MDIO_voidSetPinVal>
 30a:	c7 01       	movw	r24, r14
 30c:	b6 01       	movw	r22, r12
 30e:	68 51       	subi	r22, 0x18	; 24
 310:	7c 4f       	sbci	r23, 0xFC	; 252
 312:	8f 4f       	sbci	r24, 0xFF	; 255
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <MDELAY_void_micro>
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	bf 90       	pop	r11
 32c:	af 90       	pop	r10
 32e:	08 95       	ret

00000330 <HLCD_HLCD_t_LcdCreate>:
 330:	9f 92       	push	r9
 332:	af 92       	push	r10
 334:	bf 92       	push	r11
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	2c 97       	sbiw	r28, 0x0c	; 12
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	6c 01       	movw	r12, r24
 358:	b6 2e       	mov	r11, r22
 35a:	a4 2e       	mov	r10, r20
 35c:	92 2e       	mov	r9, r18
 35e:	78 01       	movw	r14, r16
 360:	68 ee       	ldi	r22, 0xE8	; 232
 362:	73 e0       	ldi	r23, 0x03	; 3
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <MDELAY_void_micro>
 36c:	9c 82       	std	Y+4, r9	; 0x04
 36e:	ab 82       	std	Y+3, r10	; 0x03
 370:	ba 82       	std	Y+2, r11	; 0x02
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	89 2d       	mov	r24, r9
 376:	0e 94 3b 06 	call	0xc76	; 0xc76 <MDIO_voidSetPinDir>
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	8a 2d       	mov	r24, r10
 37e:	0e 94 3b 06 	call	0xc76	; 0xc76 <MDIO_voidSetPinDir>
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	8b 2d       	mov	r24, r11
 386:	0e 94 3b 06 	call	0xc76	; 0xc76 <MDIO_voidSetPinDir>
 38a:	10 e0       	ldi	r17, 0x00	; 0
 38c:	12 c0       	rjmp	.+36     	; 0x3b2 <HLCD_HLCD_t_LcdCreate+0x82>
 38e:	81 2f       	mov	r24, r17
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	f7 01       	movw	r30, r14
 394:	e8 0f       	add	r30, r24
 396:	f9 1f       	adc	r31, r25
 398:	20 81       	ld	r18, Z
 39a:	a5 e0       	ldi	r26, 0x05	; 5
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	ac 0f       	add	r26, r28
 3a0:	bd 1f       	adc	r27, r29
 3a2:	a8 0f       	add	r26, r24
 3a4:	b9 1f       	adc	r27, r25
 3a6:	2c 93       	st	X, r18
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	80 81       	ld	r24, Z
 3ac:	0e 94 3b 06 	call	0xc76	; 0xc76 <MDIO_voidSetPinDir>
 3b0:	1f 5f       	subi	r17, 0xFF	; 255
 3b2:	18 30       	cpi	r17, 0x08	; 8
 3b4:	60 f3       	brcs	.-40     	; 0x38e <HLCD_HLCD_t_LcdCreate+0x5e>
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	80 66       	ori	r24, 0x60	; 96
 3ba:	8f 77       	andi	r24, 0x7F	; 127
 3bc:	89 83       	std	Y+1, r24	; 0x01
 3be:	17 e2       	ldi	r17, 0x27	; 39
 3c0:	e1 2e       	mov	r14, r17
 3c2:	f1 2c       	mov	r15, r1
 3c4:	00 e0       	ldi	r16, 0x00	; 0
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	68 e3       	ldi	r22, 0x38	; 56
 3ce:	ce 01       	movw	r24, r28
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	83 7f       	andi	r24, 0xF3	; 243
 3da:	8f 7e       	andi	r24, 0xEF	; 239
 3dc:	89 83       	std	Y+1, r24	; 0x01
 3de:	e1 2c       	mov	r14, r1
 3e0:	f1 2c       	mov	r15, r1
 3e2:	87 01       	movw	r16, r14
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	68 e0       	ldi	r22, 0x08	; 8
 3ea:	ce 01       	movw	r24, r28
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 3f2:	1a ef       	ldi	r17, 0xFA	; 250
 3f4:	e1 2e       	mov	r14, r17
 3f6:	15 e0       	ldi	r17, 0x05	; 5
 3f8:	f1 2e       	mov	r15, r17
 3fa:	00 e0       	ldi	r16, 0x00	; 0
 3fc:	10 e0       	ldi	r17, 0x00	; 0
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	8d 7f       	andi	r24, 0xFD	; 253
 420:	89 83       	std	Y+1, r24	; 0x01
 422:	17 e2       	ldi	r17, 0x27	; 39
 424:	e1 2e       	mov	r14, r17
 426:	f1 2c       	mov	r15, r1
 428:	00 e0       	ldi	r16, 0x00	; 0
 42a:	10 e0       	ldi	r17, 0x00	; 0
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	66 e0       	ldi	r22, 0x06	; 6
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 43a:	8c e0       	ldi	r24, 0x0C	; 12
 43c:	fe 01       	movw	r30, r28
 43e:	31 96       	adiw	r30, 0x01	; 1
 440:	d6 01       	movw	r26, r12
 442:	01 90       	ld	r0, Z+
 444:	0d 92       	st	X+, r0
 446:	8a 95       	dec	r24
 448:	e1 f7       	brne	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	c6 01       	movw	r24, r12
 44c:	2c 96       	adiw	r28, 0x0c	; 12
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	bf 90       	pop	r11
 46a:	af 90       	pop	r10
 46c:	9f 90       	pop	r9
 46e:	08 95       	ret

00000470 <HLCD_void_DisplayOn>:
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	fc 01       	movw	r30, r24
 47a:	90 81       	ld	r25, Z
 47c:	94 60       	ori	r25, 0x04	; 4
 47e:	90 83       	st	Z, r25
 480:	93 fb       	bst	r25, 3
 482:	66 27       	eor	r22, r22
 484:	60 f9       	bld	r22, 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	92 95       	swap	r25
 48e:	91 70       	andi	r25, 0x01	; 1
 490:	6c 60       	ori	r22, 0x0C	; 12
 492:	69 2b       	or	r22, r25
 494:	e1 2c       	mov	r14, r1
 496:	f1 2c       	mov	r15, r1
 498:	87 01       	movw	r16, r14
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	cf 01       	movw	r24, r30
 4a0:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	08 95       	ret

000004ae <HLCD_void_CursorOn>:
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	fc 01       	movw	r30, r24
 4b8:	90 81       	ld	r25, Z
 4ba:	98 60       	ori	r25, 0x08	; 8
 4bc:	90 83       	st	Z, r25
 4be:	92 fb       	bst	r25, 2
 4c0:	66 27       	eor	r22, r22
 4c2:	60 f9       	bld	r22, 0
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	92 95       	swap	r25
 4d0:	91 70       	andi	r25, 0x01	; 1
 4d2:	6a 60       	ori	r22, 0x0A	; 10
 4d4:	69 2b       	or	r22, r25
 4d6:	e1 2c       	mov	r14, r1
 4d8:	f1 2c       	mov	r15, r1
 4da:	87 01       	movw	r16, r14
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	cf 01       	movw	r24, r30
 4e2:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	ff 90       	pop	r15
 4ec:	ef 90       	pop	r14
 4ee:	08 95       	ret

000004f0 <HLCD_void_CursorOff>:
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	fc 01       	movw	r30, r24
 4fa:	90 81       	ld	r25, Z
 4fc:	97 7f       	andi	r25, 0xF7	; 247
 4fe:	90 83       	st	Z, r25
 500:	92 fb       	bst	r25, 2
 502:	66 27       	eor	r22, r22
 504:	60 f9       	bld	r22, 0
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	92 95       	swap	r25
 512:	91 70       	andi	r25, 0x01	; 1
 514:	68 60       	ori	r22, 0x08	; 8
 516:	69 2b       	or	r22, r25
 518:	e1 2c       	mov	r14, r1
 51a:	f1 2c       	mov	r15, r1
 51c:	87 01       	movw	r16, r14
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	cf 01       	movw	r24, r30
 524:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	08 95       	ret

00000532 <HLCD_void_CursorBlinkOn>:
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	0f 93       	push	r16
 538:	1f 93       	push	r17
 53a:	fc 01       	movw	r30, r24
 53c:	90 81       	ld	r25, Z
 53e:	90 61       	ori	r25, 0x10	; 16
 540:	90 83       	st	Z, r25
 542:	92 fb       	bst	r25, 2
 544:	66 27       	eor	r22, r22
 546:	60 f9       	bld	r22, 0
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	66 0f       	add	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	93 fb       	bst	r25, 3
 554:	22 27       	eor	r18, r18
 556:	20 f9       	bld	r18, 0
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	68 60       	ori	r22, 0x08	; 8
 560:	26 2b       	or	r18, r22
 562:	62 2f       	mov	r22, r18
 564:	61 60       	ori	r22, 0x01	; 1
 566:	e1 2c       	mov	r14, r1
 568:	f1 2c       	mov	r15, r1
 56a:	87 01       	movw	r16, r14
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	cf 01       	movw	r24, r30
 572:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 576:	1f 91       	pop	r17
 578:	0f 91       	pop	r16
 57a:	ff 90       	pop	r15
 57c:	ef 90       	pop	r14
 57e:	08 95       	ret

00000580 <HLCD_void_CursorBlinkOff>:
 580:	ef 92       	push	r14
 582:	ff 92       	push	r15
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	fc 01       	movw	r30, r24
 58a:	90 81       	ld	r25, Z
 58c:	9f 7e       	andi	r25, 0xEF	; 239
 58e:	90 83       	st	Z, r25
 590:	92 fb       	bst	r25, 2
 592:	66 27       	eor	r22, r22
 594:	60 f9       	bld	r22, 0
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	66 0f       	add	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	93 fb       	bst	r25, 3
 5a2:	22 27       	eor	r18, r18
 5a4:	20 f9       	bld	r18, 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	22 0f       	add	r18, r18
 5aa:	33 1f       	adc	r19, r19
 5ac:	68 60       	ori	r22, 0x08	; 8
 5ae:	62 2b       	or	r22, r18
 5b0:	e1 2c       	mov	r14, r1
 5b2:	f1 2c       	mov	r15, r1
 5b4:	87 01       	movw	r16, r14
 5b6:	20 e0       	ldi	r18, 0x00	; 0
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	cf 01       	movw	r24, r30
 5bc:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	08 95       	ret

000005ca <HLCD_void_WriteCharacter>:
 5ca:	ef 92       	push	r14
 5cc:	ff 92       	push	r15
 5ce:	0f 93       	push	r16
 5d0:	1f 93       	push	r17
 5d2:	1b e2       	ldi	r17, 0x2B	; 43
 5d4:	e1 2e       	mov	r14, r17
 5d6:	f1 2c       	mov	r15, r1
 5d8:	00 e0       	ldi	r16, 0x00	; 0
 5da:	10 e0       	ldi	r17, 0x00	; 0
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	08 95       	ret

000005ee <HLCD_void_setCursor>:
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	20 e4       	ldi	r18, 0x40	; 64
 5f8:	42 9f       	mul	r20, r18
 5fa:	60 0d       	add	r22, r0
 5fc:	11 24       	eor	r1, r1
 5fe:	60 68       	ori	r22, 0x80	; 128
 600:	17 e2       	ldi	r17, 0x27	; 39
 602:	e1 2e       	mov	r14, r17
 604:	f1 2c       	mov	r15, r1
 606:	00 e0       	ldi	r16, 0x00	; 0
 608:	10 e0       	ldi	r17, 0x00	; 0
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	40 e0       	ldi	r20, 0x00	; 0
 60e:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	ff 90       	pop	r15
 618:	ef 90       	pop	r14
 61a:	08 95       	ret

0000061c <HLCD_void_ClearDisplay>:

void HLCD_void_ClearDisplay(HLCD_t *A_HLCD_t_lcd){
 61c:	ef 92       	push	r14
 61e:	ff 92       	push	r15
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
		HLCD_void_send(
 624:	1a ef       	ldi	r17, 0xFA	; 250
 626:	e1 2e       	mov	r14, r17
 628:	15 e0       	ldi	r17, 0x05	; 5
 62a:	f1 2e       	mov	r15, r17
 62c:	00 e0       	ldi	r16, 0x00	; 0
 62e:	10 e0       	ldi	r17, 0x00	; 0
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	40 e0       	ldi	r20, 0x00	; 0
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
		HLCD_CLR_SCREEN_CMD_RS,
		HLCD_CLR_SCREEN_CMD_RW,
		HLCD_CLR_SCREEN_CMD_TIME_US
		);
		
}
 63a:	1f 91       	pop	r17
 63c:	0f 91       	pop	r16
 63e:	ff 90       	pop	r15
 640:	ef 90       	pop	r14
 642:	08 95       	ret

00000644 <HLCD_void_ReturnHome>:
void HLCD_void_ReturnHome(HLCD_t *A_HLCD_t_lcd){
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
		HLCD_void_send(
 64c:	1a ef       	ldi	r17, 0xFA	; 250
 64e:	e1 2e       	mov	r14, r17
 650:	15 e0       	ldi	r17, 0x05	; 5
 652:	f1 2e       	mov	r15, r17
 654:	00 e0       	ldi	r16, 0x00	; 0
 656:	10 e0       	ldi	r17, 0x00	; 0
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	40 e0       	ldi	r20, 0x00	; 0
 65c:	62 e0       	ldi	r22, 0x02	; 2
 65e:	0e 94 ef 00 	call	0x1de	; 0x1de <HLCD_void_send>
		HLCD_RETURN_HOME_CMD(),
		HLCD_RETURN_HOME_CMD_RS,
		HLCD_RETURN_HOME_CMD_RW,
		HLCD_RETURN_HOME_CMD_TIME_US
		);
}
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	ff 90       	pop	r15
 668:	ef 90       	pop	r14
 66a:	08 95       	ret

0000066c <HLCD_void_WriteNumber>:

void HLCD_void_WriteNumber(HLCD_t *A_HLCD_t_lcd,s32 A_s32_number){
 66c:	8f 92       	push	r8
 66e:	9f 92       	push	r9
 670:	af 92       	push	r10
 672:	bf 92       	push	r11
 674:	cf 92       	push	r12
 676:	df 92       	push	r13
 678:	ef 92       	push	r14
 67a:	ff 92       	push	r15
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	ec 01       	movw	r28, r24
 686:	cb 01       	movw	r24, r22
 688:	ba 01       	movw	r22, r20
	u8 L_u8_signFlag;
	s32 L_s32_ReversedNum =0;
	u8 L_digitsCounter =0;
	
	if(A_s32_number >= 0){
 68a:	99 23       	and	r25, r25
 68c:	4c f4       	brge	.+18     	; 0x6a0 <HLCD_void_WriteNumber+0x34>
		L_u8_signFlag = 0;
	}else{
		L_u8_signFlag = 1;
		A_s32_number = A_s32_number * -1;
 68e:	90 95       	com	r25
 690:	80 95       	com	r24
 692:	70 95       	com	r23
 694:	61 95       	neg	r22
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
	u8 L_digitsCounter =0;
	
	if(A_s32_number >= 0){
		L_u8_signFlag = 0;
	}else{
		L_u8_signFlag = 1;
 69c:	01 e0       	ldi	r16, 0x01	; 1
 69e:	01 c0       	rjmp	.+2      	; 0x6a2 <HLCD_void_WriteNumber+0x36>
	u8 L_u8_signFlag;
	s32 L_s32_ReversedNum =0;
	u8 L_digitsCounter =0;
	
	if(A_s32_number >= 0){
		L_u8_signFlag = 0;
 6a0:	00 e0       	ldi	r16, 0x00	; 0
	}else{
		L_u8_signFlag = 1;
 6a2:	10 e0       	ldi	r17, 0x00	; 0
 6a4:	c1 2c       	mov	r12, r1
 6a6:	d1 2c       	mov	r13, r1
 6a8:	76 01       	movw	r14, r12
		A_s32_number = A_s32_number * -1;
	}
	
	do 
	{
		L_digitsCounter++;
 6aa:	1f 5f       	subi	r17, 0xFF	; 255
		L_s32_ReversedNum = L_s32_ReversedNum*10 + A_s32_number%10;
 6ac:	cc 0c       	add	r12, r12
 6ae:	dd 1c       	adc	r13, r13
 6b0:	ee 1c       	adc	r14, r14
 6b2:	ff 1c       	adc	r15, r15
 6b4:	46 01       	movw	r8, r12
 6b6:	57 01       	movw	r10, r14
 6b8:	88 0c       	add	r8, r8
 6ba:	99 1c       	adc	r9, r9
 6bc:	aa 1c       	adc	r10, r10
 6be:	bb 1c       	adc	r11, r11
 6c0:	88 0c       	add	r8, r8
 6c2:	99 1c       	adc	r9, r9
 6c4:	aa 1c       	adc	r10, r10
 6c6:	bb 1c       	adc	r11, r11
 6c8:	c8 0c       	add	r12, r8
 6ca:	d9 1c       	adc	r13, r9
 6cc:	ea 1c       	adc	r14, r10
 6ce:	fb 1c       	adc	r15, r11
 6d0:	2a e0       	ldi	r18, 0x0A	; 10
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	40 e0       	ldi	r20, 0x00	; 0
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	0e 94 02 07 	call	0xe04	; 0xe04 <__divmodsi4>
 6dc:	c6 0e       	add	r12, r22
 6de:	d7 1e       	adc	r13, r23
 6e0:	e8 1e       	adc	r14, r24
 6e2:	f9 1e       	adc	r15, r25
		A_s32_number = A_s32_number / 10;
 6e4:	62 2f       	mov	r22, r18
 6e6:	73 2f       	mov	r23, r19
 6e8:	84 2f       	mov	r24, r20
 6ea:	95 2f       	mov	r25, r21
		
	} while (A_s32_number != 0);
 6ec:	61 15       	cp	r22, r1
 6ee:	71 05       	cpc	r23, r1
 6f0:	81 05       	cpc	r24, r1
 6f2:	91 05       	cpc	r25, r1
 6f4:	d1 f6       	brne	.-76     	; 0x6aa <HLCD_void_WriteNumber+0x3e>
	
	if(L_u8_signFlag == 1){
 6f6:	01 30       	cpi	r16, 0x01	; 1
 6f8:	d1 f4       	brne	.+52     	; 0x72e <HLCD_void_WriteNumber+0xc2>
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'-');
 6fa:	6d e2       	ldi	r22, 0x2D	; 45
 6fc:	ce 01       	movw	r24, r28
 6fe:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_void_WriteCharacter>
 702:	15 c0       	rjmp	.+42     	; 0x72e <HLCD_void_WriteNumber+0xc2>
	}
	
	while(L_digitsCounter > 0){
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'0'+  L_s32_ReversedNum%10);
 704:	c7 01       	movw	r24, r14
 706:	b6 01       	movw	r22, r12
 708:	2a e0       	ldi	r18, 0x0A	; 10
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	40 e0       	ldi	r20, 0x00	; 0
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	0e 94 02 07 	call	0xe04	; 0xe04 <__divmodsi4>
 714:	92 2e       	mov	r9, r18
 716:	a3 2e       	mov	r10, r19
 718:	b4 2e       	mov	r11, r20
 71a:	05 2f       	mov	r16, r21
 71c:	60 5d       	subi	r22, 0xD0	; 208
 71e:	ce 01       	movw	r24, r28
 720:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_void_WriteCharacter>
		L_s32_ReversedNum = L_s32_ReversedNum / 10;
 724:	c9 2c       	mov	r12, r9
 726:	da 2c       	mov	r13, r10
 728:	eb 2c       	mov	r14, r11
 72a:	f0 2e       	mov	r15, r16
		L_digitsCounter--;
 72c:	11 50       	subi	r17, 0x01	; 1
	
	if(L_u8_signFlag == 1){
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'-');
	}
	
	while(L_digitsCounter > 0){
 72e:	11 11       	cpse	r17, r1
 730:	e9 cf       	rjmp	.-46     	; 0x704 <HLCD_void_WriteNumber+0x98>
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'0'+  L_s32_ReversedNum%10);
		L_s32_ReversedNum = L_s32_ReversedNum / 10;
		L_digitsCounter--;
	}
	
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	ff 90       	pop	r15
 73c:	ef 90       	pop	r14
 73e:	df 90       	pop	r13
 740:	cf 90       	pop	r12
 742:	bf 90       	pop	r11
 744:	af 90       	pop	r10
 746:	9f 90       	pop	r9
 748:	8f 90       	pop	r8
 74a:	08 95       	ret

0000074c <Fun_s32Calc>:
	} while (1);
}



s32 Fun_s32Calc(u8 A_u8Op,s32 A_s32Op1,s32 A_s32op2){
 74c:	cf 92       	push	r12
 74e:	df 92       	push	r13
 750:	ef 92       	push	r14
 752:	ff 92       	push	r15
 754:	0f 93       	push	r16
 756:	1f 93       	push	r17
 758:	68 01       	movw	r12, r16
 75a:	79 01       	movw	r14, r18
	s32 L_s32Ret = 0;
	switch(A_u8Op){
 75c:	8b 32       	cpi	r24, 0x2B	; 43
 75e:	49 f0       	breq	.+18     	; 0x772 <Fun_s32Calc+0x26>
 760:	18 f4       	brcc	.+6      	; 0x768 <Fun_s32Calc+0x1c>
 762:	8a 32       	cpi	r24, 0x2A	; 42
 764:	a1 f0       	breq	.+40     	; 0x78e <Fun_s32Calc+0x42>
 766:	23 c0       	rjmp	.+70     	; 0x7ae <Fun_s32Calc+0x62>
 768:	8d 32       	cpi	r24, 0x2D	; 45
 76a:	51 f0       	breq	.+20     	; 0x780 <Fun_s32Calc+0x34>
 76c:	8f 32       	cpi	r24, 0x2F	; 47
 76e:	b1 f0       	breq	.+44     	; 0x79c <Fun_s32Calc+0x50>
 770:	1e c0       	rjmp	.+60     	; 0x7ae <Fun_s32Calc+0x62>
		case '+':  L_s32Ret = A_s32Op1 + A_s32op2; break;
 772:	cb 01       	movw	r24, r22
 774:	ba 01       	movw	r22, r20
 776:	60 0f       	add	r22, r16
 778:	71 1f       	adc	r23, r17
 77a:	82 1f       	adc	r24, r18
 77c:	93 1f       	adc	r25, r19
 77e:	1a c0       	rjmp	.+52     	; 0x7b4 <Fun_s32Calc+0x68>
		case '-':  L_s32Ret = A_s32Op1 - A_s32op2; break;
 780:	cb 01       	movw	r24, r22
 782:	ba 01       	movw	r22, r20
 784:	60 1b       	sub	r22, r16
 786:	71 0b       	sbc	r23, r17
 788:	82 0b       	sbc	r24, r18
 78a:	93 0b       	sbc	r25, r19
 78c:	13 c0       	rjmp	.+38     	; 0x7b4 <Fun_s32Calc+0x68>
		case '*':  L_s32Ret = A_s32Op1 * A_s32op2; break;
 78e:	9a 01       	movw	r18, r20
 790:	ab 01       	movw	r20, r22
 792:	c7 01       	movw	r24, r14
 794:	b6 01       	movw	r22, r12
 796:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsi3>
 79a:	0c c0       	rjmp	.+24     	; 0x7b4 <Fun_s32Calc+0x68>
		case '/':  L_s32Ret = A_s32Op1 / A_s32op2; break;
 79c:	cb 01       	movw	r24, r22
 79e:	ba 01       	movw	r22, r20
 7a0:	a9 01       	movw	r20, r18
 7a2:	98 01       	movw	r18, r16
 7a4:	0e 94 02 07 	call	0xe04	; 0xe04 <__divmodsi4>
 7a8:	ca 01       	movw	r24, r20
 7aa:	b9 01       	movw	r22, r18
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <Fun_s32Calc+0x68>
}



s32 Fun_s32Calc(u8 A_u8Op,s32 A_s32Op1,s32 A_s32op2){
	s32 L_s32Ret = 0;
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	cb 01       	movw	r24, r22
		case '*':  L_s32Ret = A_s32Op1 * A_s32op2; break;
		case '/':  L_s32Ret = A_s32Op1 / A_s32op2; break;
	}
	
	return L_s32Ret;
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	ff 90       	pop	r15
 7ba:	ef 90       	pop	r14
 7bc:	df 90       	pop	r13
 7be:	cf 90       	pop	r12
 7c0:	08 95       	ret

000007c2 <main>:
}CalcNode_t ;

s32 Fun_s32Calc(u8 A_u8Op,s32 A_s32Op1,s32 A_s32op2);

int main(void)
{
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	c8 58       	subi	r28, 0x88	; 136
 7cc:	d2 40       	sbci	r29, 0x02	; 2
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
	s32 L_s32Sum=0;
	
	u8 L_u8ActiceFalg = 1;
	
	do{
		MDIO_voidInit();
 7d8:	0e 94 37 06 	call	0xc6e	; 0xc6e <MDIO_voidInit>
		
		Pin_t dataPins[] = {PinA7,PinA6,PinA5,PinA4,PinA3,PinA2,PinA1,PinA0};
 7dc:	88 e0       	ldi	r24, 0x08	; 8
 7de:	e0 e6       	ldi	r30, 0x60	; 96
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	de 01       	movw	r26, r28
 7e4:	a3 59       	subi	r26, 0x93	; 147
 7e6:	bd 4f       	sbci	r27, 0xFD	; 253
 7e8:	01 90       	ld	r0, Z+
 7ea:	0d 92       	st	X+, r0
 7ec:	8a 95       	dec	r24
 7ee:	e1 f7       	brne	.-8      	; 0x7e8 <main+0x26>
		L_lcd = HLCD_HLCD_t_LcdCreate(LCD_RS,LCD_RW,LCD_E,dataPins);
 7f0:	8e 01       	movw	r16, r28
 7f2:	03 59       	subi	r16, 0x93	; 147
 7f4:	1d 4f       	sbci	r17, 0xFD	; 253
 7f6:	22 eb       	ldi	r18, 0xB2	; 178
 7f8:	41 eb       	ldi	r20, 0xB1	; 177
 7fa:	60 eb       	ldi	r22, 0xB0	; 176
 7fc:	ce 01       	movw	r24, r28
 7fe:	83 58       	subi	r24, 0x83	; 131
 800:	9d 4f       	sbci	r25, 0xFD	; 253
 802:	0e 94 98 01 	call	0x330	; 0x330 <HLCD_HLCD_t_LcdCreate>
 806:	8c e0       	ldi	r24, 0x0C	; 12
 808:	fe 01       	movw	r30, r28
 80a:	e3 58       	subi	r30, 0x83	; 131
 80c:	fd 4f       	sbci	r31, 0xFD	; 253
 80e:	de 01       	movw	r26, r28
 810:	11 96       	adiw	r26, 0x01	; 1
 812:	01 90       	ld	r0, Z+
 814:	0d 92       	st	X+, r0
 816:	8a 95       	dec	r24
 818:	e1 f7       	brne	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		HLCD_void_DisplayOn(&L_lcd);
 81a:	ce 01       	movw	r24, r28
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	0e 94 38 02 	call	0x470	; 0x470 <HLCD_void_DisplayOn>
		HLCD_void_CursorOn(&L_lcd);
 822:	ce 01       	movw	r24, r28
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	0e 94 57 02 	call	0x4ae	; 0x4ae <HLCD_void_CursorOn>
		HLCD_void_CursorBlinkOn(&L_lcd);
 82a:	ce 01       	movw	r24, r28
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	0e 94 99 02 	call	0x532	; 0x532 <HLCD_void_CursorBlinkOn>
		
		Pin_t colPins[] = {PinC4,PinC5,PinC6,PinC7};
 832:	84 ec       	ldi	r24, 0xC4	; 196
 834:	c7 58       	subi	r28, 0x87	; 135
 836:	dd 4f       	sbci	r29, 0xFD	; 253
 838:	88 83       	st	Y, r24
 83a:	c9 57       	subi	r28, 0x79	; 121
 83c:	d2 40       	sbci	r29, 0x02	; 2
 83e:	85 ec       	ldi	r24, 0xC5	; 197
 840:	c6 58       	subi	r28, 0x86	; 134
 842:	dd 4f       	sbci	r29, 0xFD	; 253
 844:	88 83       	st	Y, r24
 846:	ca 57       	subi	r28, 0x7A	; 122
 848:	d2 40       	sbci	r29, 0x02	; 2
 84a:	86 ec       	ldi	r24, 0xC6	; 198
 84c:	c5 58       	subi	r28, 0x85	; 133
 84e:	dd 4f       	sbci	r29, 0xFD	; 253
 850:	88 83       	st	Y, r24
 852:	cb 57       	subi	r28, 0x7B	; 123
 854:	d2 40       	sbci	r29, 0x02	; 2
 856:	87 ec       	ldi	r24, 0xC7	; 199
 858:	c4 58       	subi	r28, 0x84	; 132
 85a:	dd 4f       	sbci	r29, 0xFD	; 253
 85c:	88 83       	st	Y, r24
 85e:	cc 57       	subi	r28, 0x7C	; 124
 860:	d2 40       	sbci	r29, 0x02	; 2
		Pin_t rowPins[] = {PinC0,PinC1,PinC2,PinC3};
 862:	80 ec       	ldi	r24, 0xC0	; 192
 864:	cb 58       	subi	r28, 0x8B	; 139
 866:	dd 4f       	sbci	r29, 0xFD	; 253
 868:	88 83       	st	Y, r24
 86a:	c5 57       	subi	r28, 0x75	; 117
 86c:	d2 40       	sbci	r29, 0x02	; 2
 86e:	81 ec       	ldi	r24, 0xC1	; 193
 870:	ca 58       	subi	r28, 0x8A	; 138
 872:	dd 4f       	sbci	r29, 0xFD	; 253
 874:	88 83       	st	Y, r24
 876:	c6 57       	subi	r28, 0x76	; 118
 878:	d2 40       	sbci	r29, 0x02	; 2
 87a:	82 ec       	ldi	r24, 0xC2	; 194
 87c:	c9 58       	subi	r28, 0x89	; 137
 87e:	dd 4f       	sbci	r29, 0xFD	; 253
 880:	88 83       	st	Y, r24
 882:	c7 57       	subi	r28, 0x77	; 119
 884:	d2 40       	sbci	r29, 0x02	; 2
 886:	83 ec       	ldi	r24, 0xC3	; 195
 888:	c8 58       	subi	r28, 0x88	; 136
 88a:	dd 4f       	sbci	r29, 0xFD	; 253
 88c:	88 83       	st	Y, r24
 88e:	c8 57       	subi	r28, 0x78	; 120
 890:	d2 40       	sbci	r29, 0x02	; 2
		L_kp = HKEYPAD_HKEYPAD_t_Create(rowPins,colPins);
 892:	be 01       	movw	r22, r28
 894:	67 58       	subi	r22, 0x87	; 135
 896:	7d 4f       	sbci	r23, 0xFD	; 253
 898:	ce 01       	movw	r24, r28
 89a:	8b 58       	subi	r24, 0x8B	; 139
 89c:	9d 4f       	sbci	r25, 0xFD	; 253
 89e:	0e 94 41 00 	call	0x82	; 0x82 <HKEYPAD_HKEYPAD_t_Create>
 8a2:	2d 87       	std	Y+13, r18	; 0x0d
 8a4:	3e 87       	std	Y+14, r19	; 0x0e
 8a6:	4f 87       	std	Y+15, r20	; 0x0f
 8a8:	58 8b       	std	Y+16, r21	; 0x10
 8aa:	69 8b       	std	Y+17, r22	; 0x11
 8ac:	7a 8b       	std	Y+18, r23	; 0x12
 8ae:	8b 8b       	std	Y+19, r24	; 0x13
 8b0:	9c 8b       	std	Y+20, r25	; 0x14
	u8 L_u8ABufferSize=0;
	u8 L_u8CalcArrSize = 0;
	u8 L_u8Temp;
	s32 L_s32Sum=0;
	
	u8 L_u8ActiceFalg = 1;
 8b2:	01 e0       	ldi	r16, 0x01	; 1
{
	HLCD_t L_lcd;
	HKEYPAD_t L_kp;
	u8 L_u8Buffer[MAX_SI];
	CalcNode_t L_CalcArr[MAX_SI];
	u8 L_u8ABufferSize=0;
 8b4:	e1 2c       	mov	r14, r1
	
	
	
	do 
	{
		L_u8Temp = HKEYPAD_u8_getChar(&L_kp);
 8b6:	ce 01       	movw	r24, r28
 8b8:	0d 96       	adiw	r24, 0x0d	; 13
 8ba:	0e 94 a3 00 	call	0x146	; 0x146 <HKEYPAD_u8_getChar>
 8be:	18 2f       	mov	r17, r24
		
		if(L_u8ActiceFalg==0){
 8c0:	01 11       	cpse	r16, r1
 8c2:	15 c0       	rjmp	.+42     	; 0x8ee <__stack+0x8f>
			if(L_u8Temp =='C'){
 8c4:	83 34       	cpi	r24, 0x43	; 67
 8c6:	b9 f7       	brne	.-18     	; 0x8b6 <__stack+0x57>
			HLCD_void_ClearDisplay(&L_lcd);
 8c8:	ce 01       	movw	r24, r28
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	0e 94 0e 03 	call	0x61c	; 0x61c <HLCD_void_ClearDisplay>
			HLCD_void_ReturnHome(&L_lcd);
 8d0:	ce 01       	movw	r24, r28
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	0e 94 22 03 	call	0x644	; 0x644 <HLCD_void_ReturnHome>
					HLCD_void_CursorOn(&L_lcd);
 8d8:	ce 01       	movw	r24, r28
 8da:	01 96       	adiw	r24, 0x01	; 1
 8dc:	0e 94 57 02 	call	0x4ae	; 0x4ae <HLCD_void_CursorOn>
					HLCD_void_CursorBlinkOn(&L_lcd);
 8e0:	ce 01       	movw	r24, r28
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	0e 94 99 02 	call	0x532	; 0x532 <HLCD_void_CursorBlinkOn>
			L_u8ABufferSize = 0;
			L_u8ActiceFalg  = 1;
 8e8:	01 e0       	ldi	r16, 0x01	; 1
			if(L_u8Temp =='C'){
			HLCD_void_ClearDisplay(&L_lcd);
			HLCD_void_ReturnHome(&L_lcd);
					HLCD_void_CursorOn(&L_lcd);
					HLCD_void_CursorBlinkOn(&L_lcd);
			L_u8ABufferSize = 0;
 8ea:	e1 2c       	mov	r14, r1
			L_u8ActiceFalg  = 1;
			}
			
			continue;
 8ec:	e4 cf       	rjmp	.-56     	; 0x8b6 <__stack+0x57>
		}
		
		
	
		
		if(L_u8ABufferSize < MAX_SI){
 8ee:	0f 2e       	mov	r0, r31
 8f0:	f3 e6       	ldi	r31, 0x63	; 99
 8f2:	af 2e       	mov	r10, r31
 8f4:	f0 2d       	mov	r31, r0
 8f6:	ae 14       	cp	r10, r14
 8f8:	c0 f1       	brcs	.+112    	; 0x96a <__stack+0x10b>
			if(L_u8Temp >= '0' && L_u8Temp <= '9'){
 8fa:	80 ed       	ldi	r24, 0xD0	; 208
 8fc:	81 0f       	add	r24, r17
 8fe:	8a 30       	cpi	r24, 0x0A	; 10
 900:	70 f4       	brcc	.+28     	; 0x91e <__stack+0xbf>
				L_u8Buffer[L_u8ABufferSize] = L_u8Temp;
 902:	e5 e1       	ldi	r30, 0x15	; 21
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	ec 0f       	add	r30, r28
 908:	fd 1f       	adc	r31, r29
 90a:	ee 0d       	add	r30, r14
 90c:	f1 1d       	adc	r31, r1
 90e:	10 83       	st	Z, r17
				L_u8ABufferSize++;
 910:	e3 94       	inc	r14
				HLCD_void_WriteCharacter(&L_lcd,L_u8Temp);
 912:	61 2f       	mov	r22, r17
 914:	ce 01       	movw	r24, r28
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_void_WriteCharacter>
 91c:	26 c0       	rjmp	.+76     	; 0x96a <__stack+0x10b>
				
			}else if(L_u8Temp == '+' || L_u8Temp == '-' || L_u8Temp =='/' || L_u8Temp == '*'){
 91e:	1b 32       	cpi	r17, 0x2B	; 43
 920:	31 f0       	breq	.+12     	; 0x92e <__stack+0xcf>
 922:	1d 32       	cpi	r17, 0x2D	; 45
 924:	21 f0       	breq	.+8      	; 0x92e <__stack+0xcf>
 926:	1f 32       	cpi	r17, 0x2F	; 47
 928:	11 f0       	breq	.+4      	; 0x92e <__stack+0xcf>
 92a:	1a 32       	cpi	r17, 0x2A	; 42
 92c:	f1 f4       	brne	.+60     	; 0x96a <__stack+0x10b>
				if(L_u8ABufferSize>0 && L_u8Buffer[L_u8ABufferSize-1] >= '0' && L_u8Buffer[L_u8ABufferSize-1] <= '9'){
 92e:	ee 20       	and	r14, r14
 930:	e1 f0       	breq	.+56     	; 0x96a <__stack+0x10b>
 932:	8e 2d       	mov	r24, r14
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	fc 01       	movw	r30, r24
 938:	31 97       	sbiw	r30, 0x01	; 1
 93a:	0f 2e       	mov	r0, r31
 93c:	f5 e1       	ldi	r31, 0x15	; 21
 93e:	cf 2e       	mov	r12, r31
 940:	d1 2c       	mov	r13, r1
 942:	f0 2d       	mov	r31, r0
 944:	cc 0e       	add	r12, r28
 946:	dd 1e       	adc	r13, r29
 948:	ec 0d       	add	r30, r12
 94a:	fd 1d       	adc	r31, r13
 94c:	20 81       	ld	r18, Z
 94e:	20 33       	cpi	r18, 0x30	; 48
 950:	60 f0       	brcs	.+24     	; 0x96a <__stack+0x10b>
 952:	2a 33       	cpi	r18, 0x3A	; 58
 954:	50 f4       	brcc	.+20     	; 0x96a <__stack+0x10b>
					
					L_u8Buffer[L_u8ABufferSize] = L_u8Temp;
 956:	f6 01       	movw	r30, r12
 958:	e8 0f       	add	r30, r24
 95a:	f9 1f       	adc	r31, r25
 95c:	10 83       	st	Z, r17
					L_u8ABufferSize++;
 95e:	e3 94       	inc	r14
					HLCD_void_WriteCharacter(&L_lcd,L_u8Temp);
 960:	61 2f       	mov	r22, r17
 962:	ce 01       	movw	r24, r28
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	0e 94 e5 02 	call	0x5ca	; 0x5ca <HLCD_void_WriteCharacter>
			}
			
			
		}
		
		if(L_u8Temp == 'C'){
 96a:	13 34       	cpi	r17, 0x43	; 67
 96c:	59 f4       	brne	.+22     	; 0x984 <__stack+0x125>
			HLCD_void_ClearDisplay(&L_lcd);
 96e:	ce 01       	movw	r24, r28
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	0e 94 0e 03 	call	0x61c	; 0x61c <HLCD_void_ClearDisplay>
			HLCD_void_ReturnHome(&L_lcd);
 976:	ce 01       	movw	r24, r28
 978:	01 96       	adiw	r24, 0x01	; 1
 97a:	0e 94 22 03 	call	0x644	; 0x644 <HLCD_void_ReturnHome>
			L_u8ABufferSize = 0;
			L_u8ActiceFalg  = 1;
 97e:	01 e0       	ldi	r16, 0x01	; 1
		}
		
		if(L_u8Temp == 'C'){
			HLCD_void_ClearDisplay(&L_lcd);
			HLCD_void_ReturnHome(&L_lcd);
			L_u8ABufferSize = 0;
 980:	e1 2c       	mov	r14, r1
 982:	99 cf       	rjmp	.-206    	; 0x8b6 <__stack+0x57>
			L_u8ActiceFalg  = 1;
		}else if(L_u8Temp == '='){
 984:	1d 33       	cpi	r17, 0x3D	; 61
 986:	09 f0       	breq	.+2      	; 0x98a <__stack+0x12b>
 988:	96 cf       	rjmp	.-212    	; 0x8b6 <__stack+0x57>
			//assemble buffer array
			L_u8CalcArrSize = 0;
			L_CalcArr[0].L_u32data = 0;
 98a:	ed 96       	adiw	r28, 0x3d	; 61
 98c:	1c ae       	std	Y+60, r1	; 0x3c
 98e:	1d ae       	std	Y+61, r1	; 0x3d
 990:	1e ae       	std	Y+62, r1	; 0x3e
 992:	1f ae       	std	Y+63, r1	; 0x3f
 994:	ed 97       	sbiw	r28, 0x3d	; 61
			
			for (L_u8Temp =0 ; L_u8Temp < L_u8ABufferSize ;L_u8Temp++)
 996:	20 e0       	ldi	r18, 0x00	; 0
			HLCD_void_ReturnHome(&L_lcd);
			L_u8ABufferSize = 0;
			L_u8ActiceFalg  = 1;
		}else if(L_u8Temp == '='){
			//assemble buffer array
			L_u8CalcArrSize = 0;
 998:	f1 2c       	mov	r15, r1
			L_CalcArr[0].L_u32data = 0;
			
			for (L_u8Temp =0 ; L_u8Temp < L_u8ABufferSize ;L_u8Temp++)
 99a:	7b c0       	rjmp	.+246    	; 0xa92 <__stack+0x233>
			{
				if(L_u8Buffer[L_u8Temp] >= '0'
 99c:	e5 e1       	ldi	r30, 0x15	; 21
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	ec 0f       	add	r30, r28
 9a2:	fd 1f       	adc	r31, r29
 9a4:	e2 0f       	add	r30, r18
 9a6:	f1 1d       	adc	r31, r1
 9a8:	80 81       	ld	r24, Z
					&& L_u8Buffer[L_u8Temp] <= '9'
 9aa:	90 ed       	ldi	r25, 0xD0	; 208
 9ac:	98 0f       	add	r25, r24
			L_u8CalcArrSize = 0;
			L_CalcArr[0].L_u32data = 0;
			
			for (L_u8Temp =0 ; L_u8Temp < L_u8ABufferSize ;L_u8Temp++)
			{
				if(L_u8Buffer[L_u8Temp] >= '0'
 9ae:	9a 30       	cpi	r25, 0x0A	; 10
 9b0:	c0 f5       	brcc	.+112    	; 0xa22 <__stack+0x1c3>
					&& L_u8Buffer[L_u8Temp] <= '9'
				){
					L_CalcArr[L_u8CalcArrSize].L_u32data = 10*L_CalcArr[L_u8CalcArrSize].L_u32data + L_u8Buffer[L_u8Temp] - '0';
 9b2:	ef 2d       	mov	r30, r15
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	af 01       	movw	r20, r30
 9b8:	44 0f       	add	r20, r20
 9ba:	55 1f       	adc	r21, r21
 9bc:	44 0f       	add	r20, r20
 9be:	55 1f       	adc	r21, r21
 9c0:	e4 0f       	add	r30, r20
 9c2:	f5 1f       	adc	r31, r21
 9c4:	49 e7       	ldi	r20, 0x79	; 121
 9c6:	50 e0       	ldi	r21, 0x00	; 0
 9c8:	4c 0f       	add	r20, r28
 9ca:	5d 1f       	adc	r21, r29
 9cc:	e4 0f       	add	r30, r20
 9ce:	f5 1f       	adc	r31, r21
 9d0:	40 81       	ld	r20, Z
 9d2:	51 81       	ldd	r21, Z+1	; 0x01
 9d4:	62 81       	ldd	r22, Z+2	; 0x02
 9d6:	73 81       	ldd	r23, Z+3	; 0x03
 9d8:	44 0f       	add	r20, r20
 9da:	55 1f       	adc	r21, r21
 9dc:	66 1f       	adc	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	4a 01       	movw	r8, r20
 9e2:	5b 01       	movw	r10, r22
 9e4:	88 0c       	add	r8, r8
 9e6:	99 1c       	adc	r9, r9
 9e8:	aa 1c       	adc	r10, r10
 9ea:	bb 1c       	adc	r11, r11
 9ec:	88 0c       	add	r8, r8
 9ee:	99 1c       	adc	r9, r9
 9f0:	aa 1c       	adc	r10, r10
 9f2:	bb 1c       	adc	r11, r11
 9f4:	48 0d       	add	r20, r8
 9f6:	59 1d       	adc	r21, r9
 9f8:	6a 1d       	adc	r22, r10
 9fa:	7b 1d       	adc	r23, r11
 9fc:	5a 01       	movw	r10, r20
 9fe:	6b 01       	movw	r12, r22
 a00:	a8 0e       	add	r10, r24
 a02:	b1 1c       	adc	r11, r1
 a04:	c1 1c       	adc	r12, r1
 a06:	d1 1c       	adc	r13, r1
 a08:	d6 01       	movw	r26, r12
 a0a:	c5 01       	movw	r24, r10
 a0c:	c0 97       	sbiw	r24, 0x30	; 48
 a0e:	a1 09       	sbc	r26, r1
 a10:	b1 09       	sbc	r27, r1
 a12:	80 83       	st	Z, r24
 a14:	91 83       	std	Z+1, r25	; 0x01
 a16:	a2 83       	std	Z+2, r26	; 0x02
 a18:	b3 83       	std	Z+3, r27	; 0x03
					L_CalcArr[L_u8CalcArrSize].L_u1isNumber = 1;
 a1a:	84 81       	ldd	r24, Z+4	; 0x04
 a1c:	81 60       	ori	r24, 0x01	; 1
 a1e:	84 83       	std	Z+4, r24	; 0x04
 a20:	37 c0       	rjmp	.+110    	; 0xa90 <__stack+0x231>
				}else if (L_u8Buffer[L_u8Temp] == '+' || L_u8Buffer[L_u8Temp] == '-' || L_u8Buffer[L_u8Temp] =='/' || L_u8Buffer[L_u8Temp] == '*'){
 a22:	8b 32       	cpi	r24, 0x2B	; 43
 a24:	31 f0       	breq	.+12     	; 0xa32 <__stack+0x1d3>
 a26:	8d 32       	cpi	r24, 0x2D	; 45
 a28:	21 f0       	breq	.+8      	; 0xa32 <__stack+0x1d3>
 a2a:	8f 32       	cpi	r24, 0x2F	; 47
 a2c:	11 f0       	breq	.+4      	; 0xa32 <__stack+0x1d3>
 a2e:	8a 32       	cpi	r24, 0x2A	; 42
 a30:	79 f5       	brne	.+94     	; 0xa90 <__stack+0x231>
					L_u8CalcArrSize++;
 a32:	e1 e0       	ldi	r30, 0x01	; 1
 a34:	ef 0d       	add	r30, r15
					
					L_CalcArr[L_u8CalcArrSize].L_u32data = L_u8Buffer[L_u8Temp];
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	af 01       	movw	r20, r30
 a3a:	44 0f       	add	r20, r20
 a3c:	55 1f       	adc	r21, r21
 a3e:	44 0f       	add	r20, r20
 a40:	55 1f       	adc	r21, r21
 a42:	e4 0f       	add	r30, r20
 a44:	f5 1f       	adc	r31, r21
 a46:	0f 2e       	mov	r0, r31
 a48:	f9 e7       	ldi	r31, 0x79	; 121
 a4a:	cf 2e       	mov	r12, r31
 a4c:	d1 2c       	mov	r13, r1
 a4e:	f0 2d       	mov	r31, r0
 a50:	cc 0e       	add	r12, r28
 a52:	dd 1e       	adc	r13, r29
 a54:	ec 0d       	add	r30, r12
 a56:	fd 1d       	adc	r31, r13
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	a0 e0       	ldi	r26, 0x00	; 0
 a5c:	b0 e0       	ldi	r27, 0x00	; 0
 a5e:	80 83       	st	Z, r24
 a60:	91 83       	std	Z+1, r25	; 0x01
 a62:	a2 83       	std	Z+2, r26	; 0x02
 a64:	b3 83       	std	Z+3, r27	; 0x03
					L_CalcArr[L_u8CalcArrSize].L_u1isNumber = 0;
 a66:	84 81       	ldd	r24, Z+4	; 0x04
 a68:	8e 7f       	andi	r24, 0xFE	; 254
 a6a:	84 83       	std	Z+4, r24	; 0x04
					
					L_u8CalcArrSize++;
 a6c:	f3 94       	inc	r15
 a6e:	f3 94       	inc	r15
					L_CalcArr[L_u8CalcArrSize].L_u32data = 0;
 a70:	8f 2d       	mov	r24, r15
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	fc 01       	movw	r30, r24
 a76:	ee 0f       	add	r30, r30
 a78:	ff 1f       	adc	r31, r31
 a7a:	ee 0f       	add	r30, r30
 a7c:	ff 1f       	adc	r31, r31
 a7e:	8e 0f       	add	r24, r30
 a80:	9f 1f       	adc	r25, r31
 a82:	f6 01       	movw	r30, r12
 a84:	e8 0f       	add	r30, r24
 a86:	f9 1f       	adc	r31, r25
 a88:	10 82       	st	Z, r1
 a8a:	11 82       	std	Z+1, r1	; 0x01
 a8c:	12 82       	std	Z+2, r1	; 0x02
 a8e:	13 82       	std	Z+3, r1	; 0x03
		}else if(L_u8Temp == '='){
			//assemble buffer array
			L_u8CalcArrSize = 0;
			L_CalcArr[0].L_u32data = 0;
			
			for (L_u8Temp =0 ; L_u8Temp < L_u8ABufferSize ;L_u8Temp++)
 a90:	2f 5f       	subi	r18, 0xFF	; 255
 a92:	2e 15       	cp	r18, r14
 a94:	08 f4       	brcc	.+2      	; 0xa98 <__stack+0x239>
 a96:	82 cf       	rjmp	.-252    	; 0x99c <__stack+0x13d>
			HLCD_void_WriteCharacter(&L_lcd,' ');			
			
			continue;*/
			
			//calculate buffer array
			L_s32Sum = L_CalcArr[0].L_u32data;
 a98:	ed 96       	adiw	r28, 0x3d	; 61
 a9a:	4c ac       	ldd	r4, Y+60	; 0x3c
 a9c:	5d ac       	ldd	r5, Y+61	; 0x3d
 a9e:	6e ac       	ldd	r6, Y+62	; 0x3e
 aa0:	7f ac       	ldd	r7, Y+63	; 0x3f
 aa2:	ed 97       	sbiw	r28, 0x3d	; 61
			for (L_u8Temp =1 ; L_u8Temp < L_u8CalcArrSize ;L_u8Temp++)
 aa4:	99 24       	eor	r9, r9
 aa6:	93 94       	inc	r9
 aa8:	42 c0       	rjmp	.+132    	; 0xb2e <__stack+0x2cf>
			{
				if(L_CalcArr[L_u8Temp].L_u1isNumber){
 aaa:	89 2d       	mov	r24, r9
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	fc 01       	movw	r30, r24
 ab0:	ee 0f       	add	r30, r30
 ab2:	ff 1f       	adc	r31, r31
 ab4:	ee 0f       	add	r30, r30
 ab6:	ff 1f       	adc	r31, r31
 ab8:	e8 0f       	add	r30, r24
 aba:	f9 1f       	adc	r31, r25
 abc:	29 e7       	ldi	r18, 0x79	; 121
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	2c 0f       	add	r18, r28
 ac2:	3d 1f       	adc	r19, r29
 ac4:	e2 0f       	add	r30, r18
 ac6:	f3 1f       	adc	r31, r19
 ac8:	24 81       	ldd	r18, Z+4	; 0x04
 aca:	20 fd       	sbrc	r18, 0
 acc:	2f c0       	rjmp	.+94     	; 0xb2c <__stack+0x2cd>
					
				}else {
					L_s32Sum = Fun_s32Calc(L_CalcArr[L_u8Temp].L_u32data,L_s32Sum,L_CalcArr[L_u8Temp+1].L_u32data);
 ace:	9c 01       	movw	r18, r24
 ad0:	2f 5f       	subi	r18, 0xFF	; 255
 ad2:	3f 4f       	sbci	r19, 0xFF	; 255
 ad4:	69 01       	movw	r12, r18
 ad6:	cc 0c       	add	r12, r12
 ad8:	dd 1c       	adc	r13, r13
 ada:	cc 0c       	add	r12, r12
 adc:	dd 1c       	adc	r13, r13
 ade:	c2 0e       	add	r12, r18
 ae0:	d3 1e       	adc	r13, r19
 ae2:	49 e7       	ldi	r20, 0x79	; 121
 ae4:	50 e0       	ldi	r21, 0x00	; 0
 ae6:	4c 0f       	add	r20, r28
 ae8:	5d 1f       	adc	r21, r29
 aea:	c4 0e       	add	r12, r20
 aec:	d5 1e       	adc	r13, r21
 aee:	f6 01       	movw	r30, r12
 af0:	00 81       	ld	r16, Z
 af2:	11 81       	ldd	r17, Z+1	; 0x01
 af4:	22 81       	ldd	r18, Z+2	; 0x02
 af6:	33 81       	ldd	r19, Z+3	; 0x03
 af8:	5c 01       	movw	r10, r24
 afa:	aa 0c       	add	r10, r10
 afc:	bb 1c       	adc	r11, r11
 afe:	aa 0c       	add	r10, r10
 b00:	bb 1c       	adc	r11, r11
 b02:	a8 0e       	add	r10, r24
 b04:	b9 1e       	adc	r11, r25
 b06:	a4 0e       	add	r10, r20
 b08:	b5 1e       	adc	r11, r21
 b0a:	b3 01       	movw	r22, r6
 b0c:	a2 01       	movw	r20, r4
 b0e:	f5 01       	movw	r30, r10
 b10:	80 81       	ld	r24, Z
 b12:	0e 94 a6 03 	call	0x74c	; 0x74c <Fun_s32Calc>
 b16:	2b 01       	movw	r4, r22
 b18:	3c 01       	movw	r6, r24
					L_CalcArr[L_u8Temp].L_u1ignore = 1;
 b1a:	f5 01       	movw	r30, r10
 b1c:	84 81       	ldd	r24, Z+4	; 0x04
 b1e:	82 60       	ori	r24, 0x02	; 2
 b20:	84 83       	std	Z+4, r24	; 0x04
					L_CalcArr[L_u8Temp+1].L_u1ignore = 1;
 b22:	f6 01       	movw	r30, r12
 b24:	84 81       	ldd	r24, Z+4	; 0x04
 b26:	82 60       	ori	r24, 0x02	; 2
 b28:	84 83       	std	Z+4, r24	; 0x04
					L_u8Temp+=1;
 b2a:	93 94       	inc	r9
			
			continue;*/
			
			//calculate buffer array
			L_s32Sum = L_CalcArr[0].L_u32data;
			for (L_u8Temp =1 ; L_u8Temp < L_u8CalcArrSize ;L_u8Temp++)
 b2c:	93 94       	inc	r9
 b2e:	9f 14       	cp	r9, r15
 b30:	08 f4       	brcc	.+2      	; 0xb34 <__stack+0x2d5>
 b32:	bb cf       	rjmp	.-138    	; 0xaaa <__stack+0x24b>

				}
				
			}
			
			HLCD_void_setCursor(&L_lcd,0,1);
 b34:	41 e0       	ldi	r20, 0x01	; 1
 b36:	60 e0       	ldi	r22, 0x00	; 0
 b38:	ce 01       	movw	r24, r28
 b3a:	01 96       	adiw	r24, 0x01	; 1
 b3c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <HLCD_void_setCursor>
			HLCD_void_WriteNumber(&L_lcd,L_s32Sum);
 b40:	b3 01       	movw	r22, r6
 b42:	a2 01       	movw	r20, r4
 b44:	ce 01       	movw	r24, r28
 b46:	01 96       	adiw	r24, 0x01	; 1
 b48:	0e 94 36 03 	call	0x66c	; 0x66c <HLCD_void_WriteNumber>
			HLCD_void_CursorOff(&L_lcd);
 b4c:	ce 01       	movw	r24, r28
 b4e:	01 96       	adiw	r24, 0x01	; 1
 b50:	0e 94 78 02 	call	0x4f0	; 0x4f0 <HLCD_void_CursorOff>
			HLCD_void_CursorBlinkOff(&L_lcd);
 b54:	ce 01       	movw	r24, r28
 b56:	01 96       	adiw	r24, 0x01	; 1
 b58:	0e 94 c0 02 	call	0x580	; 0x580 <HLCD_void_CursorBlinkOff>
			L_u8ActiceFalg =0;
 b5c:	00 e0       	ldi	r16, 0x00	; 0
 b5e:	ab ce       	rjmp	.-682    	; 0x8b6 <__stack+0x57>

00000b60 <MDELAY_void_milli>:
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 b60:	41 c0       	rjmp	.+130    	; 0xbe4 <MDELAY_void_milli+0x84>
		if(A_u32_ms >= 1000){
 b62:	68 3e       	cpi	r22, 0xE8	; 232
 b64:	23 e0       	ldi	r18, 0x03	; 3
 b66:	72 07       	cpc	r23, r18
 b68:	81 05       	cpc	r24, r1
 b6a:	91 05       	cpc	r25, r1
 b6c:	70 f0       	brcs	.+28     	; 0xb8a <MDELAY_void_milli+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b6e:	3f ef       	ldi	r19, 0xFF	; 255
 b70:	49 e6       	ldi	r20, 0x69	; 105
 b72:	e8 e1       	ldi	r30, 0x18	; 24
 b74:	31 50       	subi	r19, 0x01	; 1
 b76:	40 40       	sbci	r20, 0x00	; 0
 b78:	e0 40       	sbci	r30, 0x00	; 0
 b7a:	e1 f7       	brne	.-8      	; 0xb74 <MDELAY_void_milli+0x14>
 b7c:	00 c0       	rjmp	.+0      	; 0xb7e <MDELAY_void_milli+0x1e>
 b7e:	00 00       	nop
			_delay_ms(1000);
			A_u32_ms -= 1000;
 b80:	68 5e       	subi	r22, 0xE8	; 232
 b82:	73 40       	sbci	r23, 0x03	; 3
 b84:	81 09       	sbc	r24, r1
 b86:	91 09       	sbc	r25, r1
 b88:	2d c0       	rjmp	.+90     	; 0xbe4 <MDELAY_void_milli+0x84>
		}
		else if(A_u32_ms >= 100){
 b8a:	64 36       	cpi	r22, 0x64	; 100
 b8c:	71 05       	cpc	r23, r1
 b8e:	81 05       	cpc	r24, r1
 b90:	91 05       	cpc	r25, r1
 b92:	70 f0       	brcs	.+28     	; 0xbb0 <MDELAY_void_milli+0x50>
 b94:	ff ef       	ldi	r31, 0xFF	; 255
 b96:	20 e7       	ldi	r18, 0x70	; 112
 b98:	32 e0       	ldi	r19, 0x02	; 2
 b9a:	f1 50       	subi	r31, 0x01	; 1
 b9c:	20 40       	sbci	r18, 0x00	; 0
 b9e:	30 40       	sbci	r19, 0x00	; 0
 ba0:	e1 f7       	brne	.-8      	; 0xb9a <MDELAY_void_milli+0x3a>
 ba2:	00 c0       	rjmp	.+0      	; 0xba4 <MDELAY_void_milli+0x44>
 ba4:	00 00       	nop
			_delay_ms(100);
			A_u32_ms -= 100;
 ba6:	64 56       	subi	r22, 0x64	; 100
 ba8:	71 09       	sbc	r23, r1
 baa:	81 09       	sbc	r24, r1
 bac:	91 09       	sbc	r25, r1
 bae:	1a c0       	rjmp	.+52     	; 0xbe4 <MDELAY_void_milli+0x84>
		}else if(A_u32_ms >= 10){
 bb0:	6a 30       	cpi	r22, 0x0A	; 10
 bb2:	71 05       	cpc	r23, r1
 bb4:	81 05       	cpc	r24, r1
 bb6:	91 05       	cpc	r25, r1
 bb8:	58 f0       	brcs	.+22     	; 0xbd0 <MDELAY_void_milli+0x70>
 bba:	ef e1       	ldi	r30, 0x1F	; 31
 bbc:	fe e4       	ldi	r31, 0x4E	; 78
 bbe:	31 97       	sbiw	r30, 0x01	; 1
 bc0:	f1 f7       	brne	.-4      	; 0xbbe <MDELAY_void_milli+0x5e>
 bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <MDELAY_void_milli+0x64>
 bc4:	00 00       	nop
			_delay_ms(10);
			A_u32_ms -= 10;
 bc6:	6a 50       	subi	r22, 0x0A	; 10
 bc8:	71 09       	sbc	r23, r1
 bca:	81 09       	sbc	r24, r1
 bcc:	91 09       	sbc	r25, r1
 bce:	0a c0       	rjmp	.+20     	; 0xbe4 <MDELAY_void_milli+0x84>
 bd0:	ef ec       	ldi	r30, 0xCF	; 207
 bd2:	f7 e0       	ldi	r31, 0x07	; 7
 bd4:	31 97       	sbiw	r30, 0x01	; 1
 bd6:	f1 f7       	brne	.-4      	; 0xbd4 <MDELAY_void_milli+0x74>
 bd8:	00 c0       	rjmp	.+0      	; 0xbda <MDELAY_void_milli+0x7a>
 bda:	00 00       	nop
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
 bdc:	61 50       	subi	r22, 0x01	; 1
 bde:	71 09       	sbc	r23, r1
 be0:	81 09       	sbc	r24, r1
 be2:	91 09       	sbc	r25, r1
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 be4:	61 15       	cp	r22, r1
 be6:	71 05       	cpc	r23, r1
 be8:	81 05       	cpc	r24, r1
 bea:	91 05       	cpc	r25, r1
 bec:	09 f0       	breq	.+2      	; 0xbf0 <MDELAY_void_milli+0x90>
 bee:	b9 cf       	rjmp	.-142    	; 0xb62 <MDELAY_void_milli+0x2>
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
		}
	}
}
 bf0:	08 95       	ret

00000bf2 <MDELAY_void_micro>:

void MDELAY_void_micro(u32 A_u32_us){
	while(A_u32_us>0){
 bf2:	37 c0       	rjmp	.+110    	; 0xc62 <MDELAY_void_micro+0x70>
		if(A_u32_us >= 1000){
 bf4:	68 3e       	cpi	r22, 0xE8	; 232
 bf6:	23 e0       	ldi	r18, 0x03	; 3
 bf8:	72 07       	cpc	r23, r18
 bfa:	81 05       	cpc	r24, r1
 bfc:	91 05       	cpc	r25, r1
 bfe:	58 f0       	brcs	.+22     	; 0xc16 <MDELAY_void_micro+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c00:	ef ec       	ldi	r30, 0xCF	; 207
 c02:	f7 e0       	ldi	r31, 0x07	; 7
 c04:	31 97       	sbiw	r30, 0x01	; 1
 c06:	f1 f7       	brne	.-4      	; 0xc04 <MDELAY_void_micro+0x12>
 c08:	00 c0       	rjmp	.+0      	; 0xc0a <MDELAY_void_micro+0x18>
 c0a:	00 00       	nop
			_delay_us(1000);
			A_u32_us -= 1000;
 c0c:	68 5e       	subi	r22, 0xE8	; 232
 c0e:	73 40       	sbci	r23, 0x03	; 3
 c10:	81 09       	sbc	r24, r1
 c12:	91 09       	sbc	r25, r1
 c14:	26 c0       	rjmp	.+76     	; 0xc62 <MDELAY_void_micro+0x70>
		}
		else if(A_u32_us >= 100){
 c16:	64 36       	cpi	r22, 0x64	; 100
 c18:	71 05       	cpc	r23, r1
 c1a:	81 05       	cpc	r24, r1
 c1c:	91 05       	cpc	r25, r1
 c1e:	58 f0       	brcs	.+22     	; 0xc36 <MDELAY_void_micro+0x44>
 c20:	e7 ec       	ldi	r30, 0xC7	; 199
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	31 97       	sbiw	r30, 0x01	; 1
 c26:	f1 f7       	brne	.-4      	; 0xc24 <MDELAY_void_micro+0x32>
 c28:	00 c0       	rjmp	.+0      	; 0xc2a <MDELAY_void_micro+0x38>
 c2a:	00 00       	nop
			_delay_us(100);
			A_u32_us -= 100;
 c2c:	64 56       	subi	r22, 0x64	; 100
 c2e:	71 09       	sbc	r23, r1
 c30:	81 09       	sbc	r24, r1
 c32:	91 09       	sbc	r25, r1
 c34:	16 c0       	rjmp	.+44     	; 0xc62 <MDELAY_void_micro+0x70>
		}else if(A_u32_us >= 10){
 c36:	6a 30       	cpi	r22, 0x0A	; 10
 c38:	71 05       	cpc	r23, r1
 c3a:	81 05       	cpc	r24, r1
 c3c:	91 05       	cpc	r25, r1
 c3e:	48 f0       	brcs	.+18     	; 0xc52 <MDELAY_void_micro+0x60>
 c40:	fa e1       	ldi	r31, 0x1A	; 26
 c42:	fa 95       	dec	r31
 c44:	f1 f7       	brne	.-4      	; 0xc42 <MDELAY_void_micro+0x50>
 c46:	00 c0       	rjmp	.+0      	; 0xc48 <MDELAY_void_micro+0x56>
			_delay_us(10);
			A_u32_us -= 10;
 c48:	6a 50       	subi	r22, 0x0A	; 10
 c4a:	71 09       	sbc	r23, r1
 c4c:	81 09       	sbc	r24, r1
 c4e:	91 09       	sbc	r25, r1
 c50:	08 c0       	rjmp	.+16     	; 0xc62 <MDELAY_void_micro+0x70>
 c52:	22 e0       	ldi	r18, 0x02	; 2
 c54:	2a 95       	dec	r18
 c56:	f1 f7       	brne	.-4      	; 0xc54 <MDELAY_void_micro+0x62>
 c58:	00 c0       	rjmp	.+0      	; 0xc5a <MDELAY_void_micro+0x68>
		}else{
			_delay_us(1);
			A_u32_us -= 1;
 c5a:	61 50       	subi	r22, 0x01	; 1
 c5c:	71 09       	sbc	r23, r1
 c5e:	81 09       	sbc	r24, r1
 c60:	91 09       	sbc	r25, r1
		}
	}
}

void MDELAY_void_micro(u32 A_u32_us){
	while(A_u32_us>0){
 c62:	61 15       	cp	r22, r1
 c64:	71 05       	cpc	r23, r1
 c66:	81 05       	cpc	r24, r1
 c68:	91 05       	cpc	r25, r1
 c6a:	21 f6       	brne	.-120    	; 0xbf4 <MDELAY_void_micro+0x2>
		}else{
			_delay_us(1);
			A_u32_us -= 1;
		}
	}
 c6c:	08 95       	ret

00000c6e <MDIO_voidInit>:

void MDIO_voidInit(void){
	#if MDIO_ENABLE_PULL_UP_CIRCUIT == 0
		SET_BIT(SFIOR_REG,PUD_BIT);
	#else
		CLR_BIT(SFIOR_REG,PUD_BIT);
 c6e:	80 b7       	in	r24, 0x30	; 48
 c70:	8b 7f       	andi	r24, 0xFB	; 251
 c72:	80 bf       	out	0x30, r24	; 48
 c74:	08 95       	ret

00000c76 <MDIO_voidSetPinDir>:
	#endif
}


void MDIO_voidSetPinDir(Pin_t A_Pin_tPin, u8 A_u8Dir){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 c76:	98 2f       	mov	r25, r24
 c78:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 c7a:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 c7c:	90 3b       	cpi	r25, 0xB0	; 176
 c7e:	49 f0       	breq	.+18     	; 0xc92 <MDIO_voidSetPinDir+0x1c>
 c80:	18 f4       	brcc	.+6      	; 0xc88 <MDIO_voidSetPinDir+0x12>
 c82:	90 3a       	cpi	r25, 0xA0	; 160
 c84:	a9 f0       	breq	.+42     	; 0xcb0 <MDIO_voidSetPinDir+0x3a>
 c86:	18 c0       	rjmp	.+48     	; 0xcb8 <MDIO_voidSetPinDir+0x42>
 c88:	90 3c       	cpi	r25, 0xC0	; 192
 c8a:	41 f0       	breq	.+16     	; 0xc9c <MDIO_voidSetPinDir+0x26>
 c8c:	90 3d       	cpi	r25, 0xD0	; 208
 c8e:	59 f0       	breq	.+22     	; 0xca6 <MDIO_voidSetPinDir+0x30>
 c90:	13 c0       	rjmp	.+38     	; 0xcb8 <MDIO_voidSetPinDir+0x42>
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
			break;
		case MDIO_PORT_B_NUM:
						L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 c92:	a8 e3       	ldi	r26, 0x38	; 56
 c94:	b0 e0       	ldi	r27, 0x00	; 0
 c96:	e7 e3       	ldi	r30, 0x37	; 55
 c98:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_C_NUM:
						L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 c9c:	a5 e3       	ldi	r26, 0x35	; 53
 c9e:	b0 e0       	ldi	r27, 0x00	; 0
 ca0:	e4 e3       	ldi	r30, 0x34	; 52
 ca2:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 ca4:	09 c0       	rjmp	.+18     	; 0xcb8 <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_D_NUM:
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 ca6:	a2 e3       	ldi	r26, 0x32	; 50
 ca8:	b0 e0       	ldi	r27, 0x00	; 0
 caa:	e1 e3       	ldi	r30, 0x31	; 49
 cac:	f0 e0       	ldi	r31, 0x00	; 0

			break;
 cae:	04 c0       	rjmp	.+8      	; 0xcb8 <MDIO_voidSetPinDir+0x42>
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 cb0:	ab e3       	ldi	r26, 0x3B	; 59
 cb2:	b0 e0       	ldi	r27, 0x00	; 0
 cb4:	ea e3       	ldi	r30, 0x3A	; 58
 cb6:	f0 e0       	ldi	r31, 0x00	; 0
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

			break;
		}
		
		switch(A_u8Dir){
 cb8:	61 30       	cpi	r22, 0x01	; 1
 cba:	91 f0       	breq	.+36     	; 0xce0 <MDIO_voidSetPinDir+0x6a>
 cbc:	18 f0       	brcs	.+6      	; 0xcc4 <MDIO_voidSetPinDir+0x4e>
 cbe:	62 30       	cpi	r22, 0x02	; 2
 cc0:	e1 f0       	breq	.+56     	; 0xcfa <MDIO_voidSetPinDir+0x84>
 cc2:	08 95       	ret
			case INPUT: 
				CLR_BIT(*L_dirReg,L_pinNum) ;
 cc4:	40 81       	ld	r20, Z
 cc6:	21 e0       	ldi	r18, 0x01	; 1
 cc8:	30 e0       	ldi	r19, 0x00	; 0
 cca:	b9 01       	movw	r22, r18
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <MDIO_voidSetPinDir+0x5c>
 cce:	66 0f       	add	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	8a 95       	dec	r24
 cd4:	e2 f7       	brpl	.-8      	; 0xcce <MDIO_voidSetPinDir+0x58>
 cd6:	cb 01       	movw	r24, r22
 cd8:	80 95       	com	r24
 cda:	84 23       	and	r24, r20
 cdc:	80 83       	st	Z, r24
				break;
 cde:	08 95       	ret
			case OUTPUT: 
				SET_BIT(*L_dirReg,L_pinNum) ;
 ce0:	40 81       	ld	r20, Z
 ce2:	21 e0       	ldi	r18, 0x01	; 1
 ce4:	30 e0       	ldi	r19, 0x00	; 0
 ce6:	b9 01       	movw	r22, r18
 ce8:	02 c0       	rjmp	.+4      	; 0xcee <MDIO_voidSetPinDir+0x78>
 cea:	66 0f       	add	r22, r22
 cec:	77 1f       	adc	r23, r23
 cee:	8a 95       	dec	r24
 cf0:	e2 f7       	brpl	.-8      	; 0xcea <MDIO_voidSetPinDir+0x74>
 cf2:	cb 01       	movw	r24, r22
 cf4:	84 2b       	or	r24, r20
 cf6:	80 83       	st	Z, r24
				break;
 cf8:	08 95       	ret
			case INPUT_PULL_UP: 
				CLR_BIT(*L_dirReg,L_pinNum);
 cfa:	40 81       	ld	r20, Z
 cfc:	21 e0       	ldi	r18, 0x01	; 1
 cfe:	30 e0       	ldi	r19, 0x00	; 0
 d00:	b9 01       	movw	r22, r18
 d02:	02 c0       	rjmp	.+4      	; 0xd08 <MDIO_voidSetPinDir+0x92>
 d04:	66 0f       	add	r22, r22
 d06:	77 1f       	adc	r23, r23
 d08:	8a 95       	dec	r24
 d0a:	e2 f7       	brpl	.-8      	; 0xd04 <MDIO_voidSetPinDir+0x8e>
 d0c:	cb 01       	movw	r24, r22
 d0e:	96 2f       	mov	r25, r22
 d10:	90 95       	com	r25
 d12:	94 23       	and	r25, r20
 d14:	90 83       	st	Z, r25
				SET_BIT(*L_valReg,L_pinNum);
 d16:	9c 91       	ld	r25, X
 d18:	89 2b       	or	r24, r25
 d1a:	8c 93       	st	X, r24
 d1c:	08 95       	ret

00000d1e <MDIO_voidSetPinVal>:
				break;
		}
	
}
void MDIO_voidSetPinVal(Pin_t A_Pin_tPin, u8 A_u8Val){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 d1e:	98 2f       	mov	r25, r24
 d20:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 d22:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 d24:	90 3b       	cpi	r25, 0xB0	; 176
 d26:	49 f0       	breq	.+18     	; 0xd3a <MDIO_voidSetPinVal+0x1c>
 d28:	18 f4       	brcc	.+6      	; 0xd30 <MDIO_voidSetPinVal+0x12>
 d2a:	90 3a       	cpi	r25, 0xA0	; 160
 d2c:	79 f0       	breq	.+30     	; 0xd4c <MDIO_voidSetPinVal+0x2e>
 d2e:	10 c0       	rjmp	.+32     	; 0xd50 <MDIO_voidSetPinVal+0x32>
 d30:	90 3c       	cpi	r25, 0xC0	; 192
 d32:	31 f0       	breq	.+12     	; 0xd40 <MDIO_voidSetPinVal+0x22>
 d34:	90 3d       	cpi	r25, 0xD0	; 208
 d36:	39 f0       	breq	.+14     	; 0xd46 <MDIO_voidSetPinVal+0x28>
 d38:	0b c0       	rjmp	.+22     	; 0xd50 <MDIO_voidSetPinVal+0x32>
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
		break;
		case MDIO_PORT_B_NUM:
		L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 d3a:	e8 e3       	ldi	r30, 0x38	; 56
 d3c:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 d3e:	08 c0       	rjmp	.+16     	; 0xd50 <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_C_NUM:
		L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 d40:	e5 e3       	ldi	r30, 0x35	; 53
 d42:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 d44:	05 c0       	rjmp	.+10     	; 0xd50 <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_D_NUM:
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 d46:	e2 e3       	ldi	r30, 0x32	; 50
 d48:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 d4a:	02 c0       	rjmp	.+4      	; 0xd50 <MDIO_voidSetPinVal+0x32>
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 d4c:	eb e3       	ldi	r30, 0x3B	; 59
 d4e:	f0 e0       	ldi	r31, 0x00	; 0
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

		break;
	}
	
	switch(A_u8Val){
 d50:	66 23       	and	r22, r22
 d52:	19 f0       	breq	.+6      	; 0xd5a <MDIO_voidSetPinVal+0x3c>
 d54:	61 30       	cpi	r22, 0x01	; 1
 d56:	79 f0       	breq	.+30     	; 0xd76 <MDIO_voidSetPinVal+0x58>
 d58:	08 95       	ret
		case LOW:
		CLR_BIT(*L_valReg,L_pinNum) ;
 d5a:	40 81       	ld	r20, Z
 d5c:	21 e0       	ldi	r18, 0x01	; 1
 d5e:	30 e0       	ldi	r19, 0x00	; 0
 d60:	b9 01       	movw	r22, r18
 d62:	02 c0       	rjmp	.+4      	; 0xd68 <MDIO_voidSetPinVal+0x4a>
 d64:	66 0f       	add	r22, r22
 d66:	77 1f       	adc	r23, r23
 d68:	8a 95       	dec	r24
 d6a:	e2 f7       	brpl	.-8      	; 0xd64 <MDIO_voidSetPinVal+0x46>
 d6c:	cb 01       	movw	r24, r22
 d6e:	80 95       	com	r24
 d70:	84 23       	and	r24, r20
 d72:	80 83       	st	Z, r24
		break;
 d74:	08 95       	ret
		case HIGH:
		SET_BIT(*L_valReg,L_pinNum) ;
 d76:	40 81       	ld	r20, Z
 d78:	21 e0       	ldi	r18, 0x01	; 1
 d7a:	30 e0       	ldi	r19, 0x00	; 0
 d7c:	b9 01       	movw	r22, r18
 d7e:	02 c0       	rjmp	.+4      	; 0xd84 <MDIO_voidSetPinVal+0x66>
 d80:	66 0f       	add	r22, r22
 d82:	77 1f       	adc	r23, r23
 d84:	8a 95       	dec	r24
 d86:	e2 f7       	brpl	.-8      	; 0xd80 <MDIO_voidSetPinVal+0x62>
 d88:	cb 01       	movw	r24, r22
 d8a:	84 2b       	or	r24, r20
 d8c:	80 83       	st	Z, r24
 d8e:	08 95       	ret

00000d90 <MDIO_u8GetPinVal>:
		
	}
}

u8	 MDIO_u8GetPinVal(Pin_t A_Pin_tPin){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 d90:	98 2f       	mov	r25, r24
 d92:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 d94:	28 2f       	mov	r18, r24
 d96:	2f 70       	andi	r18, 0x0F	; 15
	u8 L_returnVal = 0;
	
	volatile u8  *L_dirReg = NULL,*L_pinReg =NULL;
	
	switch (L_portNum)
 d98:	90 3b       	cpi	r25, 0xB0	; 176
 d9a:	59 f0       	breq	.+22     	; 0xdb2 <MDIO_u8GetPinVal+0x22>
 d9c:	18 f4       	brcc	.+6      	; 0xda4 <MDIO_u8GetPinVal+0x14>
 d9e:	90 3a       	cpi	r25, 0xA0	; 160
 da0:	89 f0       	breq	.+34     	; 0xdc4 <MDIO_u8GetPinVal+0x34>
 da2:	04 c0       	rjmp	.+8      	; 0xdac <MDIO_u8GetPinVal+0x1c>
 da4:	90 3c       	cpi	r25, 0xC0	; 192
 da6:	41 f0       	breq	.+16     	; 0xdb8 <MDIO_u8GetPinVal+0x28>
 da8:	90 3d       	cpi	r25, 0xD0	; 208
 daa:	49 f0       	breq	.+18     	; 0xdbe <MDIO_u8GetPinVal+0x2e>
u8	 MDIO_u8GetPinVal(Pin_t A_Pin_tPin){
	u8 L_portNum = A_Pin_tPin & 0xF0;
	u8 L_pinNum = A_Pin_tPin & 0x0F;
	u8 L_returnVal = 0;
	
	volatile u8  *L_dirReg = NULL,*L_pinReg =NULL;
 dac:	e0 e0       	ldi	r30, 0x00	; 0
 dae:	f0 e0       	ldi	r31, 0x00	; 0
 db0:	0b c0       	rjmp	.+22     	; 0xdc8 <MDIO_u8GetPinVal+0x38>
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_pinReg = &PINA_REG;
		break;
		case MDIO_PORT_B_NUM:
		L_dirReg = &DDRB_REG; L_pinReg = &PINB_REG;
 db2:	e6 e3       	ldi	r30, 0x36	; 54
 db4:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 db6:	08 c0       	rjmp	.+16     	; 0xdc8 <MDIO_u8GetPinVal+0x38>
		case MDIO_PORT_C_NUM:
		L_dirReg = &DDRC_REG; L_pinReg = &PINC_REG;
 db8:	e3 e3       	ldi	r30, 0x33	; 51
 dba:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <MDIO_u8GetPinVal+0x38>
		case MDIO_PORT_D_NUM:
		L_dirReg = &DDRD_REG; L_pinReg = &PIND_REG;
 dbe:	e0 e3       	ldi	r30, 0x30	; 48
 dc0:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <MDIO_u8GetPinVal+0x38>
	volatile u8  *L_dirReg = NULL,*L_pinReg =NULL;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_pinReg = &PINA_REG;
 dc4:	e9 e3       	ldi	r30, 0x39	; 57
 dc6:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}
	

	
	switch(GET_BIT(*L_pinReg,L_pinNum)){
 dc8:	90 81       	ld	r25, Z
 dca:	89 2f       	mov	r24, r25
 dcc:	90 e0       	ldi	r25, 0x00	; 0
 dce:	02 c0       	rjmp	.+4      	; 0xdd4 <MDIO_u8GetPinVal+0x44>
 dd0:	95 95       	asr	r25
 dd2:	87 95       	ror	r24
 dd4:	2a 95       	dec	r18
 dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <MDIO_u8GetPinVal+0x40>
 dd8:	80 fd       	sbrc	r24, 0
 dda:	02 c0       	rjmp	.+4      	; 0xde0 <MDIO_u8GetPinVal+0x50>
}

u8	 MDIO_u8GetPinVal(Pin_t A_Pin_tPin){
	u8 L_portNum = A_Pin_tPin & 0xF0;
	u8 L_pinNum = A_Pin_tPin & 0x0F;
	u8 L_returnVal = 0;
 ddc:	80 e0       	ldi	r24, 0x00	; 0
 dde:	08 95       	ret
	switch(GET_BIT(*L_pinReg,L_pinNum)){
		case 0:
			L_returnVal = LOW;
		break;
		case 1:
			L_returnVal = HIGH;
 de0:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return 	L_returnVal ;
}
 de2:	08 95       	ret

00000de4 <__mulsi3>:
 de4:	db 01       	movw	r26, r22
 de6:	8f 93       	push	r24
 de8:	9f 93       	push	r25
 dea:	0e 94 21 07 	call	0xe42	; 0xe42 <__muluhisi3>
 dee:	bf 91       	pop	r27
 df0:	af 91       	pop	r26
 df2:	a2 9f       	mul	r26, r18
 df4:	80 0d       	add	r24, r0
 df6:	91 1d       	adc	r25, r1
 df8:	a3 9f       	mul	r26, r19
 dfa:	90 0d       	add	r25, r0
 dfc:	b2 9f       	mul	r27, r18
 dfe:	90 0d       	add	r25, r0
 e00:	11 24       	eor	r1, r1
 e02:	08 95       	ret

00000e04 <__divmodsi4>:
 e04:	05 2e       	mov	r0, r21
 e06:	97 fb       	bst	r25, 7
 e08:	1e f4       	brtc	.+6      	; 0xe10 <__divmodsi4+0xc>
 e0a:	00 94       	com	r0
 e0c:	0e 94 19 07 	call	0xe32	; 0xe32 <__negsi2>
 e10:	57 fd       	sbrc	r21, 7
 e12:	07 d0       	rcall	.+14     	; 0xe22 <__divmodsi4_neg2>
 e14:	0e 94 2c 07 	call	0xe58	; 0xe58 <__udivmodsi4>
 e18:	07 fc       	sbrc	r0, 7
 e1a:	03 d0       	rcall	.+6      	; 0xe22 <__divmodsi4_neg2>
 e1c:	4e f4       	brtc	.+18     	; 0xe30 <__divmodsi4_exit>
 e1e:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__negsi2>

00000e22 <__divmodsi4_neg2>:
 e22:	50 95       	com	r21
 e24:	40 95       	com	r20
 e26:	30 95       	com	r19
 e28:	21 95       	neg	r18
 e2a:	3f 4f       	sbci	r19, 0xFF	; 255
 e2c:	4f 4f       	sbci	r20, 0xFF	; 255
 e2e:	5f 4f       	sbci	r21, 0xFF	; 255

00000e30 <__divmodsi4_exit>:
 e30:	08 95       	ret

00000e32 <__negsi2>:
 e32:	90 95       	com	r25
 e34:	80 95       	com	r24
 e36:	70 95       	com	r23
 e38:	61 95       	neg	r22
 e3a:	7f 4f       	sbci	r23, 0xFF	; 255
 e3c:	8f 4f       	sbci	r24, 0xFF	; 255
 e3e:	9f 4f       	sbci	r25, 0xFF	; 255
 e40:	08 95       	ret

00000e42 <__muluhisi3>:
 e42:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__umulhisi3>
 e46:	a5 9f       	mul	r26, r21
 e48:	90 0d       	add	r25, r0
 e4a:	b4 9f       	mul	r27, r20
 e4c:	90 0d       	add	r25, r0
 e4e:	a4 9f       	mul	r26, r20
 e50:	80 0d       	add	r24, r0
 e52:	91 1d       	adc	r25, r1
 e54:	11 24       	eor	r1, r1
 e56:	08 95       	ret

00000e58 <__udivmodsi4>:
 e58:	a1 e2       	ldi	r26, 0x21	; 33
 e5a:	1a 2e       	mov	r1, r26
 e5c:	aa 1b       	sub	r26, r26
 e5e:	bb 1b       	sub	r27, r27
 e60:	fd 01       	movw	r30, r26
 e62:	0d c0       	rjmp	.+26     	; 0xe7e <__udivmodsi4_ep>

00000e64 <__udivmodsi4_loop>:
 e64:	aa 1f       	adc	r26, r26
 e66:	bb 1f       	adc	r27, r27
 e68:	ee 1f       	adc	r30, r30
 e6a:	ff 1f       	adc	r31, r31
 e6c:	a2 17       	cp	r26, r18
 e6e:	b3 07       	cpc	r27, r19
 e70:	e4 07       	cpc	r30, r20
 e72:	f5 07       	cpc	r31, r21
 e74:	20 f0       	brcs	.+8      	; 0xe7e <__udivmodsi4_ep>
 e76:	a2 1b       	sub	r26, r18
 e78:	b3 0b       	sbc	r27, r19
 e7a:	e4 0b       	sbc	r30, r20
 e7c:	f5 0b       	sbc	r31, r21

00000e7e <__udivmodsi4_ep>:
 e7e:	66 1f       	adc	r22, r22
 e80:	77 1f       	adc	r23, r23
 e82:	88 1f       	adc	r24, r24
 e84:	99 1f       	adc	r25, r25
 e86:	1a 94       	dec	r1
 e88:	69 f7       	brne	.-38     	; 0xe64 <__udivmodsi4_loop>
 e8a:	60 95       	com	r22
 e8c:	70 95       	com	r23
 e8e:	80 95       	com	r24
 e90:	90 95       	com	r25
 e92:	9b 01       	movw	r18, r22
 e94:	ac 01       	movw	r20, r24
 e96:	bd 01       	movw	r22, r26
 e98:	cf 01       	movw	r24, r30
 e9a:	08 95       	ret

00000e9c <__umulhisi3>:
 e9c:	a2 9f       	mul	r26, r18
 e9e:	b0 01       	movw	r22, r0
 ea0:	b3 9f       	mul	r27, r19
 ea2:	c0 01       	movw	r24, r0
 ea4:	a3 9f       	mul	r26, r19
 ea6:	70 0d       	add	r23, r0
 ea8:	81 1d       	adc	r24, r1
 eaa:	11 24       	eor	r1, r1
 eac:	91 1d       	adc	r25, r1
 eae:	b2 9f       	mul	r27, r18
 eb0:	70 0d       	add	r23, r0
 eb2:	81 1d       	adc	r24, r1
 eb4:	11 24       	eor	r1, r1
 eb6:	91 1d       	adc	r25, r1
 eb8:	08 95       	ret

00000eba <_exit>:
 eba:	f8 94       	cli

00000ebc <__stop_program>:
 ebc:	ff cf       	rjmp	.-2      	; 0xebc <__stop_program>
