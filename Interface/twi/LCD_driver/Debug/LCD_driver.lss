
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000060e  000006a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800070  00800070  000006b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b9b  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca3  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000108e  00000000  00000000  000031ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  0000427c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010cb  00000000  00000000  00004904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011bd  00000000  00000000  000059cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00006b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_1>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_2>
   c:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 05 03 	jmp	0x60a	; 0x60a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	MUART_voidSendData(d);
}

int main(void)
{
	MGI_void_Enable();
  92:	0e 94 62 01 	call	0x2c4	; 0x2c4 <MGI_void_Enable>
	MDIO_voidInit();
  96:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <MDIO_voidInit>
	
	MTWI_void_initMaster();
  9a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <MTWI_void_initMaster>

	while(1){
		MTWI_u8_sendStartCondition();
  9e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <MTWI_u8_sendStartCondition>
		MTWI_u8_sendSlaveAddress(0x04,MTWI_WRITE);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	0e 94 89 02 	call	0x512	; 0x512 <MTWI_u8_sendSlaveAddress>
		MTWI_u8_sendData(0x12);
  aa:	82 e1       	ldi	r24, 0x12	; 18
  ac:	0e 94 9b 02 	call	0x536	; 0x536 <MTWI_u8_sendData>
		MTWI_u8_sendData(0x13);
  b0:	83 e1       	ldi	r24, 0x13	; 19
  b2:	0e 94 9b 02 	call	0x536	; 0x536 <MTWI_u8_sendData>
		MTWI_u8_sendStopCondition();
  b6:	0e 94 a5 02 	call	0x54a	; 0x54a <MTWI_u8_sendStopCondition>
		MDELAY_void_milli(1000);
  ba:	68 ee       	ldi	r22, 0xE8	; 232
  bc:	73 e0       	ldi	r23, 0x03	; 3
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 9a 00 	call	0x134	; 0x134 <MDELAY_void_milli>
  c6:	eb cf       	rjmp	.-42     	; 0x9e <main+0xc>

000000c8 <__vector_16>:
void MADC_voidSetCallback( void (*A_ptr2voidFunU32)(u32) ){
	G_ptr2voidFunU32 = A_ptr2voidFunU32;
}

void __vector_16 (void) __attribute__ ((signal,used, externally_visible));
void __vector_16 (void){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	if(G_ptr2voidFunU32 != NULL){
  ea:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
  ee:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
  f2:	30 97       	sbiw	r30, 0x00	; 0
  f4:	71 f0       	breq	.+28     	; 0x112 <__vector_16+0x4a>
		u32 returnVal = 0;

		//read
		#if MADC_ADJUST==0
			returnVal = ((int)(ADCL_REG) + ((int)ADCH_REG<<8));
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	65 b1       	in	r22, 0x05	; 5
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	76 2f       	mov	r23, r22
  fe:	66 27       	eor	r22, r22
 100:	68 0f       	add	r22, r24
 102:	71 1d       	adc	r23, r1
 104:	07 2e       	mov	r0, r23
 106:	00 0c       	add	r0, r0
 108:	88 0b       	sbc	r24, r24
 10a:	99 0b       	sbc	r25, r25
			returnVal = (int)ADCL_REG>>6 + (int)ADCH_REG<<2;
		#else
			#error "ADC ERROR, adjust undefined"
		#endif
		
		if(G_ptr2voidFunU32 != NULL){
 10c:	30 97       	sbiw	r30, 0x00	; 0
 10e:	09 f0       	breq	.+2      	; 0x112 <__vector_16+0x4a>
			G_ptr2voidFunU32(returnVal);
 110:	09 95       	icall
		}
	}
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	7f 91       	pop	r23
 120:	6f 91       	pop	r22
 122:	5f 91       	pop	r21
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <MDELAY_void_milli>:
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 134:	41 c0       	rjmp	.+130    	; 0x1b8 <MDELAY_void_milli+0x84>
		if(A_u32_ms >= 1000){
 136:	68 3e       	cpi	r22, 0xE8	; 232
 138:	23 e0       	ldi	r18, 0x03	; 3
 13a:	72 07       	cpc	r23, r18
 13c:	81 05       	cpc	r24, r1
 13e:	91 05       	cpc	r25, r1
 140:	70 f0       	brcs	.+28     	; 0x15e <MDELAY_void_milli+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	3f ef       	ldi	r19, 0xFF	; 255
 144:	49 e6       	ldi	r20, 0x69	; 105
 146:	e8 e1       	ldi	r30, 0x18	; 24
 148:	31 50       	subi	r19, 0x01	; 1
 14a:	40 40       	sbci	r20, 0x00	; 0
 14c:	e0 40       	sbci	r30, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <MDELAY_void_milli+0x14>
 150:	00 c0       	rjmp	.+0      	; 0x152 <MDELAY_void_milli+0x1e>
 152:	00 00       	nop
			_delay_ms(1000);
			A_u32_ms -= 1000;
 154:	68 5e       	subi	r22, 0xE8	; 232
 156:	73 40       	sbci	r23, 0x03	; 3
 158:	81 09       	sbc	r24, r1
 15a:	91 09       	sbc	r25, r1
 15c:	2d c0       	rjmp	.+90     	; 0x1b8 <MDELAY_void_milli+0x84>
		}
		else if(A_u32_ms >= 100){
 15e:	64 36       	cpi	r22, 0x64	; 100
 160:	71 05       	cpc	r23, r1
 162:	81 05       	cpc	r24, r1
 164:	91 05       	cpc	r25, r1
 166:	70 f0       	brcs	.+28     	; 0x184 <MDELAY_void_milli+0x50>
 168:	ff ef       	ldi	r31, 0xFF	; 255
 16a:	20 e7       	ldi	r18, 0x70	; 112
 16c:	32 e0       	ldi	r19, 0x02	; 2
 16e:	f1 50       	subi	r31, 0x01	; 1
 170:	20 40       	sbci	r18, 0x00	; 0
 172:	30 40       	sbci	r19, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <MDELAY_void_milli+0x3a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <MDELAY_void_milli+0x44>
 178:	00 00       	nop
			_delay_ms(100);
			A_u32_ms -= 100;
 17a:	64 56       	subi	r22, 0x64	; 100
 17c:	71 09       	sbc	r23, r1
 17e:	81 09       	sbc	r24, r1
 180:	91 09       	sbc	r25, r1
 182:	1a c0       	rjmp	.+52     	; 0x1b8 <MDELAY_void_milli+0x84>
		}else if(A_u32_ms >= 10){
 184:	6a 30       	cpi	r22, 0x0A	; 10
 186:	71 05       	cpc	r23, r1
 188:	81 05       	cpc	r24, r1
 18a:	91 05       	cpc	r25, r1
 18c:	58 f0       	brcs	.+22     	; 0x1a4 <MDELAY_void_milli+0x70>
 18e:	ef e1       	ldi	r30, 0x1F	; 31
 190:	fe e4       	ldi	r31, 0x4E	; 78
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <MDELAY_void_milli+0x5e>
 196:	00 c0       	rjmp	.+0      	; 0x198 <MDELAY_void_milli+0x64>
 198:	00 00       	nop
			_delay_ms(10);
			A_u32_ms -= 10;
 19a:	6a 50       	subi	r22, 0x0A	; 10
 19c:	71 09       	sbc	r23, r1
 19e:	81 09       	sbc	r24, r1
 1a0:	91 09       	sbc	r25, r1
 1a2:	0a c0       	rjmp	.+20     	; 0x1b8 <MDELAY_void_milli+0x84>
 1a4:	ef ec       	ldi	r30, 0xCF	; 207
 1a6:	f7 e0       	ldi	r31, 0x07	; 7
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <MDELAY_void_milli+0x74>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <MDELAY_void_milli+0x7a>
 1ae:	00 00       	nop
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
 1b0:	61 50       	subi	r22, 0x01	; 1
 1b2:	71 09       	sbc	r23, r1
 1b4:	81 09       	sbc	r24, r1
 1b6:	91 09       	sbc	r25, r1
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 1b8:	61 15       	cp	r22, r1
 1ba:	71 05       	cpc	r23, r1
 1bc:	81 05       	cpc	r24, r1
 1be:	91 05       	cpc	r25, r1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <MDELAY_void_milli+0x90>
 1c2:	b9 cf       	rjmp	.-142    	; 0x136 <MDELAY_void_milli+0x2>
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
		}
	}
}
 1c4:	08 95       	ret

000001c6 <MDIO_voidInit>:

void MDIO_voidInit(void){
	#if MDIO_ENABLE_PULL_UP_CIRCUIT == 0
		SET_BIT(SFIOR_REG,PUD_BIT);
	#else
		CLR_BIT(SFIOR_REG,PUD_BIT);
 1c6:	80 b7       	in	r24, 0x30	; 48
 1c8:	8b 7f       	andi	r24, 0xFB	; 251
 1ca:	80 bf       	out	0x30, r24	; 48
 1cc:	08 95       	ret

000001ce <__vector_1>:




void __vector_1 (void) __attribute__ ((signal,used, externally_visible));
void __vector_1 (void){
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_0_callBack != NULL){
 1f0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <G_ptr2voidCallback_INT_0_callBack>
 1f4:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <G_ptr2voidCallback_INT_0_callBack+0x1>
 1f8:	30 97       	sbiw	r30, 0x00	; 0
 1fa:	09 f0       	breq	.+2      	; 0x1fe <__vector_1+0x30>
		G_ptr2voidCallback_INT_0_callBack();
 1fc:	09 95       	icall
	}
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_2>:


void __vector_2 (void) __attribute__ ((signal,used, externally_visible));
void __vector_2 (void){
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_1_callBack != NULL){
 242:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <G_ptr2voidCallback_INT_1_callBack>
 246:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <G_ptr2voidCallback_INT_1_callBack+0x1>
 24a:	30 97       	sbiw	r30, 0x00	; 0
 24c:	09 f0       	breq	.+2      	; 0x250 <__vector_2+0x30>
		G_ptr2voidCallback_INT_1_callBack();
 24e:	09 95       	icall
	}
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_3>:


void __vector_3 (void) __attribute__ ((signal,used, externally_visible));
void __vector_3 (void){
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_2_callBack != NULL){
 294:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <G_ptr2voidCallback_INT_2_callBack>
 298:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <G_ptr2voidCallback_INT_2_callBack+0x1>
 29c:	30 97       	sbiw	r30, 0x00	; 0
 29e:	09 f0       	breq	.+2      	; 0x2a2 <__vector_3+0x30>
		G_ptr2voidCallback_INT_2_callBack();
 2a0:	09 95       	icall
	}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <MGI_void_Enable>:
#include "GI_config.h"
#include "GI_interface.h"
#include "GI_private.h"

void MGI_void_Enable(void){
	SET_BIT(SREG_REG,SREG_I_BIT);	
 2c4:	8f b7       	in	r24, 0x3f	; 63
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	8f bf       	out	0x3f, r24	; 63
 2ca:	08 95       	ret

000002cc <__vector_6>:



//Timer/Counter1 Capture Event
void __vector_6 (void) __attribute__ ((signal,used, externally_visible));
void __vector_6 (void){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 92       	push	r2
 2d8:	3f 92       	push	r3
 2da:	4f 92       	push	r4
 2dc:	5f 92       	push	r5
 2de:	6f 92       	push	r6
 2e0:	7f 92       	push	r7
 2e2:	8f 92       	push	r8
 2e4:	9f 92       	push	r9
 2e6:	af 92       	push	r10
 2e8:	bf 92       	push	r11
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	static u8 L_u8Flag  = 0;
	
	switch(L_u8Flag){			
 312:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <L_u8Flag.1660>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	b1 f0       	breq	.+44     	; 0x346 <__vector_6+0x7a>
 31a:	20 f0       	brcs	.+8      	; 0x324 <__vector_6+0x58>
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	09 f4       	brne	.+2      	; 0x322 <__vector_6+0x56>
 320:	55 c0       	rjmp	.+170    	; 0x3cc <__vector_6+0x100>
 322:	96 c0       	rjmp	.+300    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		case 0:
			L_u8Flag = 1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <L_u8Flag.1660>
			TCNT1_REG = (u16)0;			//clear timer
 32a:	1d bc       	out	0x2d, r1	; 45
 32c:	1c bc       	out	0x2c, r1	; 44
			CLR_BIT(TCCR1B_REG,ICES1);	//edge select: wait FALLING
 32e:	8e b5       	in	r24, 0x2e	; 46
 330:	8f 7b       	andi	r24, 0xBF	; 191
 332:	8e bd       	out	0x2e, r24	; 46
			G_u32OverflowsCount = 0;
 334:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <G_u32OverflowsCount>
 338:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <G_u32OverflowsCount+0x1>
 33c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <G_u32OverflowsCount+0x2>
 340:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <G_u32OverflowsCount+0x3>
			break;	
 344:	85 c0       	rjmp	.+266    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			
		case 1:
			L_u8Flag = 2;
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <L_u8Flag.1660>
			G_u64TicksHigh = (u64)(TCNT1_REG)  + G_u32OverflowsCount * 0XFFFF;	// read high ticks
 34c:	2c b4       	in	r2, 0x2c	; 44
 34e:	3d b4       	in	r3, 0x2d	; 45
 350:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <G_u32OverflowsCount>
 354:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <G_u32OverflowsCount+0x1>
 358:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <G_u32OverflowsCount+0x2>
 35c:	50 91 7c 00 	lds	r21, 0x007C	; 0x80007c <G_u32OverflowsCount+0x3>
 360:	af ef       	ldi	r26, 0xFF	; 255
 362:	bf ef       	ldi	r27, 0xFF	; 255
 364:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__muluhisi3>
 368:	dc 01       	movw	r26, r24
 36a:	cb 01       	movw	r24, r22
 36c:	28 2f       	mov	r18, r24
 36e:	39 2f       	mov	r19, r25
 370:	4a 2f       	mov	r20, r26
 372:	5b 2f       	mov	r21, r27
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	a2 2c       	mov	r10, r2
 37e:	b3 2c       	mov	r11, r3
 380:	c1 2c       	mov	r12, r1
 382:	d1 2c       	mov	r13, r1
 384:	e1 2c       	mov	r14, r1
 386:	f1 2c       	mov	r15, r1
 388:	00 e0       	ldi	r16, 0x00	; 0
 38a:	10 e0       	ldi	r17, 0x00	; 0
 38c:	0e 94 ed 02 	call	0x5da	; 0x5da <__adddi3>
 390:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <G_u64TicksHigh>
 394:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <G_u64TicksHigh+0x1>
 398:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <G_u64TicksHigh+0x2>
 39c:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <G_u64TicksHigh+0x3>
 3a0:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <G_u64TicksHigh+0x4>
 3a4:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <G_u64TicksHigh+0x5>
 3a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <G_u64TicksHigh+0x6>
 3ac:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <G_u64TicksHigh+0x7>
			TCNT1_REG = (u16)0;					//clear timer
 3b0:	1d bc       	out	0x2d, r1	; 45
 3b2:	1c bc       	out	0x2c, r1	; 44
			G_u32OverflowsCount = 0;
 3b4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <G_u32OverflowsCount>
 3b8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <G_u32OverflowsCount+0x1>
 3bc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <G_u32OverflowsCount+0x2>
 3c0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <G_u32OverflowsCount+0x3>
			SET_BIT(TCCR1B_REG,ICES1);			//edge select: wait RISING
 3c4:	8e b5       	in	r24, 0x2e	; 46
 3c6:	80 64       	ori	r24, 0x40	; 64
 3c8:	8e bd       	out	0x2e, r24	; 46
			break;	
 3ca:	42 c0       	rjmp	.+132    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			
		case 2:
		
			L_u8Flag = 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <L_u8Flag.1660>
			G_u64TicksLow = (u64)(TCNT1_REG)  + G_u32OverflowsCount * 0XFFFF; // read low ticks
 3d2:	2c b4       	in	r2, 0x2c	; 44
 3d4:	3d b4       	in	r3, 0x2d	; 45
 3d6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <G_u32OverflowsCount>
 3da:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <G_u32OverflowsCount+0x1>
 3de:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <G_u32OverflowsCount+0x2>
 3e2:	50 91 7c 00 	lds	r21, 0x007C	; 0x80007c <G_u32OverflowsCount+0x3>
 3e6:	af ef       	ldi	r26, 0xFF	; 255
 3e8:	bf ef       	ldi	r27, 0xFF	; 255
 3ea:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__muluhisi3>
 3ee:	dc 01       	movw	r26, r24
 3f0:	cb 01       	movw	r24, r22
 3f2:	28 2f       	mov	r18, r24
 3f4:	39 2f       	mov	r19, r25
 3f6:	4a 2f       	mov	r20, r26
 3f8:	5b 2f       	mov	r21, r27
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	a2 2c       	mov	r10, r2
 404:	b3 2c       	mov	r11, r3
 406:	c1 2c       	mov	r12, r1
 408:	d1 2c       	mov	r13, r1
 40a:	e1 2c       	mov	r14, r1
 40c:	f1 2c       	mov	r15, r1
 40e:	00 e0       	ldi	r16, 0x00	; 0
 410:	10 e0       	ldi	r17, 0x00	; 0
 412:	0e 94 ed 02 	call	0x5da	; 0x5da <__adddi3>
 416:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
 41a:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 41e:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 422:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 426:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 42a:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 42e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 432:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
			TCNT1_REG = (u16)0;					//clear timer
 436:	1d bc       	out	0x2d, r1	; 45
 438:	1c bc       	out	0x2c, r1	; 44
			G_u32OverflowsCount = 0;
 43a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <G_u32OverflowsCount>
 43e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <G_u32OverflowsCount+0x1>
 442:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <G_u32OverflowsCount+0x2>
 446:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <G_u32OverflowsCount+0x3>
			CLR_BIT(TCCR1B_REG,ICES1);	//edge select: wait falling
 44a:	8e b5       	in	r24, 0x2e	; 46
 44c:	8f 7b       	andi	r24, 0xBF	; 191
 44e:	8e bd       	out	0x2e, r24	; 46
			break;						
	} 
}
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	ff 90       	pop	r15
 472:	ef 90       	pop	r14
 474:	df 90       	pop	r13
 476:	cf 90       	pop	r12
 478:	bf 90       	pop	r11
 47a:	af 90       	pop	r10
 47c:	9f 90       	pop	r9
 47e:	8f 90       	pop	r8
 480:	7f 90       	pop	r7
 482:	6f 90       	pop	r6
 484:	5f 90       	pop	r5
 486:	4f 90       	pop	r4
 488:	3f 90       	pop	r3
 48a:	2f 90       	pop	r2
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_9>:

void __vector_9 (void)__attribute__((signal))__attribute__((interrupt));
void __vector_9 (void)
	{
 496:	78 94       	sei
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
		G_u32OverflowsCount++;
 4aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <G_u32OverflowsCount>
 4ae:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <G_u32OverflowsCount+0x1>
 4b2:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <G_u32OverflowsCount+0x2>
 4b6:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <G_u32OverflowsCount+0x3>
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	a1 1d       	adc	r26, r1
 4be:	b1 1d       	adc	r27, r1
 4c0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <G_u32OverflowsCount>
 4c4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <G_u32OverflowsCount+0x1>
 4c8:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <G_u32OverflowsCount+0x2>
 4cc:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <G_u32OverflowsCount+0x3>
	}
 4d0:	bf 91       	pop	r27
 4d2:	af 91       	pop	r26
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <MTWI_void_initMaster>:
		
	L_u8Status = (((u8)TWSR_REG) >> 3)<<3;
		*A_u8_copyData = (u8)TWDR_REG;
		
		return L_u8Status;
}
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	80 b9       	out	0x00, r24	; 0
 4e6:	81 b1       	in	r24, 0x01	; 1
 4e8:	8e 7f       	andi	r24, 0xFE	; 254
 4ea:	81 b9       	out	0x01, r24	; 1
 4ec:	81 b1       	in	r24, 0x01	; 1
 4ee:	8d 7f       	andi	r24, 0xFD	; 253
 4f0:	81 b9       	out	0x01, r24	; 1
 4f2:	86 b7       	in	r24, 0x36	; 54
 4f4:	84 60       	ori	r24, 0x04	; 4
 4f6:	86 bf       	out	0x36, r24	; 54
 4f8:	08 95       	ret

000004fa <MTWI_u8_sendStartCondition>:
 4fa:	86 b7       	in	r24, 0x36	; 54
 4fc:	80 62       	ori	r24, 0x20	; 32
 4fe:	86 bf       	out	0x36, r24	; 54
 500:	86 b7       	in	r24, 0x36	; 54
 502:	80 68       	ori	r24, 0x80	; 128
 504:	86 bf       	out	0x36, r24	; 54
 506:	06 b6       	in	r0, 0x36	; 54
 508:	07 fe       	sbrs	r0, 7
 50a:	fd cf       	rjmp	.-6      	; 0x506 <MTWI_u8_sendStartCondition+0xc>
 50c:	81 b1       	in	r24, 0x01	; 1
 50e:	88 7f       	andi	r24, 0xF8	; 248
 510:	08 95       	ret

00000512 <MTWI_u8_sendSlaveAddress>:
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	61 70       	andi	r22, 0x01	; 1
 51a:	86 2b       	or	r24, r22
 51c:	83 b9       	out	0x03, r24	; 3
 51e:	86 b7       	in	r24, 0x36	; 54
 520:	8f 7d       	andi	r24, 0xDF	; 223
 522:	86 bf       	out	0x36, r24	; 54
 524:	86 b7       	in	r24, 0x36	; 54
 526:	80 68       	ori	r24, 0x80	; 128
 528:	86 bf       	out	0x36, r24	; 54
 52a:	06 b6       	in	r0, 0x36	; 54
 52c:	07 fe       	sbrs	r0, 7
 52e:	fd cf       	rjmp	.-6      	; 0x52a <MTWI_u8_sendSlaveAddress+0x18>
 530:	81 b1       	in	r24, 0x01	; 1
 532:	88 7f       	andi	r24, 0xF8	; 248
 534:	08 95       	ret

00000536 <MTWI_u8_sendData>:
 536:	83 b9       	out	0x03, r24	; 3
 538:	86 b7       	in	r24, 0x36	; 54
 53a:	80 68       	ori	r24, 0x80	; 128
 53c:	86 bf       	out	0x36, r24	; 54
 53e:	06 b6       	in	r0, 0x36	; 54
 540:	07 fe       	sbrs	r0, 7
 542:	fd cf       	rjmp	.-6      	; 0x53e <MTWI_u8_sendData+0x8>
 544:	81 b1       	in	r24, 0x01	; 1
 546:	88 7f       	andi	r24, 0xF8	; 248
 548:	08 95       	ret

0000054a <MTWI_u8_sendStopCondition>:
u8 MTWI_u8_sendStopCondition(void){
	u8 L_u8Status = 0x00;
	
	//TWI STOP Condition Bit
	SET_BIT(TWCR_REG,4);
 54a:	86 b7       	in	r24, 0x36	; 54
 54c:	80 61       	ori	r24, 0x10	; 16
 54e:	86 bf       	out	0x36, r24	; 54
	
	//Clear FLAG
	SET_BIT(TWCR_REG,7);
 550:	86 b7       	in	r24, 0x36	; 54
 552:	80 68       	ori	r24, 0x80	; 128
 554:	86 bf       	out	0x36, r24	; 54
	
	//Wait
	while(GET_BIT(TWCR_REG,4) == 1);
 556:	06 b6       	in	r0, 0x36	; 54
 558:	04 fc       	sbrc	r0, 4
 55a:	fd cf       	rjmp	.-6      	; 0x556 <MTWI_u8_sendStopCondition+0xc>
	
	//get status
	L_u8Status = (((u8)TWSR_REG) >> 3)<<3;
 55c:	81 b1       	in	r24, 0x01	; 1
	
	return L_u8Status;
}
 55e:	88 7f       	andi	r24, 0xF8	; 248
 560:	08 95       	ret

00000562 <__vector_13>:
	void MUART_voidSetRXCallback(ptr2voidU32Callback A_ptrCallback){
		G_ptrCallback = A_ptrCallback;
	}
	
	void __vector_13(void)__attribute__((signal));
	void __vector_13(void){
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
		if(G_ptrCallback != NULL){
 584:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <G_ptrCallback>
 588:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <G_ptrCallback+0x1>
 58c:	89 2b       	or	r24, r25
 58e:	49 f0       	breq	.+18     	; 0x5a2 <__vector_13+0x40>
			
			//write ninth bit then write the low 8 bits
			#if MUART_CHAR_SIZE_SELECT==MUART_CHAR_SIZE_9_BITS
			L_u32Data = GET_BIT(UCSRB_REG,1) << 8;
			#endif
			L_u32Data = L_u32Data | UDR_REG;
 590:	6c b1       	in	r22, 0x0c	; 12
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
			
			G_ptrCallback(L_u32Data);
 598:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <G_ptrCallback>
 59c:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <G_ptrCallback+0x1>
 5a0:	09 95       	icall
		}
	}
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <__muluhisi3>:
 5c4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__umulhisi3>
 5c8:	a5 9f       	mul	r26, r21
 5ca:	90 0d       	add	r25, r0
 5cc:	b4 9f       	mul	r27, r20
 5ce:	90 0d       	add	r25, r0
 5d0:	a4 9f       	mul	r26, r20
 5d2:	80 0d       	add	r24, r0
 5d4:	91 1d       	adc	r25, r1
 5d6:	11 24       	eor	r1, r1
 5d8:	08 95       	ret

000005da <__adddi3>:
 5da:	2a 0d       	add	r18, r10
 5dc:	3b 1d       	adc	r19, r11
 5de:	4c 1d       	adc	r20, r12
 5e0:	5d 1d       	adc	r21, r13
 5e2:	6e 1d       	adc	r22, r14
 5e4:	7f 1d       	adc	r23, r15
 5e6:	80 1f       	adc	r24, r16
 5e8:	91 1f       	adc	r25, r17
 5ea:	08 95       	ret

000005ec <__umulhisi3>:
 5ec:	a2 9f       	mul	r26, r18
 5ee:	b0 01       	movw	r22, r0
 5f0:	b3 9f       	mul	r27, r19
 5f2:	c0 01       	movw	r24, r0
 5f4:	a3 9f       	mul	r26, r19
 5f6:	70 0d       	add	r23, r0
 5f8:	81 1d       	adc	r24, r1
 5fa:	11 24       	eor	r1, r1
 5fc:	91 1d       	adc	r25, r1
 5fe:	b2 9f       	mul	r27, r18
 600:	70 0d       	add	r23, r0
 602:	81 1d       	adc	r24, r1
 604:	11 24       	eor	r1, r1
 606:	91 1d       	adc	r25, r1
 608:	08 95       	ret

0000060a <_exit>:
 60a:	f8 94       	cli

0000060c <__stop_program>:
 60c:	ff cf       	rjmp	.-2      	; 0x60c <__stop_program>
