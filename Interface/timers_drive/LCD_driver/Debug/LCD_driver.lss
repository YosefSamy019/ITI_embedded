
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00000530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001772  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b47  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c48  00000000  00000000  00002a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  000036b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ed8  00000000  00000000  00003bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c30  00000000  00000000  00004aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000056d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_1>
   8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_2>
   c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_10>
  2c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HLED_HLed_t_Create>:
void HLED_void_TurnOff(HLed_t *A_Pin_t_pin){
	switch(A_Pin_t_pin->polarity){
		case HLED_ActiveHigh:
		MDIO_voidSetPinVal(A_Pin_t_pin->pin,LOW); break;
		case HLED_ActiveLow:
		MDIO_voidSetPinVal(A_Pin_t_pin->pin,HIGH); break;
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	d6 2f       	mov	r29, r22
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	0e 94 ac 00 	call	0x158	; 0x158 <MDIO_voidSetPinDir>
  a0:	8c 2f       	mov	r24, r28
  a2:	9d 2f       	mov	r25, r29
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <HLED_void_TurnToggle>:
	}
}
	
void HLED_void_TurnToggle(HLed_t *A_Pin_t_pin){
			MDIO_voidTogPinVal(A_Pin_t_pin->pin);
  aa:	fc 01       	movw	r30, r24
  ac:	80 81       	ld	r24, Z
  ae:	0e 94 00 01 	call	0x200	; 0x200 <MDIO_voidTogPinVal>
  b2:	08 95       	ret

000000b4 <v>:
#include "HAL/KEYPAD/KEYPAD_interface.h"

HLed_t l ;

void v(){
	HLED_void_TurnToggle(&l);
  b4:	82 e7       	ldi	r24, 0x72	; 114
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 55 00 	call	0xaa	; 0xaa <HLED_void_TurnToggle>
  bc:	08 95       	ret

000000be <main>:
}

int main(void)
{
	MGI_void_Enable();
  be:	0e 94 a2 01 	call	0x344	; 0x344 <MGI_void_Enable>
		
	MDIO_voidInit();
  c2:	0e 94 a8 00 	call	0x150	; 0x150 <MDIO_voidInit>
	
	MTIMER_0_voidInit();
  c6:	0e 94 a6 01 	call	0x34c	; 0x34c <MTIMER_0_voidInit>
	MTimer_0_voidSetCallback(v);
  ca:	8a e5       	ldi	r24, 0x5A	; 90
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 b9 01 	call	0x372	; 0x372 <MTimer_0_voidSetCallback>
	
	l = HLED_HLed_t_Create(PinC0,HLED_ActiveLow);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	80 ec       	ldi	r24, 0xC0	; 192
  d6:	0e 94 49 00 	call	0x92	; 0x92 <HLED_HLed_t_Create>
  da:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <l+0x1>
  de:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <l>
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x24>

000000e4 <__vector_16>:
void MADC_voidSetCallback( void (*A_ptr2voidFunU32)(u32) ){
	G_ptr2voidFunU32 = A_ptr2voidFunU32;
}

void __vector_16 (void) __attribute__ ((signal,used, externally_visible));
void __vector_16 (void){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	if(G_ptr2voidFunU32 != NULL){
 106:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10e:	30 97       	sbiw	r30, 0x00	; 0
 110:	71 f0       	breq	.+28     	; 0x12e <__vector_16+0x4a>
		u32 returnVal = 0;

		//read
		#if MADC_ADJUST==0
			returnVal = ((int)(ADCL_REG) + ((int)ADCH_REG<<8));
 112:	84 b1       	in	r24, 0x04	; 4
 114:	65 b1       	in	r22, 0x05	; 5
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	76 2f       	mov	r23, r22
 11a:	66 27       	eor	r22, r22
 11c:	68 0f       	add	r22, r24
 11e:	71 1d       	adc	r23, r1
 120:	07 2e       	mov	r0, r23
 122:	00 0c       	add	r0, r0
 124:	88 0b       	sbc	r24, r24
 126:	99 0b       	sbc	r25, r25
			returnVal = (int)ADCL_REG>>6 + (int)ADCH_REG<<2;
		#else
			#error "ADC ERROR, adjust undefined"
		#endif
		
		if(G_ptr2voidFunU32 != NULL){
 128:	30 97       	sbiw	r30, 0x00	; 0
 12a:	09 f0       	breq	.+2      	; 0x12e <__vector_16+0x4a>
			G_ptr2voidFunU32(returnVal);
 12c:	09 95       	icall
		}
	}
}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	7f 91       	pop	r23
 13c:	6f 91       	pop	r22
 13e:	5f 91       	pop	r21
 140:	4f 91       	pop	r20
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <MDIO_voidInit>:
		break;
		
	}
	
	return 	L_returnVal ;
}
 150:	80 b7       	in	r24, 0x30	; 48
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	80 bf       	out	0x30, r24	; 48
 156:	08 95       	ret

00000158 <MDIO_voidSetPinDir>:
 158:	98 2f       	mov	r25, r24
 15a:	90 7f       	andi	r25, 0xF0	; 240
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	90 3b       	cpi	r25, 0xB0	; 176
 160:	49 f0       	breq	.+18     	; 0x174 <MDIO_voidSetPinDir+0x1c>
 162:	18 f4       	brcc	.+6      	; 0x16a <MDIO_voidSetPinDir+0x12>
 164:	90 3a       	cpi	r25, 0xA0	; 160
 166:	a9 f0       	breq	.+42     	; 0x192 <MDIO_voidSetPinDir+0x3a>
 168:	18 c0       	rjmp	.+48     	; 0x19a <MDIO_voidSetPinDir+0x42>
 16a:	90 3c       	cpi	r25, 0xC0	; 192
 16c:	41 f0       	breq	.+16     	; 0x17e <MDIO_voidSetPinDir+0x26>
 16e:	90 3d       	cpi	r25, 0xD0	; 208
 170:	59 f0       	breq	.+22     	; 0x188 <MDIO_voidSetPinDir+0x30>
 172:	13 c0       	rjmp	.+38     	; 0x19a <MDIO_voidSetPinDir+0x42>
 174:	a8 e3       	ldi	r26, 0x38	; 56
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	e7 e3       	ldi	r30, 0x37	; 55
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	0e c0       	rjmp	.+28     	; 0x19a <MDIO_voidSetPinDir+0x42>
 17e:	a5 e3       	ldi	r26, 0x35	; 53
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	e4 e3       	ldi	r30, 0x34	; 52
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	09 c0       	rjmp	.+18     	; 0x19a <MDIO_voidSetPinDir+0x42>
 188:	a2 e3       	ldi	r26, 0x32	; 50
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	e1 e3       	ldi	r30, 0x31	; 49
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	04 c0       	rjmp	.+8      	; 0x19a <MDIO_voidSetPinDir+0x42>
 192:	ab e3       	ldi	r26, 0x3B	; 59
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	ea e3       	ldi	r30, 0x3A	; 58
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	61 30       	cpi	r22, 0x01	; 1
 19c:	91 f0       	breq	.+36     	; 0x1c2 <MDIO_voidSetPinDir+0x6a>
 19e:	18 f0       	brcs	.+6      	; 0x1a6 <MDIO_voidSetPinDir+0x4e>
 1a0:	62 30       	cpi	r22, 0x02	; 2
 1a2:	e1 f0       	breq	.+56     	; 0x1dc <MDIO_voidSetPinDir+0x84>
 1a4:	08 95       	ret
 1a6:	40 81       	ld	r20, Z
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <MDIO_voidSetPinDir+0x5c>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <MDIO_voidSetPinDir+0x58>
 1b8:	cb 01       	movw	r24, r22
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	80 83       	st	Z, r24
 1c0:	08 95       	ret
 1c2:	40 81       	ld	r20, Z
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	b9 01       	movw	r22, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <MDIO_voidSetPinDir+0x78>
 1cc:	66 0f       	add	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	8a 95       	dec	r24
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <MDIO_voidSetPinDir+0x74>
 1d4:	cb 01       	movw	r24, r22
 1d6:	84 2b       	or	r24, r20
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret
 1dc:	40 81       	ld	r20, Z
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <MDIO_voidSetPinDir+0x92>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	8a 95       	dec	r24
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <MDIO_voidSetPinDir+0x8e>
 1ee:	cb 01       	movw	r24, r22
 1f0:	96 2f       	mov	r25, r22
 1f2:	90 95       	com	r25
 1f4:	94 23       	and	r25, r20
 1f6:	90 83       	st	Z, r25
 1f8:	9c 91       	ld	r25, X
 1fa:	89 2b       	or	r24, r25
 1fc:	8c 93       	st	X, r24
 1fe:	08 95       	ret

00000200 <MDIO_voidTogPinVal>:

void MDIO_voidTogPinVal(Pin_t A_Pin_tPin){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 200:	98 2f       	mov	r25, r24
 202:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 204:	28 2f       	mov	r18, r24
 206:	2f 70       	andi	r18, 0x0F	; 15
	
	volatile u8  *L_dirReg = NULL,*L_valReg =NULL;
	
	switch (L_portNum)
 208:	90 3b       	cpi	r25, 0xB0	; 176
 20a:	59 f0       	breq	.+22     	; 0x222 <MDIO_voidTogPinVal+0x22>
 20c:	18 f4       	brcc	.+6      	; 0x214 <MDIO_voidTogPinVal+0x14>
 20e:	90 3a       	cpi	r25, 0xA0	; 160
 210:	89 f0       	breq	.+34     	; 0x234 <MDIO_voidTogPinVal+0x34>
 212:	04 c0       	rjmp	.+8      	; 0x21c <MDIO_voidTogPinVal+0x1c>
 214:	90 3c       	cpi	r25, 0xC0	; 192
 216:	41 f0       	breq	.+16     	; 0x228 <MDIO_voidTogPinVal+0x28>
 218:	90 3d       	cpi	r25, 0xD0	; 208
 21a:	49 f0       	breq	.+18     	; 0x22e <MDIO_voidTogPinVal+0x2e>

void MDIO_voidTogPinVal(Pin_t A_Pin_tPin){
	u8 L_portNum = A_Pin_tPin & 0xF0;
	u8 L_pinNum = A_Pin_tPin & 0x0F;
	
	volatile u8  *L_dirReg = NULL,*L_valReg =NULL;
 21c:	e0 e0       	ldi	r30, 0x00	; 0
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	0b c0       	rjmp	.+22     	; 0x238 <MDIO_voidTogPinVal+0x38>
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
		break;
		case MDIO_PORT_B_NUM:
		L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 222:	e8 e3       	ldi	r30, 0x38	; 56
 224:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 226:	08 c0       	rjmp	.+16     	; 0x238 <MDIO_voidTogPinVal+0x38>
		case MDIO_PORT_C_NUM:
		L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 228:	e5 e3       	ldi	r30, 0x35	; 53
 22a:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 22c:	05 c0       	rjmp	.+10     	; 0x238 <MDIO_voidTogPinVal+0x38>
		case MDIO_PORT_D_NUM:
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 22e:	e2 e3       	ldi	r30, 0x32	; 50
 230:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 232:	02 c0       	rjmp	.+4      	; 0x238 <MDIO_voidTogPinVal+0x38>
	volatile u8  *L_dirReg = NULL,*L_valReg =NULL;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 234:	eb e3       	ldi	r30, 0x3B	; 59
 236:	f0 e0       	ldi	r31, 0x00	; 0
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

		break;
	}
	
	TOG_BIT(*L_valReg,L_pinNum);
 238:	30 81       	ld	r19, Z
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <MDIO_voidTogPinVal+0x44>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	2a 95       	dec	r18
 246:	e2 f7       	brpl	.-8      	; 0x240 <MDIO_voidTogPinVal+0x40>
 248:	83 27       	eor	r24, r19
 24a:	80 83       	st	Z, r24
 24c:	08 95       	ret

0000024e <__vector_1>:




void __vector_1 (void) __attribute__ ((signal,used, externally_visible));
void __vector_1 (void){
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_0_callBack != NULL){
 270:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <G_ptr2voidCallback_INT_0_callBack>
 274:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <G_ptr2voidCallback_INT_0_callBack+0x1>
 278:	30 97       	sbiw	r30, 0x00	; 0
 27a:	09 f0       	breq	.+2      	; 0x27e <__vector_1+0x30>
		G_ptr2voidCallback_INT_0_callBack();
 27c:	09 95       	icall
	}
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_2>:


void __vector_2 (void) __attribute__ ((signal,used, externally_visible));
void __vector_2 (void){
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_1_callBack != NULL){
 2c2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <G_ptr2voidCallback_INT_1_callBack>
 2c6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <G_ptr2voidCallback_INT_1_callBack+0x1>
 2ca:	30 97       	sbiw	r30, 0x00	; 0
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <__vector_2+0x30>
		G_ptr2voidCallback_INT_1_callBack();
 2ce:	09 95       	icall
	}
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__vector_3>:


void __vector_3 (void) __attribute__ ((signal,used, externally_visible));
void __vector_3 (void){
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_2_callBack != NULL){
 314:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <G_ptr2voidCallback_INT_2_callBack>
 318:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <G_ptr2voidCallback_INT_2_callBack+0x1>
 31c:	30 97       	sbiw	r30, 0x00	; 0
 31e:	09 f0       	breq	.+2      	; 0x322 <__vector_3+0x30>
		G_ptr2voidCallback_INT_2_callBack();
 320:	09 95       	icall
	}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <MGI_void_Enable>:
#include "GI_config.h"
#include "GI_interface.h"
#include "GI_private.h"

void MGI_void_Enable(void){
	SET_BIT(SREG_REG,SREG_I_BIT);	
 344:	8f b7       	in	r24, 0x3f	; 63
 346:	80 68       	ori	r24, 0x80	; 128
 348:	8f bf       	out	0x3f, r24	; 63
 34a:	08 95       	ret

0000034c <MTIMER_0_voidInit>:
	#endif
}

void MTimer_0_voidEnableInterrupt(void){
	#if TIMERO_MODE_SELECT == TIMER0_MODE_NORMAL
		SET_BIT(TIMSK_REG,0);
 34c:	83 b7       	in	r24, 0x33	; 51
 34e:	8f 7b       	andi	r24, 0xBF	; 191
 350:	83 bf       	out	0x33, r24	; 51
 352:	83 b7       	in	r24, 0x33	; 51
 354:	87 7f       	andi	r24, 0xF7	; 247
 356:	83 bf       	out	0x33, r24	; 51
 358:	83 b7       	in	r24, 0x33	; 51
 35a:	8f 7c       	andi	r24, 0xCF	; 207
 35c:	83 bf       	out	0x33, r24	; 51
 35e:	80 ec       	ldi	r24, 0xC0	; 192
 360:	82 bf       	out	0x32, r24	; 50
 362:	83 b7       	in	r24, 0x33	; 51
 364:	88 7f       	andi	r24, 0xF8	; 248
 366:	82 60       	ori	r24, 0x02	; 2
 368:	83 bf       	out	0x33, r24	; 51
 36a:	89 b7       	in	r24, 0x39	; 57
 36c:	81 60       	ori	r24, 0x01	; 1
 36e:	89 bf       	out	0x39, r24	; 57
 370:	08 95       	ret

00000372 <MTimer_0_voidSetCallback>:
 372:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <G_ptr2voidCallback_callback+0x1>
 376:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <G_ptr2voidCallback_callback>
 37a:	08 95       	ret

0000037c <__vector_11>:


//Timer/Counter0 Overflow ISR
#if TIMERO_MODE_SELECT == TIMER0_MODE_NORMAL
	void __vector_11(void)__attribute__((signal));
	void __vector_11(){
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
		static u32 counter = 0;
		counter++;
 39e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <counter.1617>
 3a2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <counter.1617+0x1>
 3a6:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <counter.1617+0x2>
 3aa:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <counter.1617+0x3>
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	a1 1d       	adc	r26, r1
 3b2:	b1 1d       	adc	r27, r1
 3b4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <counter.1617>
 3b8:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <counter.1617+0x1>
 3bc:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <counter.1617+0x2>
 3c0:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <counter.1617+0x3>

		if(counter == MTIMER0_MAX_COUNT){
 3c4:	83 34       	cpi	r24, 0x43	; 67
 3c6:	9f 40       	sbci	r25, 0x0F	; 15
 3c8:	a1 05       	cpc	r26, r1
 3ca:	b1 05       	cpc	r27, r1
 3cc:	a9 f4       	brne	.+42     	; 0x3f8 <__vector_11+0x7c>
			counter = 0;
 3ce:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <counter.1617>
 3d2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <counter.1617+0x1>
 3d6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <counter.1617+0x2>
 3da:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <counter.1617+0x3>
			TCNT0_REG = MTIMER0_PRELOAD_VAL;
 3de:	80 ec       	ldi	r24, 0xC0	; 192
 3e0:	82 bf       	out	0x32, r24	; 50
		
			if(G_ptr2voidCallback_callback != NULL){
 3e2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <G_ptr2voidCallback_callback>
 3e6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <G_ptr2voidCallback_callback+0x1>
 3ea:	89 2b       	or	r24, r25
 3ec:	29 f0       	breq	.+10     	; 0x3f8 <__vector_11+0x7c>
				G_ptr2voidCallback_callback();
 3ee:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <G_ptr2voidCallback_callback>
 3f2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <G_ptr2voidCallback_callback+0x1>
 3f6:	09 95       	icall
			}
		
		}
	}
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_10>:


//Timer/Counter0 Compare ISR
#if TIMERO_MODE_SELECT == TIMER0_MODE_CTC
	void __vector_10(void)__attribute__((signal));
	void __vector_10(){
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	2f 93       	push	r18
 426:	3f 93       	push	r19
 428:	4f 93       	push	r20
 42a:	5f 93       	push	r21
 42c:	6f 93       	push	r22
 42e:	7f 93       	push	r23
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	af 93       	push	r26
 436:	bf 93       	push	r27
 438:	ef 93       	push	r30
 43a:	ff 93       	push	r31
		static u32 counter = 0;
		counter++;
 43c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <counter.1622>
 440:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <counter.1622+0x1>
 444:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <counter.1622+0x2>
 448:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <counter.1622+0x3>
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	a1 1d       	adc	r26, r1
 450:	b1 1d       	adc	r27, r1
 452:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <counter.1622>
 456:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <counter.1622+0x1>
 45a:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <counter.1622+0x2>
 45e:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <counter.1622+0x3>

		if(counter == MTIMER0_MAX_COUNT){
 462:	83 34       	cpi	r24, 0x43	; 67
 464:	9f 40       	sbci	r25, 0x0F	; 15
 466:	a1 05       	cpc	r26, r1
 468:	b1 05       	cpc	r27, r1
 46a:	a9 f4       	brne	.+42     	; 0x496 <__vector_10+0x7c>
			counter = 0;
 46c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <counter.1622>
 470:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <counter.1622+0x1>
 474:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <counter.1622+0x2>
 478:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <counter.1622+0x3>
			TCNT0_REG = MTIMER0_PRELOAD_VAL;
 47c:	80 ec       	ldi	r24, 0xC0	; 192
 47e:	82 bf       	out	0x32, r24	; 50
			
			if(G_ptr2voidCallback_callback != NULL){
 480:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <G_ptr2voidCallback_callback>
 484:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <G_ptr2voidCallback_callback+0x1>
 488:	89 2b       	or	r24, r25
 48a:	29 f0       	breq	.+10     	; 0x496 <__vector_10+0x7c>
				G_ptr2voidCallback_callback();
 48c:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <G_ptr2voidCallback_callback>
 490:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <G_ptr2voidCallback_callback+0x1>
 494:	09 95       	icall
			}
			
		}
	}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
