
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000848  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000008bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000191b  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afd  00000000  00000000  0000241b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca4  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00003bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e32  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c55  00000000  00000000  00004dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00005a4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_1>
   8:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_2>
   c:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 22 04 	jmp	0x844	; 0x844 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
{
	u32 L_SpeedVOLT=0,L_DirVOLT;
	u8  L_dc=0;
	
	
		MDIO_voidInit();
  92:	0e 94 4d 01 	call	0x29a	; 0x29a <MDIO_voidInit>

			MDIO_voidSetPinDir(PinD7,OUTPUT);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	87 ed       	ldi	r24, 0xD7	; 215
  9a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinDir>
			MDIO_voidSetPinDir(PinD6,OUTPUT);
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	86 ed       	ldi	r24, 0xD6	; 214
  a2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinDir>
	
	MGI_void_Enable();
  a6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <MGI_void_Enable>
	
	MADC_voidInit();	
  aa:	0e 94 a4 00 	call	0x148	; 0x148 <MADC_voidInit>
		
	
	MTIMER_0_voidInit();
  ae:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MTIMER_0_voidInit>
		
	while(1){

		L_SpeedVOLT = MADC_u32ReadVoltage(MADC_SINGLE_CHANNEL_0);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 b5 00 	call	0x16a	; 0x16a <MADC_u32ReadVoltage>
		L_dc = (u8)((L_SpeedVOLT * 255.0)/5000.0);
  b8:	0e 94 27 03 	call	0x64e	; 0x64e <__floatunsisf>
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	4f e7       	ldi	r20, 0x7F	; 127
  c2:	53 e4       	ldi	r21, 0x43	; 67
  c4:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulsf3>
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e4       	ldi	r19, 0x40	; 64
  cc:	4c e9       	ldi	r20, 0x9C	; 156
  ce:	55 e4       	ldi	r21, 0x45	; 69
  d0:	0e 94 86 02 	call	0x50c	; 0x50c <__divsf3>
  d4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fixunssfsi>
  d8:	c6 2f       	mov	r28, r22
		
		L_DirVOLT = MADC_u32ReadVoltage(MADC_SINGLE_CHANNEL_7);
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	0e 94 b5 00 	call	0x16a	; 0x16a <MADC_u32ReadVoltage>
  e0:	6b 01       	movw	r12, r22
  e2:	7c 01       	movw	r14, r24
		
		MTIMER_0_voidSetDutyCucle(L_dc);
  e4:	8c 2f       	mov	r24, r28
  e6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <MTIMER_0_voidSetDutyCucle>
		
		if(L_DirVOLT > 700){
  ea:	8d eb       	ldi	r24, 0xBD	; 189
  ec:	c8 16       	cp	r12, r24
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	d8 06       	cpc	r13, r24
  f2:	e1 04       	cpc	r14, r1
  f4:	f1 04       	cpc	r15, r1
  f6:	48 f0       	brcs	.+18     	; 0x10a <main+0x78>
			MDIO_voidSetPinVal(PinD7,HIGH );
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	87 ed       	ldi	r24, 0xD7	; 215
  fc:	0e 94 a5 01 	call	0x34a	; 0x34a <MDIO_voidSetPinVal>
			MDIO_voidSetPinVal(PinD6,LOW);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	86 ed       	ldi	r24, 0xD6	; 214
 104:	0e 94 a5 01 	call	0x34a	; 0x34a <MDIO_voidSetPinVal>
 108:	18 c0       	rjmp	.+48     	; 0x13a <main+0xa8>
		}else if (L_DirVOLT<300){
 10a:	8c e2       	ldi	r24, 0x2C	; 44
 10c:	c8 16       	cp	r12, r24
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	d8 06       	cpc	r13, r24
 112:	e1 04       	cpc	r14, r1
 114:	f1 04       	cpc	r15, r1
 116:	48 f4       	brcc	.+18     	; 0x12a <main+0x98>
			MDIO_voidSetPinVal(PinD7,LOW );
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	87 ed       	ldi	r24, 0xD7	; 215
 11c:	0e 94 a5 01 	call	0x34a	; 0x34a <MDIO_voidSetPinVal>
			MDIO_voidSetPinVal(PinD6,HIGH);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	86 ed       	ldi	r24, 0xD6	; 214
 124:	0e 94 a5 01 	call	0x34a	; 0x34a <MDIO_voidSetPinVal>
 128:	08 c0       	rjmp	.+16     	; 0x13a <main+0xa8>
		}else{
						MDIO_voidSetPinVal(PinD7,LOW );
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	87 ed       	ldi	r24, 0xD7	; 215
 12e:	0e 94 a5 01 	call	0x34a	; 0x34a <MDIO_voidSetPinVal>
						MDIO_voidSetPinVal(PinD6,LOW);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	86 ed       	ldi	r24, 0xD6	; 214
 136:	0e 94 a5 01 	call	0x34a	; 0x34a <MDIO_voidSetPinVal>
		}
		
		MDELAY_void_milli(100);
 13a:	64 e6       	ldi	r22, 0x64	; 100
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 04 01 	call	0x208	; 0x208 <MDELAY_void_milli>
	}
 146:	b5 cf       	rjmp	.-150    	; 0xb2 <main+0x20>

00000148 <MADC_voidInit>:
void MADC_voidEnableInterrupt(void){
	SET_BIT(ADCSRA_REG,ADCSRA_ADIE_BIT);
}

void MADC_voidSetCallback( void (*A_ptr2voidFunU32)(u32) ){
	G_ptr2voidFunU32 = A_ptr2voidFunU32;
 148:	86 b1       	in	r24, 0x06	; 6
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	86 b9       	out	0x06, r24	; 6
 14e:	87 b1       	in	r24, 0x07	; 7
 150:	8f 73       	andi	r24, 0x3F	; 63
 152:	80 64       	ori	r24, 0x40	; 64
 154:	87 b9       	out	0x07, r24	; 7
 156:	86 b1       	in	r24, 0x06	; 6
 158:	87 60       	ori	r24, 0x07	; 7
 15a:	86 b9       	out	0x06, r24	; 6
 15c:	87 b1       	in	r24, 0x07	; 7
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	87 b9       	out	0x07, r24	; 7
 162:	86 b1       	in	r24, 0x06	; 6
 164:	8f 7d       	andi	r24, 0xDF	; 223
 166:	86 b9       	out	0x06, r24	; 6
 168:	08 95       	ret

0000016a <MADC_u32ReadVoltage>:
 16a:	97 b1       	in	r25, 0x07	; 7
 16c:	90 7e       	andi	r25, 0xE0	; 224
 16e:	8f 71       	andi	r24, 0x1F	; 31
 170:	89 2b       	or	r24, r25
 172:	87 b9       	out	0x07, r24	; 7
 174:	86 b1       	in	r24, 0x06	; 6
 176:	80 64       	ori	r24, 0x40	; 64
 178:	86 b9       	out	0x06, r24	; 6
 17a:	34 9b       	sbis	0x06, 4	; 6
 17c:	fe cf       	rjmp	.-4      	; 0x17a <MADC_u32ReadVoltage+0x10>
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	65 b1       	in	r22, 0x05	; 5
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	76 2f       	mov	r23, r22
 186:	66 27       	eor	r22, r22
 188:	68 0f       	add	r22, r24
 18a:	71 1d       	adc	r23, r1
 18c:	07 2e       	mov	r0, r23
 18e:	00 0c       	add	r0, r0
 190:	88 0b       	sbc	r24, r24
 192:	99 0b       	sbc	r25, r25
 194:	26 b1       	in	r18, 0x06	; 6
 196:	20 61       	ori	r18, 0x10	; 16
 198:	26 b9       	out	0x06, r18	; 6
 19a:	08 95       	ret

0000019c <__vector_16>:
}

void __vector_16 (void) __attribute__ ((signal,used, externally_visible));
void __vector_16 (void){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	if(G_ptr2voidFunU32 != NULL){
 1be:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	30 97       	sbiw	r30, 0x00	; 0
 1c8:	71 f0       	breq	.+28     	; 0x1e6 <__vector_16+0x4a>
		u32 returnVal = 0;

		//read
		#if MADC_ADJUST==0
			returnVal = ((int)(ADCL_REG) + ((int)ADCH_REG<<8));
 1ca:	84 b1       	in	r24, 0x04	; 4
 1cc:	65 b1       	in	r22, 0x05	; 5
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	76 2f       	mov	r23, r22
 1d2:	66 27       	eor	r22, r22
 1d4:	68 0f       	add	r22, r24
 1d6:	71 1d       	adc	r23, r1
 1d8:	07 2e       	mov	r0, r23
 1da:	00 0c       	add	r0, r0
 1dc:	88 0b       	sbc	r24, r24
 1de:	99 0b       	sbc	r25, r25
			returnVal = (int)ADCL_REG>>6 + (int)ADCH_REG<<2;
		#else
			#error "ADC ERROR, adjust undefined"
		#endif
		
		if(G_ptr2voidFunU32 != NULL){
 1e0:	30 97       	sbiw	r30, 0x00	; 0
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <__vector_16+0x4a>
			G_ptr2voidFunU32(returnVal);
 1e4:	09 95       	icall
		}
	}
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <MDELAY_void_milli>:
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 208:	41 c0       	rjmp	.+130    	; 0x28c <MDELAY_void_milli+0x84>
		if(A_u32_ms >= 1000){
 20a:	68 3e       	cpi	r22, 0xE8	; 232
 20c:	23 e0       	ldi	r18, 0x03	; 3
 20e:	72 07       	cpc	r23, r18
 210:	81 05       	cpc	r24, r1
 212:	91 05       	cpc	r25, r1
 214:	70 f0       	brcs	.+28     	; 0x232 <MDELAY_void_milli+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	3f ef       	ldi	r19, 0xFF	; 255
 218:	49 e6       	ldi	r20, 0x69	; 105
 21a:	e8 e1       	ldi	r30, 0x18	; 24
 21c:	31 50       	subi	r19, 0x01	; 1
 21e:	40 40       	sbci	r20, 0x00	; 0
 220:	e0 40       	sbci	r30, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <MDELAY_void_milli+0x14>
 224:	00 c0       	rjmp	.+0      	; 0x226 <MDELAY_void_milli+0x1e>
 226:	00 00       	nop
			_delay_ms(1000);
			A_u32_ms -= 1000;
 228:	68 5e       	subi	r22, 0xE8	; 232
 22a:	73 40       	sbci	r23, 0x03	; 3
 22c:	81 09       	sbc	r24, r1
 22e:	91 09       	sbc	r25, r1
 230:	2d c0       	rjmp	.+90     	; 0x28c <MDELAY_void_milli+0x84>
		}
		else if(A_u32_ms >= 100){
 232:	64 36       	cpi	r22, 0x64	; 100
 234:	71 05       	cpc	r23, r1
 236:	81 05       	cpc	r24, r1
 238:	91 05       	cpc	r25, r1
 23a:	70 f0       	brcs	.+28     	; 0x258 <MDELAY_void_milli+0x50>
 23c:	ff ef       	ldi	r31, 0xFF	; 255
 23e:	20 e7       	ldi	r18, 0x70	; 112
 240:	32 e0       	ldi	r19, 0x02	; 2
 242:	f1 50       	subi	r31, 0x01	; 1
 244:	20 40       	sbci	r18, 0x00	; 0
 246:	30 40       	sbci	r19, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <MDELAY_void_milli+0x3a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <MDELAY_void_milli+0x44>
 24c:	00 00       	nop
			_delay_ms(100);
			A_u32_ms -= 100;
 24e:	64 56       	subi	r22, 0x64	; 100
 250:	71 09       	sbc	r23, r1
 252:	81 09       	sbc	r24, r1
 254:	91 09       	sbc	r25, r1
 256:	1a c0       	rjmp	.+52     	; 0x28c <MDELAY_void_milli+0x84>
		}else if(A_u32_ms >= 10){
 258:	6a 30       	cpi	r22, 0x0A	; 10
 25a:	71 05       	cpc	r23, r1
 25c:	81 05       	cpc	r24, r1
 25e:	91 05       	cpc	r25, r1
 260:	58 f0       	brcs	.+22     	; 0x278 <MDELAY_void_milli+0x70>
 262:	ef e1       	ldi	r30, 0x1F	; 31
 264:	fe e4       	ldi	r31, 0x4E	; 78
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <MDELAY_void_milli+0x5e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <MDELAY_void_milli+0x64>
 26c:	00 00       	nop
			_delay_ms(10);
			A_u32_ms -= 10;
 26e:	6a 50       	subi	r22, 0x0A	; 10
 270:	71 09       	sbc	r23, r1
 272:	81 09       	sbc	r24, r1
 274:	91 09       	sbc	r25, r1
 276:	0a c0       	rjmp	.+20     	; 0x28c <MDELAY_void_milli+0x84>
 278:	ef ec       	ldi	r30, 0xCF	; 207
 27a:	f7 e0       	ldi	r31, 0x07	; 7
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <MDELAY_void_milli+0x74>
 280:	00 c0       	rjmp	.+0      	; 0x282 <MDELAY_void_milli+0x7a>
 282:	00 00       	nop
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
 284:	61 50       	subi	r22, 0x01	; 1
 286:	71 09       	sbc	r23, r1
 288:	81 09       	sbc	r24, r1
 28a:	91 09       	sbc	r25, r1
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 28c:	61 15       	cp	r22, r1
 28e:	71 05       	cpc	r23, r1
 290:	81 05       	cpc	r24, r1
 292:	91 05       	cpc	r25, r1
 294:	09 f0       	breq	.+2      	; 0x298 <MDELAY_void_milli+0x90>
 296:	b9 cf       	rjmp	.-142    	; 0x20a <MDELAY_void_milli+0x2>
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
		}
	}
}
 298:	08 95       	ret

0000029a <MDIO_voidInit>:

void MDIO_voidInit(void){
	#if MDIO_ENABLE_PULL_UP_CIRCUIT == 0
		SET_BIT(SFIOR_REG,PUD_BIT);
	#else
		CLR_BIT(SFIOR_REG,PUD_BIT);
 29a:	80 b7       	in	r24, 0x30	; 48
 29c:	8b 7f       	andi	r24, 0xFB	; 251
 29e:	80 bf       	out	0x30, r24	; 48
 2a0:	08 95       	ret

000002a2 <MDIO_voidSetPinDir>:
	#endif
}


void MDIO_voidSetPinDir(Pin_t A_Pin_tPin, u8 A_u8Dir){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 2a2:	98 2f       	mov	r25, r24
 2a4:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 2a6:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 2a8:	90 3b       	cpi	r25, 0xB0	; 176
 2aa:	49 f0       	breq	.+18     	; 0x2be <MDIO_voidSetPinDir+0x1c>
 2ac:	18 f4       	brcc	.+6      	; 0x2b4 <MDIO_voidSetPinDir+0x12>
 2ae:	90 3a       	cpi	r25, 0xA0	; 160
 2b0:	a9 f0       	breq	.+42     	; 0x2dc <MDIO_voidSetPinDir+0x3a>
 2b2:	18 c0       	rjmp	.+48     	; 0x2e4 <MDIO_voidSetPinDir+0x42>
 2b4:	90 3c       	cpi	r25, 0xC0	; 192
 2b6:	41 f0       	breq	.+16     	; 0x2c8 <MDIO_voidSetPinDir+0x26>
 2b8:	90 3d       	cpi	r25, 0xD0	; 208
 2ba:	59 f0       	breq	.+22     	; 0x2d2 <MDIO_voidSetPinDir+0x30>
 2bc:	13 c0       	rjmp	.+38     	; 0x2e4 <MDIO_voidSetPinDir+0x42>
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
			break;
		case MDIO_PORT_B_NUM:
						L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 2be:	a8 e3       	ldi	r26, 0x38	; 56
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e7 e3       	ldi	r30, 0x37	; 55
 2c4:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 2c6:	0e c0       	rjmp	.+28     	; 0x2e4 <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_C_NUM:
						L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 2c8:	a5 e3       	ldi	r26, 0x35	; 53
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e4 e3       	ldi	r30, 0x34	; 52
 2ce:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_D_NUM:
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 2d2:	a2 e3       	ldi	r26, 0x32	; 50
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	e1 e3       	ldi	r30, 0x31	; 49
 2d8:	f0 e0       	ldi	r31, 0x00	; 0

			break;
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <MDIO_voidSetPinDir+0x42>
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 2dc:	ab e3       	ldi	r26, 0x3B	; 59
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	ea e3       	ldi	r30, 0x3A	; 58
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

			break;
		}
		
		switch(A_u8Dir){
 2e4:	61 30       	cpi	r22, 0x01	; 1
 2e6:	91 f0       	breq	.+36     	; 0x30c <MDIO_voidSetPinDir+0x6a>
 2e8:	18 f0       	brcs	.+6      	; 0x2f0 <MDIO_voidSetPinDir+0x4e>
 2ea:	62 30       	cpi	r22, 0x02	; 2
 2ec:	e1 f0       	breq	.+56     	; 0x326 <MDIO_voidSetPinDir+0x84>
 2ee:	08 95       	ret
			case INPUT: 
				CLR_BIT(*L_dirReg,L_pinNum) ;
 2f0:	40 81       	ld	r20, Z
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <MDIO_voidSetPinDir+0x5c>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	8a 95       	dec	r24
 300:	e2 f7       	brpl	.-8      	; 0x2fa <MDIO_voidSetPinDir+0x58>
 302:	cb 01       	movw	r24, r22
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	80 83       	st	Z, r24
				break;
 30a:	08 95       	ret
			case OUTPUT: 
				SET_BIT(*L_dirReg,L_pinNum) ;
 30c:	40 81       	ld	r20, Z
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	b9 01       	movw	r22, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <MDIO_voidSetPinDir+0x78>
 316:	66 0f       	add	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	8a 95       	dec	r24
 31c:	e2 f7       	brpl	.-8      	; 0x316 <MDIO_voidSetPinDir+0x74>
 31e:	cb 01       	movw	r24, r22
 320:	84 2b       	or	r24, r20
 322:	80 83       	st	Z, r24
				break;
 324:	08 95       	ret
			case INPUT_PULL_UP: 
				CLR_BIT(*L_dirReg,L_pinNum);
 326:	40 81       	ld	r20, Z
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	b9 01       	movw	r22, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <MDIO_voidSetPinDir+0x92>
 330:	66 0f       	add	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	8a 95       	dec	r24
 336:	e2 f7       	brpl	.-8      	; 0x330 <MDIO_voidSetPinDir+0x8e>
 338:	cb 01       	movw	r24, r22
 33a:	96 2f       	mov	r25, r22
 33c:	90 95       	com	r25
 33e:	94 23       	and	r25, r20
 340:	90 83       	st	Z, r25
				SET_BIT(*L_valReg,L_pinNum);
 342:	9c 91       	ld	r25, X
 344:	89 2b       	or	r24, r25
 346:	8c 93       	st	X, r24
 348:	08 95       	ret

0000034a <MDIO_voidSetPinVal>:
				break;
		}
	
}
void MDIO_voidSetPinVal(Pin_t A_Pin_tPin, u8 A_u8Val){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 34a:	98 2f       	mov	r25, r24
 34c:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 34e:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 350:	90 3b       	cpi	r25, 0xB0	; 176
 352:	49 f0       	breq	.+18     	; 0x366 <MDIO_voidSetPinVal+0x1c>
 354:	18 f4       	brcc	.+6      	; 0x35c <MDIO_voidSetPinVal+0x12>
 356:	90 3a       	cpi	r25, 0xA0	; 160
 358:	79 f0       	breq	.+30     	; 0x378 <MDIO_voidSetPinVal+0x2e>
 35a:	10 c0       	rjmp	.+32     	; 0x37c <MDIO_voidSetPinVal+0x32>
 35c:	90 3c       	cpi	r25, 0xC0	; 192
 35e:	31 f0       	breq	.+12     	; 0x36c <MDIO_voidSetPinVal+0x22>
 360:	90 3d       	cpi	r25, 0xD0	; 208
 362:	39 f0       	breq	.+14     	; 0x372 <MDIO_voidSetPinVal+0x28>
 364:	0b c0       	rjmp	.+22     	; 0x37c <MDIO_voidSetPinVal+0x32>
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
		break;
		case MDIO_PORT_B_NUM:
		L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 366:	e8 e3       	ldi	r30, 0x38	; 56
 368:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 36a:	08 c0       	rjmp	.+16     	; 0x37c <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_C_NUM:
		L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 36c:	e5 e3       	ldi	r30, 0x35	; 53
 36e:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 370:	05 c0       	rjmp	.+10     	; 0x37c <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_D_NUM:
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 372:	e2 e3       	ldi	r30, 0x32	; 50
 374:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 376:	02 c0       	rjmp	.+4      	; 0x37c <MDIO_voidSetPinVal+0x32>
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 378:	eb e3       	ldi	r30, 0x3B	; 59
 37a:	f0 e0       	ldi	r31, 0x00	; 0
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

		break;
	}
	
	switch(A_u8Val){
 37c:	66 23       	and	r22, r22
 37e:	19 f0       	breq	.+6      	; 0x386 <MDIO_voidSetPinVal+0x3c>
 380:	61 30       	cpi	r22, 0x01	; 1
 382:	79 f0       	breq	.+30     	; 0x3a2 <MDIO_voidSetPinVal+0x58>
 384:	08 95       	ret
		case LOW:
		CLR_BIT(*L_valReg,L_pinNum) ;
 386:	40 81       	ld	r20, Z
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	b9 01       	movw	r22, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <MDIO_voidSetPinVal+0x4a>
 390:	66 0f       	add	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	8a 95       	dec	r24
 396:	e2 f7       	brpl	.-8      	; 0x390 <MDIO_voidSetPinVal+0x46>
 398:	cb 01       	movw	r24, r22
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	80 83       	st	Z, r24
		break;
 3a0:	08 95       	ret
		case HIGH:
		SET_BIT(*L_valReg,L_pinNum) ;
 3a2:	40 81       	ld	r20, Z
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	b9 01       	movw	r22, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <MDIO_voidSetPinVal+0x66>
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	8a 95       	dec	r24
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <MDIO_voidSetPinVal+0x62>
 3b4:	cb 01       	movw	r24, r22
 3b6:	84 2b       	or	r24, r20
 3b8:	80 83       	st	Z, r24
 3ba:	08 95       	ret

000003bc <__vector_1>:




void __vector_1 (void) __attribute__ ((signal,used, externally_visible));
void __vector_1 (void){
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_0_callBack != NULL){
 3de:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <G_ptr2voidCallback_INT_0_callBack>
 3e2:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <G_ptr2voidCallback_INT_0_callBack+0x1>
 3e6:	30 97       	sbiw	r30, 0x00	; 0
 3e8:	09 f0       	breq	.+2      	; 0x3ec <__vector_1+0x30>
		G_ptr2voidCallback_INT_0_callBack();
 3ea:	09 95       	icall
	}
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	bf 91       	pop	r27
 3f2:	af 91       	pop	r26
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	7f 91       	pop	r23
 3fa:	6f 91       	pop	r22
 3fc:	5f 91       	pop	r21
 3fe:	4f 91       	pop	r20
 400:	3f 91       	pop	r19
 402:	2f 91       	pop	r18
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <__vector_2>:


void __vector_2 (void) __attribute__ ((signal,used, externally_visible));
void __vector_2 (void){
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	2f 93       	push	r18
 41a:	3f 93       	push	r19
 41c:	4f 93       	push	r20
 41e:	5f 93       	push	r21
 420:	6f 93       	push	r22
 422:	7f 93       	push	r23
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
 428:	af 93       	push	r26
 42a:	bf 93       	push	r27
 42c:	ef 93       	push	r30
 42e:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_1_callBack != NULL){
 430:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <G_ptr2voidCallback_INT_1_callBack>
 434:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <G_ptr2voidCallback_INT_1_callBack+0x1>
 438:	30 97       	sbiw	r30, 0x00	; 0
 43a:	09 f0       	breq	.+2      	; 0x43e <__vector_2+0x30>
		G_ptr2voidCallback_INT_1_callBack();
 43c:	09 95       	icall
	}
}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <__vector_3>:


void __vector_3 (void) __attribute__ ((signal,used, externally_visible));
void __vector_3 (void){
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	5f 93       	push	r21
 472:	6f 93       	push	r22
 474:	7f 93       	push	r23
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	af 93       	push	r26
 47c:	bf 93       	push	r27
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_2_callBack != NULL){
 482:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <G_ptr2voidCallback_INT_2_callBack>
 486:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <G_ptr2voidCallback_INT_2_callBack+0x1>
 48a:	30 97       	sbiw	r30, 0x00	; 0
 48c:	09 f0       	breq	.+2      	; 0x490 <__vector_3+0x30>
		G_ptr2voidCallback_INT_2_callBack();
 48e:	09 95       	icall
	}
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	bf 91       	pop	r27
 496:	af 91       	pop	r26
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	7f 91       	pop	r23
 49e:	6f 91       	pop	r22
 4a0:	5f 91       	pop	r21
 4a2:	4f 91       	pop	r20
 4a4:	3f 91       	pop	r19
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <MGI_void_Enable>:
#include "GI_config.h"
#include "GI_interface.h"
#include "GI_private.h"

void MGI_void_Enable(void){
	SET_BIT(SREG_REG,SREG_I_BIT);	
 4b2:	8f b7       	in	r24, 0x3f	; 63
 4b4:	80 68       	ori	r24, 0x80	; 128
 4b6:	8f bf       	out	0x3f, r24	; 63
 4b8:	08 95       	ret

000004ba <MTIMER_0_voidInit>:
	TCCR0_REG = (TCCR0_REG&0b11111000)|(MTIMER0_PRESCALER_NO_CLOCK);
}
	
void MTimer_0_voidEnableClk(void){
	//CLK SELECT
	TCCR0_REG = (TCCR0_REG&0b11111000)|(MTIMER0_PRESCALER_SELECT);
 4ba:	83 b7       	in	r24, 0x33	; 51
 4bc:	80 64       	ori	r24, 0x40	; 64
 4be:	83 bf       	out	0x33, r24	; 51
 4c0:	83 b7       	in	r24, 0x33	; 51
 4c2:	87 7f       	andi	r24, 0xF7	; 247
 4c4:	83 bf       	out	0x33, r24	; 51
 4c6:	83 b7       	in	r24, 0x33	; 51
 4c8:	8f 7c       	andi	r24, 0xCF	; 207
 4ca:	80 62       	ori	r24, 0x20	; 32
 4cc:	83 bf       	out	0x33, r24	; 51
 4ce:	83 b7       	in	r24, 0x33	; 51
 4d0:	88 7f       	andi	r24, 0xF8	; 248
 4d2:	82 60       	ori	r24, 0x02	; 2
 4d4:	83 bf       	out	0x33, r24	; 51
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	83 eb       	ldi	r24, 0xB3	; 179
 4da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MDIO_voidSetPinDir>
 4de:	08 95       	ret

000004e0 <MTIMER_0_voidSetDutyCucle>:
	//dutyCycle range [000, 100]
	void MTIMER_0_voidSetDutyCucle(u8 A_u8DutyCycle){
		u8 L_ocrVal = 0;
				
		#if MTIMER0_OC0_SELECT == MTIMER0_OC0_MODE_2     //nin inverted mode
			L_ocrVal = (u8)((A_u8DutyCycle/100.0) * (TIMER0_TICKS_NO - 1));
 4e0:	68 2f       	mov	r22, r24
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 29 03 	call	0x652	; 0x652 <__floatsisf>
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	48 ec       	ldi	r20, 0xC8	; 200
 4f2:	52 e4       	ldi	r21, 0x42	; 66
 4f4:	0e 94 86 02 	call	0x50c	; 0x50c <__divsf3>
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	4f e7       	ldi	r20, 0x7F	; 127
 4fe:	53 e4       	ldi	r21, 0x43	; 67
 500:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulsf3>
 504:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fixunssfsi>
			L_ocrVal = (u8)(((100 - A_u8DutyCycle)/100.0) * (TIMER0_TICKS_NO - 1));
		#else
			#error "TIMER0 ERROR, in PWM or Phase correct, the oc0 must be inverted or nin inverted"
		#endif
				
		OCR0_REG = L_ocrVal;
 508:	6c bf       	out	0x3c, r22	; 60
 50a:	08 95       	ret

0000050c <__divsf3>:
 50c:	0e 94 9a 02 	call	0x534	; 0x534 <__divsf3x>
 510:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_round>
 514:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_pscB>
 518:	58 f0       	brcs	.+22     	; 0x530 <__divsf3+0x24>
 51a:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_pscA>
 51e:	40 f0       	brcs	.+16     	; 0x530 <__divsf3+0x24>
 520:	29 f4       	brne	.+10     	; 0x52c <__divsf3+0x20>
 522:	5f 3f       	cpi	r21, 0xFF	; 255
 524:	29 f0       	breq	.+10     	; 0x530 <__divsf3+0x24>
 526:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 52a:	51 11       	cpse	r21, r1
 52c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>
 530:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_nan>

00000534 <__divsf3x>:
 534:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_split3>
 538:	68 f3       	brcs	.-38     	; 0x514 <__divsf3+0x8>

0000053a <__divsf3_pse>:
 53a:	99 23       	and	r25, r25
 53c:	b1 f3       	breq	.-20     	; 0x52a <__divsf3+0x1e>
 53e:	55 23       	and	r21, r21
 540:	91 f3       	breq	.-28     	; 0x526 <__divsf3+0x1a>
 542:	95 1b       	sub	r25, r21
 544:	55 0b       	sbc	r21, r21
 546:	bb 27       	eor	r27, r27
 548:	aa 27       	eor	r26, r26
 54a:	62 17       	cp	r22, r18
 54c:	73 07       	cpc	r23, r19
 54e:	84 07       	cpc	r24, r20
 550:	38 f0       	brcs	.+14     	; 0x560 <__divsf3_pse+0x26>
 552:	9f 5f       	subi	r25, 0xFF	; 255
 554:	5f 4f       	sbci	r21, 0xFF	; 255
 556:	22 0f       	add	r18, r18
 558:	33 1f       	adc	r19, r19
 55a:	44 1f       	adc	r20, r20
 55c:	aa 1f       	adc	r26, r26
 55e:	a9 f3       	breq	.-22     	; 0x54a <__divsf3_pse+0x10>
 560:	35 d0       	rcall	.+106    	; 0x5cc <__divsf3_pse+0x92>
 562:	0e 2e       	mov	r0, r30
 564:	3a f0       	brmi	.+14     	; 0x574 <__divsf3_pse+0x3a>
 566:	e0 e8       	ldi	r30, 0x80	; 128
 568:	32 d0       	rcall	.+100    	; 0x5ce <__divsf3_pse+0x94>
 56a:	91 50       	subi	r25, 0x01	; 1
 56c:	50 40       	sbci	r21, 0x00	; 0
 56e:	e6 95       	lsr	r30
 570:	00 1c       	adc	r0, r0
 572:	ca f7       	brpl	.-14     	; 0x566 <__divsf3_pse+0x2c>
 574:	2b d0       	rcall	.+86     	; 0x5cc <__divsf3_pse+0x92>
 576:	fe 2f       	mov	r31, r30
 578:	29 d0       	rcall	.+82     	; 0x5cc <__divsf3_pse+0x92>
 57a:	66 0f       	add	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	88 1f       	adc	r24, r24
 580:	bb 1f       	adc	r27, r27
 582:	26 17       	cp	r18, r22
 584:	37 07       	cpc	r19, r23
 586:	48 07       	cpc	r20, r24
 588:	ab 07       	cpc	r26, r27
 58a:	b0 e8       	ldi	r27, 0x80	; 128
 58c:	09 f0       	breq	.+2      	; 0x590 <__divsf3_pse+0x56>
 58e:	bb 0b       	sbc	r27, r27
 590:	80 2d       	mov	r24, r0
 592:	bf 01       	movw	r22, r30
 594:	ff 27       	eor	r31, r31
 596:	93 58       	subi	r25, 0x83	; 131
 598:	5f 4f       	sbci	r21, 0xFF	; 255
 59a:	3a f0       	brmi	.+14     	; 0x5aa <__divsf3_pse+0x70>
 59c:	9e 3f       	cpi	r25, 0xFE	; 254
 59e:	51 05       	cpc	r21, r1
 5a0:	78 f0       	brcs	.+30     	; 0x5c0 <__divsf3_pse+0x86>
 5a2:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 5a6:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>
 5aa:	5f 3f       	cpi	r21, 0xFF	; 255
 5ac:	e4 f3       	brlt	.-8      	; 0x5a6 <__divsf3_pse+0x6c>
 5ae:	98 3e       	cpi	r25, 0xE8	; 232
 5b0:	d4 f3       	brlt	.-12     	; 0x5a6 <__divsf3_pse+0x6c>
 5b2:	86 95       	lsr	r24
 5b4:	77 95       	ror	r23
 5b6:	67 95       	ror	r22
 5b8:	b7 95       	ror	r27
 5ba:	f7 95       	ror	r31
 5bc:	9f 5f       	subi	r25, 0xFF	; 255
 5be:	c9 f7       	brne	.-14     	; 0x5b2 <__divsf3_pse+0x78>
 5c0:	88 0f       	add	r24, r24
 5c2:	91 1d       	adc	r25, r1
 5c4:	96 95       	lsr	r25
 5c6:	87 95       	ror	r24
 5c8:	97 f9       	bld	r25, 7
 5ca:	08 95       	ret
 5cc:	e1 e0       	ldi	r30, 0x01	; 1
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	88 1f       	adc	r24, r24
 5d4:	bb 1f       	adc	r27, r27
 5d6:	62 17       	cp	r22, r18
 5d8:	73 07       	cpc	r23, r19
 5da:	84 07       	cpc	r24, r20
 5dc:	ba 07       	cpc	r27, r26
 5de:	20 f0       	brcs	.+8      	; 0x5e8 <__divsf3_pse+0xae>
 5e0:	62 1b       	sub	r22, r18
 5e2:	73 0b       	sbc	r23, r19
 5e4:	84 0b       	sbc	r24, r20
 5e6:	ba 0b       	sbc	r27, r26
 5e8:	ee 1f       	adc	r30, r30
 5ea:	88 f7       	brcc	.-30     	; 0x5ce <__divsf3_pse+0x94>
 5ec:	e0 95       	com	r30
 5ee:	08 95       	ret

000005f0 <__fixunssfsi>:
 5f0:	0e 94 94 03 	call	0x728	; 0x728 <__fp_splitA>
 5f4:	88 f0       	brcs	.+34     	; 0x618 <__fixunssfsi+0x28>
 5f6:	9f 57       	subi	r25, 0x7F	; 127
 5f8:	98 f0       	brcs	.+38     	; 0x620 <__fixunssfsi+0x30>
 5fa:	b9 2f       	mov	r27, r25
 5fc:	99 27       	eor	r25, r25
 5fe:	b7 51       	subi	r27, 0x17	; 23
 600:	b0 f0       	brcs	.+44     	; 0x62e <__fixunssfsi+0x3e>
 602:	e1 f0       	breq	.+56     	; 0x63c <__fixunssfsi+0x4c>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	88 1f       	adc	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	1a f0       	brmi	.+6      	; 0x614 <__fixunssfsi+0x24>
 60e:	ba 95       	dec	r27
 610:	c9 f7       	brne	.-14     	; 0x604 <__fixunssfsi+0x14>
 612:	14 c0       	rjmp	.+40     	; 0x63c <__fixunssfsi+0x4c>
 614:	b1 30       	cpi	r27, 0x01	; 1
 616:	91 f0       	breq	.+36     	; 0x63c <__fixunssfsi+0x4c>
 618:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_zero>
 61c:	b1 e0       	ldi	r27, 0x01	; 1
 61e:	08 95       	ret
 620:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__fp_zero>
 624:	67 2f       	mov	r22, r23
 626:	78 2f       	mov	r23, r24
 628:	88 27       	eor	r24, r24
 62a:	b8 5f       	subi	r27, 0xF8	; 248
 62c:	39 f0       	breq	.+14     	; 0x63c <__fixunssfsi+0x4c>
 62e:	b9 3f       	cpi	r27, 0xF9	; 249
 630:	cc f3       	brlt	.-14     	; 0x624 <__fixunssfsi+0x34>
 632:	86 95       	lsr	r24
 634:	77 95       	ror	r23
 636:	67 95       	ror	r22
 638:	b3 95       	inc	r27
 63a:	d9 f7       	brne	.-10     	; 0x632 <__fixunssfsi+0x42>
 63c:	3e f4       	brtc	.+14     	; 0x64c <__fixunssfsi+0x5c>
 63e:	90 95       	com	r25
 640:	80 95       	com	r24
 642:	70 95       	com	r23
 644:	61 95       	neg	r22
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	8f 4f       	sbci	r24, 0xFF	; 255
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	08 95       	ret

0000064e <__floatunsisf>:
 64e:	e8 94       	clt
 650:	09 c0       	rjmp	.+18     	; 0x664 <__floatsisf+0x12>

00000652 <__floatsisf>:
 652:	97 fb       	bst	r25, 7
 654:	3e f4       	brtc	.+14     	; 0x664 <__floatsisf+0x12>
 656:	90 95       	com	r25
 658:	80 95       	com	r24
 65a:	70 95       	com	r23
 65c:	61 95       	neg	r22
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	99 23       	and	r25, r25
 666:	a9 f0       	breq	.+42     	; 0x692 <__floatsisf+0x40>
 668:	f9 2f       	mov	r31, r25
 66a:	96 e9       	ldi	r25, 0x96	; 150
 66c:	bb 27       	eor	r27, r27
 66e:	93 95       	inc	r25
 670:	f6 95       	lsr	r31
 672:	87 95       	ror	r24
 674:	77 95       	ror	r23
 676:	67 95       	ror	r22
 678:	b7 95       	ror	r27
 67a:	f1 11       	cpse	r31, r1
 67c:	f8 cf       	rjmp	.-16     	; 0x66e <__floatsisf+0x1c>
 67e:	fa f4       	brpl	.+62     	; 0x6be <__floatsisf+0x6c>
 680:	bb 0f       	add	r27, r27
 682:	11 f4       	brne	.+4      	; 0x688 <__floatsisf+0x36>
 684:	60 ff       	sbrs	r22, 0
 686:	1b c0       	rjmp	.+54     	; 0x6be <__floatsisf+0x6c>
 688:	6f 5f       	subi	r22, 0xFF	; 255
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	16 c0       	rjmp	.+44     	; 0x6be <__floatsisf+0x6c>
 692:	88 23       	and	r24, r24
 694:	11 f0       	breq	.+4      	; 0x69a <__floatsisf+0x48>
 696:	96 e9       	ldi	r25, 0x96	; 150
 698:	11 c0       	rjmp	.+34     	; 0x6bc <__floatsisf+0x6a>
 69a:	77 23       	and	r23, r23
 69c:	21 f0       	breq	.+8      	; 0x6a6 <__floatsisf+0x54>
 69e:	9e e8       	ldi	r25, 0x8E	; 142
 6a0:	87 2f       	mov	r24, r23
 6a2:	76 2f       	mov	r23, r22
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <__floatsisf+0x5e>
 6a6:	66 23       	and	r22, r22
 6a8:	71 f0       	breq	.+28     	; 0x6c6 <__floatsisf+0x74>
 6aa:	96 e8       	ldi	r25, 0x86	; 134
 6ac:	86 2f       	mov	r24, r22
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	2a f0       	brmi	.+10     	; 0x6be <__floatsisf+0x6c>
 6b4:	9a 95       	dec	r25
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	88 1f       	adc	r24, r24
 6bc:	da f7       	brpl	.-10     	; 0x6b4 <__floatsisf+0x62>
 6be:	88 0f       	add	r24, r24
 6c0:	96 95       	lsr	r25
 6c2:	87 95       	ror	r24
 6c4:	97 f9       	bld	r25, 7
 6c6:	08 95       	ret

000006c8 <__fp_inf>:
 6c8:	97 f9       	bld	r25, 7
 6ca:	9f 67       	ori	r25, 0x7F	; 127
 6cc:	80 e8       	ldi	r24, 0x80	; 128
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	08 95       	ret

000006d4 <__fp_nan>:
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	80 ec       	ldi	r24, 0xC0	; 192
 6d8:	08 95       	ret

000006da <__fp_pscA>:
 6da:	00 24       	eor	r0, r0
 6dc:	0a 94       	dec	r0
 6de:	16 16       	cp	r1, r22
 6e0:	17 06       	cpc	r1, r23
 6e2:	18 06       	cpc	r1, r24
 6e4:	09 06       	cpc	r0, r25
 6e6:	08 95       	ret

000006e8 <__fp_pscB>:
 6e8:	00 24       	eor	r0, r0
 6ea:	0a 94       	dec	r0
 6ec:	12 16       	cp	r1, r18
 6ee:	13 06       	cpc	r1, r19
 6f0:	14 06       	cpc	r1, r20
 6f2:	05 06       	cpc	r0, r21
 6f4:	08 95       	ret

000006f6 <__fp_round>:
 6f6:	09 2e       	mov	r0, r25
 6f8:	03 94       	inc	r0
 6fa:	00 0c       	add	r0, r0
 6fc:	11 f4       	brne	.+4      	; 0x702 <__fp_round+0xc>
 6fe:	88 23       	and	r24, r24
 700:	52 f0       	brmi	.+20     	; 0x716 <__fp_round+0x20>
 702:	bb 0f       	add	r27, r27
 704:	40 f4       	brcc	.+16     	; 0x716 <__fp_round+0x20>
 706:	bf 2b       	or	r27, r31
 708:	11 f4       	brne	.+4      	; 0x70e <__fp_round+0x18>
 70a:	60 ff       	sbrs	r22, 0
 70c:	04 c0       	rjmp	.+8      	; 0x716 <__fp_round+0x20>
 70e:	6f 5f       	subi	r22, 0xFF	; 255
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	08 95       	ret

00000718 <__fp_split3>:
 718:	57 fd       	sbrc	r21, 7
 71a:	90 58       	subi	r25, 0x80	; 128
 71c:	44 0f       	add	r20, r20
 71e:	55 1f       	adc	r21, r21
 720:	59 f0       	breq	.+22     	; 0x738 <__fp_splitA+0x10>
 722:	5f 3f       	cpi	r21, 0xFF	; 255
 724:	71 f0       	breq	.+28     	; 0x742 <__fp_splitA+0x1a>
 726:	47 95       	ror	r20

00000728 <__fp_splitA>:
 728:	88 0f       	add	r24, r24
 72a:	97 fb       	bst	r25, 7
 72c:	99 1f       	adc	r25, r25
 72e:	61 f0       	breq	.+24     	; 0x748 <__fp_splitA+0x20>
 730:	9f 3f       	cpi	r25, 0xFF	; 255
 732:	79 f0       	breq	.+30     	; 0x752 <__fp_splitA+0x2a>
 734:	87 95       	ror	r24
 736:	08 95       	ret
 738:	12 16       	cp	r1, r18
 73a:	13 06       	cpc	r1, r19
 73c:	14 06       	cpc	r1, r20
 73e:	55 1f       	adc	r21, r21
 740:	f2 cf       	rjmp	.-28     	; 0x726 <__fp_split3+0xe>
 742:	46 95       	lsr	r20
 744:	f1 df       	rcall	.-30     	; 0x728 <__fp_splitA>
 746:	08 c0       	rjmp	.+16     	; 0x758 <__fp_splitA+0x30>
 748:	16 16       	cp	r1, r22
 74a:	17 06       	cpc	r1, r23
 74c:	18 06       	cpc	r1, r24
 74e:	99 1f       	adc	r25, r25
 750:	f1 cf       	rjmp	.-30     	; 0x734 <__fp_splitA+0xc>
 752:	86 95       	lsr	r24
 754:	71 05       	cpc	r23, r1
 756:	61 05       	cpc	r22, r1
 758:	08 94       	sec
 75a:	08 95       	ret

0000075c <__fp_zero>:
 75c:	e8 94       	clt

0000075e <__fp_szero>:
 75e:	bb 27       	eor	r27, r27
 760:	66 27       	eor	r22, r22
 762:	77 27       	eor	r23, r23
 764:	cb 01       	movw	r24, r22
 766:	97 f9       	bld	r25, 7
 768:	08 95       	ret

0000076a <__mulsf3>:
 76a:	0e 94 c8 03 	call	0x790	; 0x790 <__mulsf3x>
 76e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_round>
 772:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_pscA>
 776:	38 f0       	brcs	.+14     	; 0x786 <__mulsf3+0x1c>
 778:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_pscB>
 77c:	20 f0       	brcs	.+8      	; 0x786 <__mulsf3+0x1c>
 77e:	95 23       	and	r25, r21
 780:	11 f0       	breq	.+4      	; 0x786 <__mulsf3+0x1c>
 782:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 786:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_nan>
 78a:	11 24       	eor	r1, r1
 78c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>

00000790 <__mulsf3x>:
 790:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_split3>
 794:	70 f3       	brcs	.-36     	; 0x772 <__mulsf3+0x8>

00000796 <__mulsf3_pse>:
 796:	95 9f       	mul	r25, r21
 798:	c1 f3       	breq	.-16     	; 0x78a <__mulsf3+0x20>
 79a:	95 0f       	add	r25, r21
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	55 1f       	adc	r21, r21
 7a0:	62 9f       	mul	r22, r18
 7a2:	f0 01       	movw	r30, r0
 7a4:	72 9f       	mul	r23, r18
 7a6:	bb 27       	eor	r27, r27
 7a8:	f0 0d       	add	r31, r0
 7aa:	b1 1d       	adc	r27, r1
 7ac:	63 9f       	mul	r22, r19
 7ae:	aa 27       	eor	r26, r26
 7b0:	f0 0d       	add	r31, r0
 7b2:	b1 1d       	adc	r27, r1
 7b4:	aa 1f       	adc	r26, r26
 7b6:	64 9f       	mul	r22, r20
 7b8:	66 27       	eor	r22, r22
 7ba:	b0 0d       	add	r27, r0
 7bc:	a1 1d       	adc	r26, r1
 7be:	66 1f       	adc	r22, r22
 7c0:	82 9f       	mul	r24, r18
 7c2:	22 27       	eor	r18, r18
 7c4:	b0 0d       	add	r27, r0
 7c6:	a1 1d       	adc	r26, r1
 7c8:	62 1f       	adc	r22, r18
 7ca:	73 9f       	mul	r23, r19
 7cc:	b0 0d       	add	r27, r0
 7ce:	a1 1d       	adc	r26, r1
 7d0:	62 1f       	adc	r22, r18
 7d2:	83 9f       	mul	r24, r19
 7d4:	a0 0d       	add	r26, r0
 7d6:	61 1d       	adc	r22, r1
 7d8:	22 1f       	adc	r18, r18
 7da:	74 9f       	mul	r23, r20
 7dc:	33 27       	eor	r19, r19
 7de:	a0 0d       	add	r26, r0
 7e0:	61 1d       	adc	r22, r1
 7e2:	23 1f       	adc	r18, r19
 7e4:	84 9f       	mul	r24, r20
 7e6:	60 0d       	add	r22, r0
 7e8:	21 1d       	adc	r18, r1
 7ea:	82 2f       	mov	r24, r18
 7ec:	76 2f       	mov	r23, r22
 7ee:	6a 2f       	mov	r22, r26
 7f0:	11 24       	eor	r1, r1
 7f2:	9f 57       	subi	r25, 0x7F	; 127
 7f4:	50 40       	sbci	r21, 0x00	; 0
 7f6:	9a f0       	brmi	.+38     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f8:	f1 f0       	breq	.+60     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7fa:	88 23       	and	r24, r24
 7fc:	4a f0       	brmi	.+18     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	bb 1f       	adc	r27, r27
 804:	66 1f       	adc	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	91 50       	subi	r25, 0x01	; 1
 80c:	50 40       	sbci	r21, 0x00	; 0
 80e:	a9 f7       	brne	.-22     	; 0x7fa <__mulsf3_pse+0x64>
 810:	9e 3f       	cpi	r25, 0xFE	; 254
 812:	51 05       	cpc	r21, r1
 814:	80 f0       	brcs	.+32     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 816:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 81a:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>
 81e:	5f 3f       	cpi	r21, 0xFF	; 255
 820:	e4 f3       	brlt	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 822:	98 3e       	cpi	r25, 0xE8	; 232
 824:	d4 f3       	brlt	.-12     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 826:	86 95       	lsr	r24
 828:	77 95       	ror	r23
 82a:	67 95       	ror	r22
 82c:	b7 95       	ror	r27
 82e:	f7 95       	ror	r31
 830:	e7 95       	ror	r30
 832:	9f 5f       	subi	r25, 0xFF	; 255
 834:	c1 f7       	brne	.-16     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 836:	fe 2b       	or	r31, r30
 838:	88 0f       	add	r24, r24
 83a:	91 1d       	adc	r25, r1
 83c:	96 95       	lsr	r25
 83e:	87 95       	ror	r24
 840:	97 f9       	bld	r25, 7
 842:	08 95       	ret

00000844 <_exit>:
 844:	f8 94       	cli

00000846 <__stop_program>:
 846:	ff cf       	rjmp	.-2      	; 0x846 <__stop_program>
