
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000548  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000548  000005dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  000005e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001750  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5a  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b83  00000000  00000000  00002992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00003518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac0  00000000  00000000  00003894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c71  00000000  00000000  00004354  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004fc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_1>
   8:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_2>
   c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  8a:	0c 94 a2 02 	jmp	0x544	; 0x544 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HLED_HLed_t_Create>:

#include "LED_config.h"
#include "LED_interface.h"
#include "LED_private.h"

HLed_t HLED_HLed_t_Create(Pin_t A_Pin_t_pin, HLedPolarity_t A_HLedPolarity_t_polarity){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	d6 2f       	mov	r29, r22
	HLed_t L_led ;
	
	L_led.pin = A_Pin_t_pin;
	L_led.polarity = A_HLedPolarity_t_polarity;
	
	MDIO_voidSetPinDir(A_Pin_t_pin,OUTPUT);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <MDIO_voidSetPinDir>
	
	return L_led;
}
  a0:	8c 2f       	mov	r24, r28
  a2:	9d 2f       	mov	r25, r29
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <HLED_void_TurnOn>:

void HLED_void_TurnOn(HLed_t *A_Pin_t_pin){
	switch(A_Pin_t_pin->polarity){
  aa:	fc 01       	movw	r30, r24
  ac:	21 81       	ldd	r18, Z+1	; 0x01
  ae:	22 23       	and	r18, r18
  b0:	39 f0       	breq	.+14     	; 0xc0 <HLED_void_TurnOn+0x16>
  b2:	21 30       	cpi	r18, 0x01	; 1
  b4:	51 f4       	brne	.+20     	; 0xca <HLED_void_TurnOn+0x20>
		case HLED_ActiveHigh:
			MDIO_voidSetPinVal(A_Pin_t_pin->pin,HIGH); break;
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	80 81       	ld	r24, Z
  ba:	0e 94 cf 01 	call	0x39e	; 0x39e <MDIO_voidSetPinVal>
  be:	08 95       	ret
		case HLED_ActiveLow:
			MDIO_voidSetPinVal(A_Pin_t_pin->pin,LOW); break;	
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	80 81       	ld	r24, Z
  c6:	0e 94 cf 01 	call	0x39e	; 0x39e <MDIO_voidSetPinVal>
  ca:	08 95       	ret

000000cc <HLED_void_TurnOff>:
	}
}

	
void HLED_void_TurnOff(HLed_t *A_Pin_t_pin){
	switch(A_Pin_t_pin->polarity){
  cc:	fc 01       	movw	r30, r24
  ce:	21 81       	ldd	r18, Z+1	; 0x01
  d0:	22 23       	and	r18, r18
  d2:	39 f0       	breq	.+14     	; 0xe2 <HLED_void_TurnOff+0x16>
  d4:	21 30       	cpi	r18, 0x01	; 1
  d6:	51 f4       	brne	.+20     	; 0xec <HLED_void_TurnOff+0x20>
		case HLED_ActiveHigh:
		MDIO_voidSetPinVal(A_Pin_t_pin->pin,LOW); break;
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	0e 94 cf 01 	call	0x39e	; 0x39e <MDIO_voidSetPinVal>
  e0:	08 95       	ret
		case HLED_ActiveLow:
		MDIO_voidSetPinVal(A_Pin_t_pin->pin,HIGH); break;
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	fc 01       	movw	r30, r24
  e6:	80 81       	ld	r24, Z
  e8:	0e 94 cf 01 	call	0x39e	; 0x39e <MDIO_voidSetPinVal>
  ec:	08 95       	ret

000000ee <callback2>:


u8 G_u8_AnimNo = 0;

void callback2(void){
	G_u8_AnimNo = (G_u8_AnimNo+1)%2;
  ee:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	90 78       	andi	r25, 0x80	; 128
  fa:	99 23       	and	r25, r25
  fc:	24 f4       	brge	.+8      	; 0x106 <callback2+0x18>
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	8e 6f       	ori	r24, 0xFE	; 254
 102:	9f 6f       	ori	r25, 0xFF	; 255
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 10a:	08 95       	ret

0000010c <main>:
}



int main(void)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	68 97       	sbiw	r28, 0x18	; 24
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8_temp;
	Pin_t L_Pin_t_ledspins[8] = {PinC0,PinC1,PinC2,PinC3,PinC4,PinC5,PinC6,PinC7};
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	e0 e6       	ldi	r30, 0x60	; 96
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	de 01       	movw	r26, r28
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	01 90       	ld	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	8a 95       	dec	r24
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x1e>
	HLed_t LHLed_t_ledsArr[8];
	
	MGI_void_Enable();
 132:	0e 94 9e 02 	call	0x53c	; 0x53c <MGI_void_Enable>
	
	MEXT_INT_2_voidInit();
 136:	0e 94 08 02 	call	0x410	; 0x410 <MEXT_INT_2_voidInit>
	MEXT_INT_2_voidEnable();
 13a:	0e 94 0d 02 	call	0x41a	; 0x41a <MEXT_INT_2_voidEnable>
	MEXT_INT_2_voidSenseControl(MEXT_INT_1_Sense_RisingEdge);
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	0e 94 11 02 	call	0x422	; 0x422 <MEXT_INT_2_voidSenseControl>
	MEXT_INT_2_voidSetCallback(callback2);
 144:	87 e7       	ldi	r24, 0x77	; 119
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 1e 02 	call	0x43c	; 0x43c <MEXT_INT_2_voidSetCallback>

	for (L_u8_temp =0;L_u8_temp<8;L_u8_temp++)
 14c:	f1 2c       	mov	r15, r1
 14e:	18 c0       	rjmp	.+48     	; 0x180 <main+0x74>
	{
		LHLed_t_ledsArr[L_u8_temp] = HLED_HLed_t_Create(L_Pin_t_ledspins[L_u8_temp],HLED_ActiveHigh);
 150:	8f 2d       	mov	r24, r15
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	e1 e0       	ldi	r30, 0x01	; 1
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ec 0f       	add	r30, r28
 15a:	fd 1f       	adc	r31, r29
 15c:	e8 0f       	add	r30, r24
 15e:	f9 1f       	adc	r31, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	01 e0       	ldi	r16, 0x01	; 1
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	0c 0f       	add	r16, r28
 16a:	1d 1f       	adc	r17, r29
 16c:	08 0f       	add	r16, r24
 16e:	19 1f       	adc	r17, r25
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	80 81       	ld	r24, Z
 174:	0e 94 49 00 	call	0x92	; 0x92 <HLED_HLed_t_Create>
 178:	f8 01       	movw	r30, r16
 17a:	91 87       	std	Z+9, r25	; 0x09
 17c:	80 87       	std	Z+8, r24	; 0x08
	MEXT_INT_2_voidInit();
	MEXT_INT_2_voidEnable();
	MEXT_INT_2_voidSenseControl(MEXT_INT_1_Sense_RisingEdge);
	MEXT_INT_2_voidSetCallback(callback2);

	for (L_u8_temp =0;L_u8_temp<8;L_u8_temp++)
 17e:	f3 94       	inc	r15
 180:	f7 e0       	ldi	r31, 0x07	; 7
 182:	ff 15       	cp	r31, r15
 184:	28 f7       	brcc	.-54     	; 0x150 <main+0x44>
 186:	00 e0       	ldi	r16, 0x00	; 0

		

	L_u8_temp = 0;
	while(1){
		if(G_u8_AnimNo == 0){
 188:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 18c:	81 11       	cpse	r24, r1
 18e:	23 c0       	rjmp	.+70     	; 0x1d6 <main+0xca>
			HLED_void_TurnOff(&LHLed_t_ledsArr[L_u8_temp]);
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	c8 01       	movw	r24, r16
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	29 e0       	ldi	r18, 0x09	; 9
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	2c 0f       	add	r18, r28
 19e:	3d 1f       	adc	r19, r29
 1a0:	82 0f       	add	r24, r18
 1a2:	93 1f       	adc	r25, r19
 1a4:	0e 94 66 00 	call	0xcc	; 0xcc <HLED_void_TurnOff>
			
			L_u8_temp = (L_u8_temp+1)%8;
 1a8:	c8 01       	movw	r24, r16
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	87 70       	andi	r24, 0x07	; 7
 1ae:	90 78       	andi	r25, 0x80	; 128
 1b0:	99 23       	and	r25, r25
 1b2:	24 f4       	brge	.+8      	; 0x1bc <main+0xb0>
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	88 6f       	ori	r24, 0xF8	; 248
 1b8:	9f 6f       	ori	r25, 0xFF	; 255
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	08 2f       	mov	r16, r24
			
			HLED_void_TurnOn(&LHLed_t_ledsArr[L_u8_temp]);
 1be:	99 27       	eor	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	e9 e0       	ldi	r30, 0x09	; 9
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	ec 0f       	add	r30, r28
 1ca:	fd 1f       	adc	r31, r29
 1cc:	8e 0f       	add	r24, r30
 1ce:	9f 1f       	adc	r25, r31
 1d0:	0e 94 55 00 	call	0xaa	; 0xaa <HLED_void_TurnOn>
 1d4:	40 c0       	rjmp	.+128    	; 0x256 <main+0x14a>
			
		}else{
			HLED_void_TurnOff(&LHLed_t_ledsArr[L_u8_temp]);
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	c8 01       	movw	r24, r16
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	29 e0       	ldi	r18, 0x09	; 9
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	2c 0f       	add	r18, r28
 1e4:	3d 1f       	adc	r19, r29
 1e6:	82 0f       	add	r24, r18
 1e8:	93 1f       	adc	r25, r19
 1ea:	0e 94 66 00 	call	0xcc	; 0xcc <HLED_void_TurnOff>
			HLED_void_TurnOff(&LHLed_t_ledsArr[7 - L_u8_temp]);
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	80 1b       	sub	r24, r16
 1f4:	91 0b       	sbc	r25, r17
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	e9 e0       	ldi	r30, 0x09	; 9
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ec 0f       	add	r30, r28
 200:	fd 1f       	adc	r31, r29
 202:	8e 0f       	add	r24, r30
 204:	9f 1f       	adc	r25, r31
 206:	0e 94 66 00 	call	0xcc	; 0xcc <HLED_void_TurnOff>
			
			L_u8_temp = (L_u8_temp+1)%4;
 20a:	c8 01       	movw	r24, r16
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	83 70       	andi	r24, 0x03	; 3
 210:	90 78       	andi	r25, 0x80	; 128
 212:	99 23       	and	r25, r25
 214:	24 f4       	brge	.+8      	; 0x21e <main+0x112>
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	8c 6f       	ori	r24, 0xFC	; 252
 21a:	9f 6f       	ori	r25, 0xFF	; 255
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	08 2f       	mov	r16, r24
 220:	7c 01       	movw	r14, r24
 222:	ff 24       	eor	r15, r15

			HLED_void_TurnOn(&LHLed_t_ledsArr[L_u8_temp]);
 224:	c7 01       	movw	r24, r14
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	29 e0       	ldi	r18, 0x09	; 9
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	2c 0f       	add	r18, r28
 230:	3d 1f       	adc	r19, r29
 232:	82 0f       	add	r24, r18
 234:	93 1f       	adc	r25, r19
 236:	0e 94 55 00 	call	0xaa	; 0xaa <HLED_void_TurnOn>
			HLED_void_TurnOn(&LHLed_t_ledsArr[7 - L_u8_temp]);
 23a:	87 e0       	ldi	r24, 0x07	; 7
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	8e 19       	sub	r24, r14
 240:	9f 09       	sbc	r25, r15
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	e9 e0       	ldi	r30, 0x09	; 9
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	ec 0f       	add	r30, r28
 24c:	fd 1f       	adc	r31, r29
 24e:	8e 0f       	add	r24, r30
 250:	9f 1f       	adc	r25, r31
 252:	0e 94 55 00 	call	0xaa	; 0xaa <HLED_void_TurnOn>
		}
		
		MDELAY_void_milli(400);
 256:	60 e9       	ldi	r22, 0x90	; 144
 258:	71 e0       	ldi	r23, 0x01	; 1
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 32 01 	call	0x264	; 0x264 <MDELAY_void_milli>
	}
 262:	92 cf       	rjmp	.-220    	; 0x188 <main+0x7c>

00000264 <MDELAY_void_milli>:
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 264:	41 c0       	rjmp	.+130    	; 0x2e8 <MDELAY_void_milli+0x84>
		if(A_u32_ms >= 1000){
 266:	68 3e       	cpi	r22, 0xE8	; 232
 268:	23 e0       	ldi	r18, 0x03	; 3
 26a:	72 07       	cpc	r23, r18
 26c:	81 05       	cpc	r24, r1
 26e:	91 05       	cpc	r25, r1
 270:	70 f0       	brcs	.+28     	; 0x28e <MDELAY_void_milli+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	3f ef       	ldi	r19, 0xFF	; 255
 274:	49 e6       	ldi	r20, 0x69	; 105
 276:	e8 e1       	ldi	r30, 0x18	; 24
 278:	31 50       	subi	r19, 0x01	; 1
 27a:	40 40       	sbci	r20, 0x00	; 0
 27c:	e0 40       	sbci	r30, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <MDELAY_void_milli+0x14>
 280:	00 c0       	rjmp	.+0      	; 0x282 <MDELAY_void_milli+0x1e>
 282:	00 00       	nop
			_delay_ms(1000);
			A_u32_ms -= 1000;
 284:	68 5e       	subi	r22, 0xE8	; 232
 286:	73 40       	sbci	r23, 0x03	; 3
 288:	81 09       	sbc	r24, r1
 28a:	91 09       	sbc	r25, r1
 28c:	2d c0       	rjmp	.+90     	; 0x2e8 <MDELAY_void_milli+0x84>
		}
		else if(A_u32_ms >= 100){
 28e:	64 36       	cpi	r22, 0x64	; 100
 290:	71 05       	cpc	r23, r1
 292:	81 05       	cpc	r24, r1
 294:	91 05       	cpc	r25, r1
 296:	70 f0       	brcs	.+28     	; 0x2b4 <MDELAY_void_milli+0x50>
 298:	ff ef       	ldi	r31, 0xFF	; 255
 29a:	20 e7       	ldi	r18, 0x70	; 112
 29c:	32 e0       	ldi	r19, 0x02	; 2
 29e:	f1 50       	subi	r31, 0x01	; 1
 2a0:	20 40       	sbci	r18, 0x00	; 0
 2a2:	30 40       	sbci	r19, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <MDELAY_void_milli+0x3a>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <MDELAY_void_milli+0x44>
 2a8:	00 00       	nop
			_delay_ms(100);
			A_u32_ms -= 100;
 2aa:	64 56       	subi	r22, 0x64	; 100
 2ac:	71 09       	sbc	r23, r1
 2ae:	81 09       	sbc	r24, r1
 2b0:	91 09       	sbc	r25, r1
 2b2:	1a c0       	rjmp	.+52     	; 0x2e8 <MDELAY_void_milli+0x84>
		}else if(A_u32_ms >= 10){
 2b4:	6a 30       	cpi	r22, 0x0A	; 10
 2b6:	71 05       	cpc	r23, r1
 2b8:	81 05       	cpc	r24, r1
 2ba:	91 05       	cpc	r25, r1
 2bc:	58 f0       	brcs	.+22     	; 0x2d4 <MDELAY_void_milli+0x70>
 2be:	ef e1       	ldi	r30, 0x1F	; 31
 2c0:	fe e4       	ldi	r31, 0x4E	; 78
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <MDELAY_void_milli+0x5e>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <MDELAY_void_milli+0x64>
 2c8:	00 00       	nop
			_delay_ms(10);
			A_u32_ms -= 10;
 2ca:	6a 50       	subi	r22, 0x0A	; 10
 2cc:	71 09       	sbc	r23, r1
 2ce:	81 09       	sbc	r24, r1
 2d0:	91 09       	sbc	r25, r1
 2d2:	0a c0       	rjmp	.+20     	; 0x2e8 <MDELAY_void_milli+0x84>
 2d4:	ef ec       	ldi	r30, 0xCF	; 207
 2d6:	f7 e0       	ldi	r31, 0x07	; 7
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <MDELAY_void_milli+0x74>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <MDELAY_void_milli+0x7a>
 2de:	00 00       	nop
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
 2e0:	61 50       	subi	r22, 0x01	; 1
 2e2:	71 09       	sbc	r23, r1
 2e4:	81 09       	sbc	r24, r1
 2e6:	91 09       	sbc	r25, r1
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 2e8:	61 15       	cp	r22, r1
 2ea:	71 05       	cpc	r23, r1
 2ec:	81 05       	cpc	r24, r1
 2ee:	91 05       	cpc	r25, r1
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <MDELAY_void_milli+0x90>
 2f2:	b9 cf       	rjmp	.-142    	; 0x266 <MDELAY_void_milli+0x2>
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
		}
	}
}
 2f4:	08 95       	ret

000002f6 <MDIO_voidSetPinDir>:
	#endif
}


void MDIO_voidSetPinDir(Pin_t A_Pin_tPin, u8 A_u8Dir){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 2f6:	98 2f       	mov	r25, r24
 2f8:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 2fa:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 2fc:	90 3b       	cpi	r25, 0xB0	; 176
 2fe:	49 f0       	breq	.+18     	; 0x312 <MDIO_voidSetPinDir+0x1c>
 300:	18 f4       	brcc	.+6      	; 0x308 <MDIO_voidSetPinDir+0x12>
 302:	90 3a       	cpi	r25, 0xA0	; 160
 304:	a9 f0       	breq	.+42     	; 0x330 <MDIO_voidSetPinDir+0x3a>
 306:	18 c0       	rjmp	.+48     	; 0x338 <MDIO_voidSetPinDir+0x42>
 308:	90 3c       	cpi	r25, 0xC0	; 192
 30a:	41 f0       	breq	.+16     	; 0x31c <MDIO_voidSetPinDir+0x26>
 30c:	90 3d       	cpi	r25, 0xD0	; 208
 30e:	59 f0       	breq	.+22     	; 0x326 <MDIO_voidSetPinDir+0x30>
 310:	13 c0       	rjmp	.+38     	; 0x338 <MDIO_voidSetPinDir+0x42>
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
			break;
		case MDIO_PORT_B_NUM:
						L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 312:	a8 e3       	ldi	r26, 0x38	; 56
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	e7 e3       	ldi	r30, 0x37	; 55
 318:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 31a:	0e c0       	rjmp	.+28     	; 0x338 <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_C_NUM:
						L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 31c:	a5 e3       	ldi	r26, 0x35	; 53
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	e4 e3       	ldi	r30, 0x34	; 52
 322:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 324:	09 c0       	rjmp	.+18     	; 0x338 <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_D_NUM:
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 326:	a2 e3       	ldi	r26, 0x32	; 50
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e1 e3       	ldi	r30, 0x31	; 49
 32c:	f0 e0       	ldi	r31, 0x00	; 0

			break;
 32e:	04 c0       	rjmp	.+8      	; 0x338 <MDIO_voidSetPinDir+0x42>
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 330:	ab e3       	ldi	r26, 0x3B	; 59
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	ea e3       	ldi	r30, 0x3A	; 58
 336:	f0 e0       	ldi	r31, 0x00	; 0
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

			break;
		}
		
		switch(A_u8Dir){
 338:	61 30       	cpi	r22, 0x01	; 1
 33a:	91 f0       	breq	.+36     	; 0x360 <MDIO_voidSetPinDir+0x6a>
 33c:	18 f0       	brcs	.+6      	; 0x344 <MDIO_voidSetPinDir+0x4e>
 33e:	62 30       	cpi	r22, 0x02	; 2
 340:	e1 f0       	breq	.+56     	; 0x37a <MDIO_voidSetPinDir+0x84>
 342:	08 95       	ret
			case INPUT: 
				CLR_BIT(*L_dirReg,L_pinNum) ;
 344:	40 81       	ld	r20, Z
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <MDIO_voidSetPinDir+0x5c>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	8a 95       	dec	r24
 354:	e2 f7       	brpl	.-8      	; 0x34e <MDIO_voidSetPinDir+0x58>
 356:	cb 01       	movw	r24, r22
 358:	80 95       	com	r24
 35a:	84 23       	and	r24, r20
 35c:	80 83       	st	Z, r24
				break;
 35e:	08 95       	ret
			case OUTPUT: 
				SET_BIT(*L_dirReg,L_pinNum) ;
 360:	40 81       	ld	r20, Z
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	b9 01       	movw	r22, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <MDIO_voidSetPinDir+0x78>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	8a 95       	dec	r24
 370:	e2 f7       	brpl	.-8      	; 0x36a <MDIO_voidSetPinDir+0x74>
 372:	cb 01       	movw	r24, r22
 374:	84 2b       	or	r24, r20
 376:	80 83       	st	Z, r24
				break;
 378:	08 95       	ret
			case INPUT_PULL_UP: 
				CLR_BIT(*L_dirReg,L_pinNum);
 37a:	40 81       	ld	r20, Z
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	b9 01       	movw	r22, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <MDIO_voidSetPinDir+0x92>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	8a 95       	dec	r24
 38a:	e2 f7       	brpl	.-8      	; 0x384 <MDIO_voidSetPinDir+0x8e>
 38c:	cb 01       	movw	r24, r22
 38e:	96 2f       	mov	r25, r22
 390:	90 95       	com	r25
 392:	94 23       	and	r25, r20
 394:	90 83       	st	Z, r25
				SET_BIT(*L_valReg,L_pinNum);
 396:	9c 91       	ld	r25, X
 398:	89 2b       	or	r24, r25
 39a:	8c 93       	st	X, r24
 39c:	08 95       	ret

0000039e <MDIO_voidSetPinVal>:
				break;
		}
	
}
void MDIO_voidSetPinVal(Pin_t A_Pin_tPin, u8 A_u8Val){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 39e:	98 2f       	mov	r25, r24
 3a0:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 3a2:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 3a4:	90 3b       	cpi	r25, 0xB0	; 176
 3a6:	49 f0       	breq	.+18     	; 0x3ba <MDIO_voidSetPinVal+0x1c>
 3a8:	18 f4       	brcc	.+6      	; 0x3b0 <MDIO_voidSetPinVal+0x12>
 3aa:	90 3a       	cpi	r25, 0xA0	; 160
 3ac:	79 f0       	breq	.+30     	; 0x3cc <MDIO_voidSetPinVal+0x2e>
 3ae:	10 c0       	rjmp	.+32     	; 0x3d0 <MDIO_voidSetPinVal+0x32>
 3b0:	90 3c       	cpi	r25, 0xC0	; 192
 3b2:	31 f0       	breq	.+12     	; 0x3c0 <MDIO_voidSetPinVal+0x22>
 3b4:	90 3d       	cpi	r25, 0xD0	; 208
 3b6:	39 f0       	breq	.+14     	; 0x3c6 <MDIO_voidSetPinVal+0x28>
 3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <MDIO_voidSetPinVal+0x32>
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
		break;
		case MDIO_PORT_B_NUM:
		L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 3ba:	e8 e3       	ldi	r30, 0x38	; 56
 3bc:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 3be:	08 c0       	rjmp	.+16     	; 0x3d0 <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_C_NUM:
		L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 3c0:	e5 e3       	ldi	r30, 0x35	; 53
 3c2:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_D_NUM:
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 3c6:	e2 e3       	ldi	r30, 0x32	; 50
 3c8:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <MDIO_voidSetPinVal+0x32>
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 3cc:	eb e3       	ldi	r30, 0x3B	; 59
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

		break;
	}
	
	switch(A_u8Val){
 3d0:	66 23       	and	r22, r22
 3d2:	19 f0       	breq	.+6      	; 0x3da <MDIO_voidSetPinVal+0x3c>
 3d4:	61 30       	cpi	r22, 0x01	; 1
 3d6:	79 f0       	breq	.+30     	; 0x3f6 <MDIO_voidSetPinVal+0x58>
 3d8:	08 95       	ret
		case LOW:
		CLR_BIT(*L_valReg,L_pinNum) ;
 3da:	40 81       	ld	r20, Z
 3dc:	21 e0       	ldi	r18, 0x01	; 1
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	b9 01       	movw	r22, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <MDIO_voidSetPinVal+0x4a>
 3e4:	66 0f       	add	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	8a 95       	dec	r24
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <MDIO_voidSetPinVal+0x46>
 3ec:	cb 01       	movw	r24, r22
 3ee:	80 95       	com	r24
 3f0:	84 23       	and	r24, r20
 3f2:	80 83       	st	Z, r24
		break;
 3f4:	08 95       	ret
		case HIGH:
		SET_BIT(*L_valReg,L_pinNum) ;
 3f6:	40 81       	ld	r20, Z
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	b9 01       	movw	r22, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	8a 95       	dec	r24
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	cb 01       	movw	r24, r22
 40a:	84 2b       	or	r24, r20
 40c:	80 83       	st	Z, r24
 40e:	08 95       	ret

00000410 <MEXT_INT_2_voidInit>:
void MEXT_INT_2_voidEnable(void){
		SET_BIT(GICR_REG,GICR_INT2_BIT);
}

void MEXT_INT_2_voidDisable(void){
		CLR_BIT(GICR_REG,GICR_INT2_BIT);
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	82 eb       	ldi	r24, 0xB2	; 178
 414:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <MDIO_voidSetPinDir>
 418:	08 95       	ret

0000041a <MEXT_INT_2_voidEnable>:
 41a:	8b b7       	in	r24, 0x3b	; 59
 41c:	80 62       	ori	r24, 0x20	; 32
 41e:	8b bf       	out	0x3b, r24	; 59
 420:	08 95       	ret

00000422 <MEXT_INT_2_voidSenseControl>:
}

void MEXT_INT_2_voidSenseControl(MEXT_INT_2_Sense_Control_t A_MEXT_INT_2_Sense_Control_t_control){
	switch(A_MEXT_INT_2_Sense_Control_t_control){
 422:	88 23       	and	r24, r24
 424:	19 f0       	breq	.+6      	; 0x42c <MEXT_INT_2_voidSenseControl+0xa>
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	29 f0       	breq	.+10     	; 0x434 <MEXT_INT_2_voidSenseControl+0x12>
 42a:	08 95       	ret
		case MEXT_INT_2_Sense_FallingEdge:
		CLR_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT);
 42c:	84 b7       	in	r24, 0x34	; 52
 42e:	8f 7b       	andi	r24, 0xBF	; 191
 430:	84 bf       	out	0x34, r24	; 52
		break;
 432:	08 95       	ret

		case MEXT_INT_2_Sense_RisingEdge:
		SET_BIT(MCUCSR_REG,MCUCSR_ISC2_BIT);
 434:	84 b7       	in	r24, 0x34	; 52
 436:	80 64       	ori	r24, 0x40	; 64
 438:	84 bf       	out	0x34, r24	; 52
 43a:	08 95       	ret

0000043c <MEXT_INT_2_voidSetCallback>:
		break;
	}
}

void MEXT_INT_2_voidSetCallback( ptr2voidCallback A_ptr2voidCallback_callBack ){
			G_ptr2voidCallback_INT_2_callBack = A_ptr2voidCallback_callBack;
 43c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <G_ptr2voidCallback_INT_2_callBack+0x1>
 440:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <G_ptr2voidCallback_INT_2_callBack>
 444:	08 95       	ret

00000446 <__vector_1>:




void __vector_1 (void) __attribute__ ((signal,used, externally_visible));
void __vector_1 (void){
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_0_callBack != NULL){
 468:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <G_ptr2voidCallback_INT_0_callBack>
 46c:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <G_ptr2voidCallback_INT_0_callBack+0x1>
 470:	30 97       	sbiw	r30, 0x00	; 0
 472:	09 f0       	breq	.+2      	; 0x476 <__vector_1+0x30>
		G_ptr2voidCallback_INT_0_callBack();
 474:	09 95       	icall
	}
}
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <__vector_2>:


void __vector_2 (void) __attribute__ ((signal,used, externally_visible));
void __vector_2 (void){
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	2f 93       	push	r18
 4a4:	3f 93       	push	r19
 4a6:	4f 93       	push	r20
 4a8:	5f 93       	push	r21
 4aa:	6f 93       	push	r22
 4ac:	7f 93       	push	r23
 4ae:	8f 93       	push	r24
 4b0:	9f 93       	push	r25
 4b2:	af 93       	push	r26
 4b4:	bf 93       	push	r27
 4b6:	ef 93       	push	r30
 4b8:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_1_callBack != NULL){
 4ba:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <G_ptr2voidCallback_INT_1_callBack>
 4be:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <G_ptr2voidCallback_INT_1_callBack+0x1>
 4c2:	30 97       	sbiw	r30, 0x00	; 0
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__vector_2+0x30>
		G_ptr2voidCallback_INT_1_callBack();
 4c6:	09 95       	icall
	}
}
 4c8:	ff 91       	pop	r31
 4ca:	ef 91       	pop	r30
 4cc:	bf 91       	pop	r27
 4ce:	af 91       	pop	r26
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	7f 91       	pop	r23
 4d6:	6f 91       	pop	r22
 4d8:	5f 91       	pop	r21
 4da:	4f 91       	pop	r20
 4dc:	3f 91       	pop	r19
 4de:	2f 91       	pop	r18
 4e0:	0f 90       	pop	r0
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	0f 90       	pop	r0
 4e6:	1f 90       	pop	r1
 4e8:	18 95       	reti

000004ea <__vector_3>:


void __vector_3 (void) __attribute__ ((signal,used, externally_visible));
void __vector_3 (void){
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
 4f4:	2f 93       	push	r18
 4f6:	3f 93       	push	r19
 4f8:	4f 93       	push	r20
 4fa:	5f 93       	push	r21
 4fc:	6f 93       	push	r22
 4fe:	7f 93       	push	r23
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	af 93       	push	r26
 506:	bf 93       	push	r27
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_2_callBack != NULL){
 50c:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <G_ptr2voidCallback_INT_2_callBack>
 510:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <G_ptr2voidCallback_INT_2_callBack+0x1>
 514:	30 97       	sbiw	r30, 0x00	; 0
 516:	09 f0       	breq	.+2      	; 0x51a <__vector_3+0x30>
		G_ptr2voidCallback_INT_2_callBack();
 518:	09 95       	icall
	}
 51a:	ff 91       	pop	r31
 51c:	ef 91       	pop	r30
 51e:	bf 91       	pop	r27
 520:	af 91       	pop	r26
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	7f 91       	pop	r23
 528:	6f 91       	pop	r22
 52a:	5f 91       	pop	r21
 52c:	4f 91       	pop	r20
 52e:	3f 91       	pop	r19
 530:	2f 91       	pop	r18
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <MGI_void_Enable>:
#include "GI_config.h"
#include "GI_interface.h"
#include "GI_private.h"

void MGI_void_Enable(void){
	SET_BIT(SREG_REG,SREG_I_BIT);	
 53c:	8f b7       	in	r24, 0x3f	; 63
 53e:	80 68       	ori	r24, 0x80	; 128
 540:	8f bf       	out	0x3f, r24	; 63
 542:	08 95       	ret

00000544 <_exit>:
 544:	f8 94       	cli

00000546 <__stop_program>:
 546:	ff cf       	rjmp	.-2      	; 0x546 <__stop_program>
