
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000007ba  0000082e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e49  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000098e  00000000  00000000  0000283d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bbb  00000000  00000000  000031cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000041c  00000000  00000000  00003d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ac  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001574  00000000  00000000  00004a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00005fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 06 02 	call	0x40c	; 0x40c <main>
  7a:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HLCD_void_send>:
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'0'+  L_s32_ReversedNum%10);
		L_s32_ReversedNum = L_s32_ReversedNum / 10;
		L_digitsCounter--;
	}
	
}
  82:	af 92       	push	r10
  84:	bf 92       	push	r11
  86:	cf 92       	push	r12
  88:	df 92       	push	r13
  8a:	ef 92       	push	r14
  8c:	ff 92       	push	r15
  8e:	0f 93       	push	r16
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
  98:	b6 2e       	mov	r11, r22
  9a:	a2 2e       	mov	r10, r18
  9c:	67 01       	movw	r12, r14
  9e:	78 01       	movw	r14, r16
  a0:	64 2f       	mov	r22, r20
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
  a8:	6a 2d       	mov	r22, r10
  aa:	8a 81       	ldd	r24, Y+2	; 0x02
  ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
  b0:	88 81       	ld	r24, Y
  b2:	85 fd       	sbrc	r24, 5
  b4:	18 c0       	rjmp	.+48     	; 0xe6 <HLCD_void_send+0x64>
  b6:	29 c0       	rjmp	.+82     	; 0x10a <HLCD_void_send+0x88>
  b8:	21 2f       	mov	r18, r17
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	47 e0       	ldi	r20, 0x07	; 7
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	42 1b       	sub	r20, r18
  c2:	53 0b       	sbc	r21, r19
  c4:	8b 2d       	mov	r24, r11
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <HLCD_void_send+0x4c>
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	4a 95       	dec	r20
  d0:	e2 f7       	brpl	.-8      	; 0xca <HLCD_void_send+0x48>
  d2:	68 2f       	mov	r22, r24
  d4:	61 70       	andi	r22, 0x01	; 1
  d6:	fe 01       	movw	r30, r28
  d8:	e2 0f       	add	r30, r18
  da:	f3 1f       	adc	r31, r19
  dc:	84 81       	ldd	r24, Z+4	; 0x04
  de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
  e2:	1f 5f       	subi	r17, 0xFF	; 255
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <HLCD_void_send+0x66>
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	18 30       	cpi	r17, 0x08	; 8
  ea:	30 f3       	brcs	.-52     	; 0xb8 <HLCD_void_send+0x36>
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	8b 81       	ldd	r24, Y+3	; 0x03
  f0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
  f4:	68 ee       	ldi	r22, 0xE8	; 232
  f6:	73 e0       	ldi	r23, 0x03	; 3
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <MDELAY_void_micro>
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	8b 81       	ldd	r24, Y+3	; 0x03
 104:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 108:	52 c0       	rjmp	.+164    	; 0x1ae <HLCD_void_send+0x12c>
 10a:	6b 2d       	mov	r22, r11
 10c:	66 1f       	adc	r22, r22
 10e:	66 27       	eor	r22, r22
 110:	66 1f       	adc	r22, r22
 112:	8c 81       	ldd	r24, Y+4	; 0x04
 114:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 118:	b6 fa       	bst	r11, 6
 11a:	66 27       	eor	r22, r22
 11c:	60 f9       	bld	r22, 0
 11e:	8d 81       	ldd	r24, Y+5	; 0x05
 120:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 124:	b5 fa       	bst	r11, 5
 126:	66 27       	eor	r22, r22
 128:	60 f9       	bld	r22, 0
 12a:	8e 81       	ldd	r24, Y+6	; 0x06
 12c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 130:	b4 fa       	bst	r11, 4
 132:	66 27       	eor	r22, r22
 134:	60 f9       	bld	r22, 0
 136:	8f 81       	ldd	r24, Y+7	; 0x07
 138:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 144:	68 ee       	ldi	r22, 0xE8	; 232
 146:	73 e0       	ldi	r23, 0x03	; 3
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <MDELAY_void_micro>
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 158:	68 ee       	ldi	r22, 0xE8	; 232
 15a:	73 e0       	ldi	r23, 0x03	; 3
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <MDELAY_void_micro>
 164:	b3 fa       	bst	r11, 3
 166:	66 27       	eor	r22, r22
 168:	60 f9       	bld	r22, 0
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 170:	b2 fa       	bst	r11, 2
 172:	66 27       	eor	r22, r22
 174:	60 f9       	bld	r22, 0
 176:	8d 81       	ldd	r24, Y+5	; 0x05
 178:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 17c:	b1 fa       	bst	r11, 1
 17e:	66 27       	eor	r22, r22
 180:	60 f9       	bld	r22, 0
 182:	8e 81       	ldd	r24, Y+6	; 0x06
 184:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 188:	6b 2d       	mov	r22, r11
 18a:	61 70       	andi	r22, 0x01	; 1
 18c:	8f 81       	ldd	r24, Y+7	; 0x07
 18e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 19a:	68 ee       	ldi	r22, 0xE8	; 232
 19c:	73 e0       	ldi	r23, 0x03	; 3
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <MDELAY_void_micro>
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MDIO_voidSetPinVal>
 1ae:	c7 01       	movw	r24, r14
 1b0:	b6 01       	movw	r22, r12
 1b2:	68 51       	subi	r22, 0x18	; 24
 1b4:	7c 4f       	sbci	r23, 0xFC	; 252
 1b6:	8f 4f       	sbci	r24, 0xFF	; 255
 1b8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ba:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <MDELAY_void_micro>
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	bf 90       	pop	r11
 1d0:	af 90       	pop	r10
 1d2:	08 95       	ret

000001d4 <HLCD_HLCD_t_LcdCreate>:
 1d4:	9f 92       	push	r9
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	2c 97       	sbiw	r28, 0x0c	; 12
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	6c 01       	movw	r12, r24
 1fc:	b6 2e       	mov	r11, r22
 1fe:	a4 2e       	mov	r10, r20
 200:	92 2e       	mov	r9, r18
 202:	78 01       	movw	r14, r16
 204:	68 ee       	ldi	r22, 0xE8	; 232
 206:	73 e0       	ldi	r23, 0x03	; 3
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <MDELAY_void_micro>
 210:	9c 82       	std	Y+4, r9	; 0x04
 212:	ab 82       	std	Y+3, r10	; 0x03
 214:	ba 82       	std	Y+2, r11	; 0x02
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	89 2d       	mov	r24, r9
 21a:	0e 94 26 03 	call	0x64c	; 0x64c <MDIO_voidSetPinDir>
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	8a 2d       	mov	r24, r10
 222:	0e 94 26 03 	call	0x64c	; 0x64c <MDIO_voidSetPinDir>
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	8b 2d       	mov	r24, r11
 22a:	0e 94 26 03 	call	0x64c	; 0x64c <MDIO_voidSetPinDir>
 22e:	10 e0       	ldi	r17, 0x00	; 0
 230:	12 c0       	rjmp	.+36     	; 0x256 <HLCD_HLCD_t_LcdCreate+0x82>
 232:	81 2f       	mov	r24, r17
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	f7 01       	movw	r30, r14
 238:	e8 0f       	add	r30, r24
 23a:	f9 1f       	adc	r31, r25
 23c:	20 81       	ld	r18, Z
 23e:	a5 e0       	ldi	r26, 0x05	; 5
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	ac 0f       	add	r26, r28
 244:	bd 1f       	adc	r27, r29
 246:	a8 0f       	add	r26, r24
 248:	b9 1f       	adc	r27, r25
 24a:	2c 93       	st	X, r18
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	80 81       	ld	r24, Z
 250:	0e 94 26 03 	call	0x64c	; 0x64c <MDIO_voidSetPinDir>
 254:	1f 5f       	subi	r17, 0xFF	; 255
 256:	18 30       	cpi	r17, 0x08	; 8
 258:	60 f3       	brcs	.-40     	; 0x232 <HLCD_HLCD_t_LcdCreate+0x5e>
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	80 66       	ori	r24, 0x60	; 96
 25e:	8f 77       	andi	r24, 0x7F	; 127
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	17 e2       	ldi	r17, 0x27	; 39
 264:	e1 2e       	mov	r14, r17
 266:	f1 2c       	mov	r15, r1
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	68 e3       	ldi	r22, 0x38	; 56
 272:	ce 01       	movw	r24, r28
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_void_send>
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	83 7f       	andi	r24, 0xF3	; 243
 27e:	8f 7e       	andi	r24, 0xEF	; 239
 280:	89 83       	std	Y+1, r24	; 0x01
 282:	e1 2c       	mov	r14, r1
 284:	f1 2c       	mov	r15, r1
 286:	87 01       	movw	r16, r14
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	68 e0       	ldi	r22, 0x08	; 8
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_void_send>
 296:	1a ef       	ldi	r17, 0xFA	; 250
 298:	e1 2e       	mov	r14, r17
 29a:	15 e0       	ldi	r17, 0x05	; 5
 29c:	f1 2e       	mov	r15, r17
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_void_send>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_void_send>
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	17 e2       	ldi	r17, 0x27	; 39
 2c8:	e1 2e       	mov	r14, r17
 2ca:	f1 2c       	mov	r15, r1
 2cc:	00 e0       	ldi	r16, 0x00	; 0
 2ce:	10 e0       	ldi	r17, 0x00	; 0
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	66 e0       	ldi	r22, 0x06	; 6
 2d6:	ce 01       	movw	r24, r28
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_void_send>
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	fe 01       	movw	r30, r28
 2e2:	31 96       	adiw	r30, 0x01	; 1
 2e4:	d6 01       	movw	r26, r12
 2e6:	01 90       	ld	r0, Z+
 2e8:	0d 92       	st	X+, r0
 2ea:	8a 95       	dec	r24
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <HLCD_HLCD_t_LcdCreate+0x112>
 2ee:	c6 01       	movw	r24, r12
 2f0:	2c 96       	adiw	r28, 0x0c	; 12
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	df 90       	pop	r13
 30a:	cf 90       	pop	r12
 30c:	bf 90       	pop	r11
 30e:	af 90       	pop	r10
 310:	9f 90       	pop	r9
 312:	08 95       	ret

00000314 <HLCD_void_DisplayOn>:
 314:	ef 92       	push	r14
 316:	ff 92       	push	r15
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	fc 01       	movw	r30, r24
 31e:	90 81       	ld	r25, Z
 320:	94 60       	ori	r25, 0x04	; 4
 322:	90 83       	st	Z, r25
 324:	93 fb       	bst	r25, 3
 326:	66 27       	eor	r22, r22
 328:	60 f9       	bld	r22, 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	92 95       	swap	r25
 332:	91 70       	andi	r25, 0x01	; 1
 334:	6c 60       	ori	r22, 0x0C	; 12
 336:	69 2b       	or	r22, r25
 338:	e1 2c       	mov	r14, r1
 33a:	f1 2c       	mov	r15, r1
 33c:	87 01       	movw	r16, r14
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	cf 01       	movw	r24, r30
 344:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_void_send>
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	08 95       	ret

00000352 <HLCD_void_WriteCharacter>:
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	1b e2       	ldi	r17, 0x2B	; 43
 35c:	e1 2e       	mov	r14, r17
 35e:	f1 2c       	mov	r15, r1
 360:	00 e0       	ldi	r16, 0x00	; 0
 362:	10 e0       	ldi	r17, 0x00	; 0
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_void_send>
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	08 95       	ret

00000376 <HLCD_void_setCursor>:
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	20 e4       	ldi	r18, 0x40	; 64
 380:	42 9f       	mul	r20, r18
 382:	60 0d       	add	r22, r0
 384:	11 24       	eor	r1, r1
 386:	60 68       	ori	r22, 0x80	; 128
 388:	17 e2       	ldi	r17, 0x27	; 39
 38a:	e1 2e       	mov	r14, r17
 38c:	f1 2c       	mov	r15, r1
 38e:	00 e0       	ldi	r16, 0x00	; 0
 390:	10 e0       	ldi	r17, 0x00	; 0
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_void_send>
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	ff 90       	pop	r15
 3a0:	ef 90       	pop	r14
 3a2:	08 95       	ret

000003a4 <HLCD_void_CreateChar>:

void HLCD_void_CreateChar(HLCD_t *A_HLCD_t_lcd, u8 A_u8_BlockIndex, u8 *A_u8_Array){
 3a4:	af 92       	push	r10
 3a6:	bf 92       	push	r11
 3a8:	cf 92       	push	r12
 3aa:	df 92       	push	r13
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	6c 01       	movw	r12, r24
 3b8:	5a 01       	movw	r10, r20
	u8 L_u8_BlockAddress = A_u8_BlockIndex * HLCD_TOTAL_PATTERNS_NO;
 3ba:	66 0f       	add	r22, r22
 3bc:	66 0f       	add	r22, r22
 3be:	66 0f       	add	r22, r22
	u8 L_u8_iterator;
	
	HLCD_void_send(
 3c0:	6f 73       	andi	r22, 0x3F	; 63
 3c2:	60 64       	ori	r22, 0x40	; 64
 3c4:	17 e2       	ldi	r17, 0x27	; 39
 3c6:	e1 2e       	mov	r14, r17
 3c8:	f1 2c       	mov	r15, r1
 3ca:	00 e0       	ldi	r16, 0x00	; 0
 3cc:	10 e0       	ldi	r17, 0x00	; 0
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_void_send>
		HLCD_SET_CGRAM_ADDRESS_CMD_RS,
		HLCD_SET_CGRAM_ADDRESS_CMD_RW,
		HLCD_SET_CGRAM_ADDRESS_CMD_TIME_US
	);
	
	for (L_u8_iterator =0 ;L_u8_iterator < HLCD_PATTERN_ROWS_NO;L_u8_iterator ++)
 3d6:	c0 e0       	ldi	r28, 0x00	; 0
 3d8:	08 c0       	rjmp	.+16     	; 0x3ea <HLCD_void_CreateChar+0x46>
	{
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,A_u8_Array[L_u8_iterator]);
 3da:	f5 01       	movw	r30, r10
 3dc:	ec 0f       	add	r30, r28
 3de:	f1 1d       	adc	r31, r1
 3e0:	60 81       	ld	r22, Z
 3e2:	c6 01       	movw	r24, r12
 3e4:	0e 94 a9 01 	call	0x352	; 0x352 <HLCD_void_WriteCharacter>
		HLCD_SET_CGRAM_ADDRESS_CMD_RS,
		HLCD_SET_CGRAM_ADDRESS_CMD_RW,
		HLCD_SET_CGRAM_ADDRESS_CMD_TIME_US
	);
	
	for (L_u8_iterator =0 ;L_u8_iterator < HLCD_PATTERN_ROWS_NO;L_u8_iterator ++)
 3e8:	cf 5f       	subi	r28, 0xFF	; 255
 3ea:	c8 30       	cpi	r28, 0x08	; 8
 3ec:	b0 f3       	brcs	.-20     	; 0x3da <HLCD_void_CreateChar+0x36>
	{
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,A_u8_Array[L_u8_iterator]);
	}
	
	HLCD_void_setCursor(A_HLCD_t_lcd,0,0);
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	c6 01       	movw	r24, r12
 3f4:	0e 94 bb 01 	call	0x376	; 0x376 <HLCD_void_setCursor>
	
}
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	bf 90       	pop	r11
 408:	af 90       	pop	r10
 40a:	08 95       	ret

0000040c <main>:
#define E2 PinB4



int main(void)
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	e8 97       	sbiw	r28, 0x38	; 56
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit();
 420:	0e 94 22 03 	call	0x644	; 0x644 <MDIO_voidInit>
	
	HLCD_t lcd1, lcd2;
	
	{
		Pin_t dataPins[]  ={PinA7,PinA6,PinA5,PinA4,PinA3,PinA2,PinA1,PinA0};
 424:	88 e0       	ldi	r24, 0x08	; 8
 426:	e0 e6       	ldi	r30, 0x60	; 96
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	de 01       	movw	r26, r28
 42c:	95 96       	adiw	r26, 0x25	; 37
 42e:	01 90       	ld	r0, Z+
 430:	0d 92       	st	X+, r0
 432:	8a 95       	dec	r24
 434:	e1 f7       	brne	.-8      	; 0x42e <main+0x22>
		lcd1 = HLCD_HLCD_t_LcdCreate(RS,RW,E1,dataPins);
 436:	8e 01       	movw	r16, r28
 438:	0b 5d       	subi	r16, 0xDB	; 219
 43a:	1f 4f       	sbci	r17, 0xFF	; 255
 43c:	23 eb       	ldi	r18, 0xB3	; 179
 43e:	42 eb       	ldi	r20, 0xB2	; 178
 440:	61 eb       	ldi	r22, 0xB1	; 177
 442:	ce 01       	movw	r24, r28
 444:	8d 96       	adiw	r24, 0x2d	; 45
 446:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <HLCD_HLCD_t_LcdCreate>
 44a:	8c e0       	ldi	r24, 0x0C	; 12
 44c:	fe 01       	movw	r30, r28
 44e:	bd 96       	adiw	r30, 0x2d	; 45
 450:	de 01       	movw	r26, r28
 452:	11 96       	adiw	r26, 0x01	; 1
 454:	01 90       	ld	r0, Z+
 456:	0d 92       	st	X+, r0
 458:	8a 95       	dec	r24
 45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x48>
		//lcd2 = HLCD_HLCD_t_LcdCreate(RS,RW,E2,dataPins);

		HLCD_void_DisplayOn(&lcd1);
 45c:	ce 01       	movw	r24, r28
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	0e 94 8a 01 	call	0x314	; 0x314 <HLCD_void_DisplayOn>
		//HLCD_void_DisplayOn(&lcd2);
		
		u8 cc0[] = LCD_PATTERN_ARROW_UP_ANIM_1_5X8;
 464:	88 e0       	ldi	r24, 0x08	; 8
 466:	e8 e6       	ldi	r30, 0x68	; 104
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	de 01       	movw	r26, r28
 46c:	5d 96       	adiw	r26, 0x1d	; 29
 46e:	01 90       	ld	r0, Z+
 470:	0d 92       	st	X+, r0
 472:	8a 95       	dec	r24
 474:	e1 f7       	brne	.-8      	; 0x46e <main+0x62>
		u8 cc1[] = LCD_PATTERN_ARROW_UP_ANIM_2_5X8;
 476:	88 e0       	ldi	r24, 0x08	; 8
 478:	e0 e7       	ldi	r30, 0x70	; 112
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	de 01       	movw	r26, r28
 47e:	55 96       	adiw	r26, 0x15	; 21
 480:	01 90       	ld	r0, Z+
 482:	0d 92       	st	X+, r0
 484:	8a 95       	dec	r24
 486:	e1 f7       	brne	.-8      	; 0x480 <main+0x74>
		u8 cc2[] = LCD_PATTERN_ARROW_UP_ANIM_3_5X8;
 488:	88 e0       	ldi	r24, 0x08	; 8
 48a:	e8 e7       	ldi	r30, 0x78	; 120
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	de 01       	movw	r26, r28
 490:	1d 96       	adiw	r26, 0x0d	; 13
 492:	01 90       	ld	r0, Z+
 494:	0d 92       	st	X+, r0
 496:	8a 95       	dec	r24
 498:	e1 f7       	brne	.-8      	; 0x492 <main+0x86>

		HLCD_void_CreateChar(&lcd1, 0,cc0);
 49a:	ae 01       	movw	r20, r28
 49c:	43 5e       	subi	r20, 0xE3	; 227
 49e:	5f 4f       	sbci	r21, 0xFF	; 255
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	ce 01       	movw	r24, r28
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <HLCD_void_CreateChar>
		HLCD_void_CreateChar(&lcd1, 1,cc1);
 4aa:	ae 01       	movw	r20, r28
 4ac:	4b 5e       	subi	r20, 0xEB	; 235
 4ae:	5f 4f       	sbci	r21, 0xFF	; 255
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	ce 01       	movw	r24, r28
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <HLCD_void_CreateChar>
		HLCD_void_CreateChar(&lcd1, 2,cc2);
 4ba:	ae 01       	movw	r20, r28
 4bc:	43 5f       	subi	r20, 0xF3	; 243
 4be:	5f 4f       	sbci	r21, 0xFF	; 255
 4c0:	62 e0       	ldi	r22, 0x02	; 2
 4c2:	ce 01       	movw	r24, r28
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <HLCD_void_CreateChar>

	}
	
	//LCD_void_WriteString(&lcd1,"Youssef: ");
	//HLCD_void_WriteString(&lcd2,"Samy: ");
	HLCD_void_WriteCharacter(&lcd1,0);
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	ce 01       	movw	r24, r28
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	0e 94 a9 01 	call	0x352	; 0x352 <HLCD_void_WriteCharacter>

	u8 i=0;
 4d4:	10 e0       	ldi	r17, 0x00	; 0

    while (1) 
    {
		
		HLCD_void_setCursor(&lcd1,0,0);
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	ce 01       	movw	r24, r28
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	0e 94 bb 01 	call	0x376	; 0x376 <HLCD_void_setCursor>
		HLCD_void_WriteCharacter(&lcd1,i);
 4e2:	61 2f       	mov	r22, r17
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	0e 94 a9 01 	call	0x352	; 0x352 <HLCD_void_WriteCharacter>
		i = (i+1)%3;
 4ec:	81 2f       	mov	r24, r17
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	0f 2e       	mov	r0, r31
 4f4:	f3 e0       	ldi	r31, 0x03	; 3
 4f6:	ef 2e       	mov	r14, r31
 4f8:	f1 2c       	mov	r15, r1
 4fa:	f0 2d       	mov	r31, r0
 4fc:	b7 01       	movw	r22, r14
 4fe:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
 502:	8c 01       	movw	r16, r24
		
		HLCD_void_setCursor(&lcd1,0,1);
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	0e 94 bb 01 	call	0x376	; 0x376 <HLCD_void_setCursor>
		HLCD_void_WriteCharacter(&lcd1,i);
 510:	60 2f       	mov	r22, r16
 512:	ce 01       	movw	r24, r28
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	0e 94 a9 01 	call	0x352	; 0x352 <HLCD_void_WriteCharacter>
		i = (i+1)%3;
 51a:	c8 01       	movw	r24, r16
 51c:	99 27       	eor	r25, r25
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	b7 01       	movw	r22, r14
 522:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
 526:	18 2f       	mov	r17, r24
		
		MDELAY_void_milli(200);
 528:	68 ec       	ldi	r22, 0xC8	; 200
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 9b 02 	call	0x536	; 0x536 <MDELAY_void_milli>
 534:	d0 cf       	rjmp	.-96     	; 0x4d6 <main+0xca>

00000536 <MDELAY_void_milli>:
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 536:	41 c0       	rjmp	.+130    	; 0x5ba <MDELAY_void_milli+0x84>
		if(A_u32_ms >= 1000){
 538:	68 3e       	cpi	r22, 0xE8	; 232
 53a:	23 e0       	ldi	r18, 0x03	; 3
 53c:	72 07       	cpc	r23, r18
 53e:	81 05       	cpc	r24, r1
 540:	91 05       	cpc	r25, r1
 542:	70 f0       	brcs	.+28     	; 0x560 <MDELAY_void_milli+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 544:	3f ef       	ldi	r19, 0xFF	; 255
 546:	49 e6       	ldi	r20, 0x69	; 105
 548:	e8 e1       	ldi	r30, 0x18	; 24
 54a:	31 50       	subi	r19, 0x01	; 1
 54c:	40 40       	sbci	r20, 0x00	; 0
 54e:	e0 40       	sbci	r30, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <MDELAY_void_milli+0x14>
 552:	00 c0       	rjmp	.+0      	; 0x554 <MDELAY_void_milli+0x1e>
 554:	00 00       	nop
			_delay_ms(1000);
			A_u32_ms -= 1000;
 556:	68 5e       	subi	r22, 0xE8	; 232
 558:	73 40       	sbci	r23, 0x03	; 3
 55a:	81 09       	sbc	r24, r1
 55c:	91 09       	sbc	r25, r1
 55e:	2d c0       	rjmp	.+90     	; 0x5ba <MDELAY_void_milli+0x84>
		}
		else if(A_u32_ms >= 100){
 560:	64 36       	cpi	r22, 0x64	; 100
 562:	71 05       	cpc	r23, r1
 564:	81 05       	cpc	r24, r1
 566:	91 05       	cpc	r25, r1
 568:	70 f0       	brcs	.+28     	; 0x586 <MDELAY_void_milli+0x50>
 56a:	ff ef       	ldi	r31, 0xFF	; 255
 56c:	20 e7       	ldi	r18, 0x70	; 112
 56e:	32 e0       	ldi	r19, 0x02	; 2
 570:	f1 50       	subi	r31, 0x01	; 1
 572:	20 40       	sbci	r18, 0x00	; 0
 574:	30 40       	sbci	r19, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <MDELAY_void_milli+0x3a>
 578:	00 c0       	rjmp	.+0      	; 0x57a <MDELAY_void_milli+0x44>
 57a:	00 00       	nop
			_delay_ms(100);
			A_u32_ms -= 100;
 57c:	64 56       	subi	r22, 0x64	; 100
 57e:	71 09       	sbc	r23, r1
 580:	81 09       	sbc	r24, r1
 582:	91 09       	sbc	r25, r1
 584:	1a c0       	rjmp	.+52     	; 0x5ba <MDELAY_void_milli+0x84>
		}else if(A_u32_ms >= 10){
 586:	6a 30       	cpi	r22, 0x0A	; 10
 588:	71 05       	cpc	r23, r1
 58a:	81 05       	cpc	r24, r1
 58c:	91 05       	cpc	r25, r1
 58e:	58 f0       	brcs	.+22     	; 0x5a6 <MDELAY_void_milli+0x70>
 590:	ef e1       	ldi	r30, 0x1F	; 31
 592:	fe e4       	ldi	r31, 0x4E	; 78
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <MDELAY_void_milli+0x5e>
 598:	00 c0       	rjmp	.+0      	; 0x59a <MDELAY_void_milli+0x64>
 59a:	00 00       	nop
			_delay_ms(10);
			A_u32_ms -= 10;
 59c:	6a 50       	subi	r22, 0x0A	; 10
 59e:	71 09       	sbc	r23, r1
 5a0:	81 09       	sbc	r24, r1
 5a2:	91 09       	sbc	r25, r1
 5a4:	0a c0       	rjmp	.+20     	; 0x5ba <MDELAY_void_milli+0x84>
 5a6:	ef ec       	ldi	r30, 0xCF	; 207
 5a8:	f7 e0       	ldi	r31, 0x07	; 7
 5aa:	31 97       	sbiw	r30, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <MDELAY_void_milli+0x74>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <MDELAY_void_milli+0x7a>
 5b0:	00 00       	nop
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
 5b2:	61 50       	subi	r22, 0x01	; 1
 5b4:	71 09       	sbc	r23, r1
 5b6:	81 09       	sbc	r24, r1
 5b8:	91 09       	sbc	r25, r1
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 5ba:	61 15       	cp	r22, r1
 5bc:	71 05       	cpc	r23, r1
 5be:	81 05       	cpc	r24, r1
 5c0:	91 05       	cpc	r25, r1
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <MDELAY_void_milli+0x90>
 5c4:	b9 cf       	rjmp	.-142    	; 0x538 <MDELAY_void_milli+0x2>
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
		}
	}
}
 5c6:	08 95       	ret

000005c8 <MDELAY_void_micro>:

void MDELAY_void_micro(u32 A_u32_us){
	while(A_u32_us>0){
 5c8:	37 c0       	rjmp	.+110    	; 0x638 <MDELAY_void_micro+0x70>
		if(A_u32_us >= 1000){
 5ca:	68 3e       	cpi	r22, 0xE8	; 232
 5cc:	23 e0       	ldi	r18, 0x03	; 3
 5ce:	72 07       	cpc	r23, r18
 5d0:	81 05       	cpc	r24, r1
 5d2:	91 05       	cpc	r25, r1
 5d4:	58 f0       	brcs	.+22     	; 0x5ec <MDELAY_void_micro+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d6:	ef ec       	ldi	r30, 0xCF	; 207
 5d8:	f7 e0       	ldi	r31, 0x07	; 7
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <MDELAY_void_micro+0x12>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <MDELAY_void_micro+0x18>
 5e0:	00 00       	nop
			_delay_us(1000);
			A_u32_us -= 1000;
 5e2:	68 5e       	subi	r22, 0xE8	; 232
 5e4:	73 40       	sbci	r23, 0x03	; 3
 5e6:	81 09       	sbc	r24, r1
 5e8:	91 09       	sbc	r25, r1
 5ea:	26 c0       	rjmp	.+76     	; 0x638 <MDELAY_void_micro+0x70>
		}
		else if(A_u32_us >= 100){
 5ec:	64 36       	cpi	r22, 0x64	; 100
 5ee:	71 05       	cpc	r23, r1
 5f0:	81 05       	cpc	r24, r1
 5f2:	91 05       	cpc	r25, r1
 5f4:	58 f0       	brcs	.+22     	; 0x60c <MDELAY_void_micro+0x44>
 5f6:	e7 ec       	ldi	r30, 0xC7	; 199
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	31 97       	sbiw	r30, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <MDELAY_void_micro+0x32>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <MDELAY_void_micro+0x38>
 600:	00 00       	nop
			_delay_us(100);
			A_u32_us -= 100;
 602:	64 56       	subi	r22, 0x64	; 100
 604:	71 09       	sbc	r23, r1
 606:	81 09       	sbc	r24, r1
 608:	91 09       	sbc	r25, r1
 60a:	16 c0       	rjmp	.+44     	; 0x638 <MDELAY_void_micro+0x70>
		}else if(A_u32_us >= 10){
 60c:	6a 30       	cpi	r22, 0x0A	; 10
 60e:	71 05       	cpc	r23, r1
 610:	81 05       	cpc	r24, r1
 612:	91 05       	cpc	r25, r1
 614:	48 f0       	brcs	.+18     	; 0x628 <MDELAY_void_micro+0x60>
 616:	fa e1       	ldi	r31, 0x1A	; 26
 618:	fa 95       	dec	r31
 61a:	f1 f7       	brne	.-4      	; 0x618 <MDELAY_void_micro+0x50>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <MDELAY_void_micro+0x56>
			_delay_us(10);
			A_u32_us -= 10;
 61e:	6a 50       	subi	r22, 0x0A	; 10
 620:	71 09       	sbc	r23, r1
 622:	81 09       	sbc	r24, r1
 624:	91 09       	sbc	r25, r1
 626:	08 c0       	rjmp	.+16     	; 0x638 <MDELAY_void_micro+0x70>
 628:	22 e0       	ldi	r18, 0x02	; 2
 62a:	2a 95       	dec	r18
 62c:	f1 f7       	brne	.-4      	; 0x62a <MDELAY_void_micro+0x62>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <MDELAY_void_micro+0x68>
		}else{
			_delay_us(1);
			A_u32_us -= 1;
 630:	61 50       	subi	r22, 0x01	; 1
 632:	71 09       	sbc	r23, r1
 634:	81 09       	sbc	r24, r1
 636:	91 09       	sbc	r25, r1
		}
	}
}

void MDELAY_void_micro(u32 A_u32_us){
	while(A_u32_us>0){
 638:	61 15       	cp	r22, r1
 63a:	71 05       	cpc	r23, r1
 63c:	81 05       	cpc	r24, r1
 63e:	91 05       	cpc	r25, r1
 640:	21 f6       	brne	.-120    	; 0x5ca <MDELAY_void_micro+0x2>
		}else{
			_delay_us(1);
			A_u32_us -= 1;
		}
	}
 642:	08 95       	ret

00000644 <MDIO_voidInit>:

void MDIO_voidInit(void){
	#if MDIO_ENABLE_PULL_UP_CIRCUIT == 0
		SET_BIT(SFIOR_REG,PUD_BIT);
	#else
		CLR_BIT(SFIOR_REG,PUD_BIT);
 644:	80 b7       	in	r24, 0x30	; 48
 646:	8b 7f       	andi	r24, 0xFB	; 251
 648:	80 bf       	out	0x30, r24	; 48
 64a:	08 95       	ret

0000064c <MDIO_voidSetPinDir>:
	#endif
}


void MDIO_voidSetPinDir(Pin_t A_Pin_tPin, u8 A_u8Dir){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 64c:	98 2f       	mov	r25, r24
 64e:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 650:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 652:	90 3b       	cpi	r25, 0xB0	; 176
 654:	49 f0       	breq	.+18     	; 0x668 <MDIO_voidSetPinDir+0x1c>
 656:	18 f4       	brcc	.+6      	; 0x65e <MDIO_voidSetPinDir+0x12>
 658:	90 3a       	cpi	r25, 0xA0	; 160
 65a:	a9 f0       	breq	.+42     	; 0x686 <MDIO_voidSetPinDir+0x3a>
 65c:	18 c0       	rjmp	.+48     	; 0x68e <MDIO_voidSetPinDir+0x42>
 65e:	90 3c       	cpi	r25, 0xC0	; 192
 660:	41 f0       	breq	.+16     	; 0x672 <MDIO_voidSetPinDir+0x26>
 662:	90 3d       	cpi	r25, 0xD0	; 208
 664:	59 f0       	breq	.+22     	; 0x67c <MDIO_voidSetPinDir+0x30>
 666:	13 c0       	rjmp	.+38     	; 0x68e <MDIO_voidSetPinDir+0x42>
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
			break;
		case MDIO_PORT_B_NUM:
						L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 668:	a8 e3       	ldi	r26, 0x38	; 56
 66a:	b0 e0       	ldi	r27, 0x00	; 0
 66c:	e7 e3       	ldi	r30, 0x37	; 55
 66e:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 670:	0e c0       	rjmp	.+28     	; 0x68e <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_C_NUM:
						L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 672:	a5 e3       	ldi	r26, 0x35	; 53
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	e4 e3       	ldi	r30, 0x34	; 52
 678:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 67a:	09 c0       	rjmp	.+18     	; 0x68e <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_D_NUM:
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 67c:	a2 e3       	ldi	r26, 0x32	; 50
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	e1 e3       	ldi	r30, 0x31	; 49
 682:	f0 e0       	ldi	r31, 0x00	; 0

			break;
 684:	04 c0       	rjmp	.+8      	; 0x68e <MDIO_voidSetPinDir+0x42>
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 686:	ab e3       	ldi	r26, 0x3B	; 59
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	ea e3       	ldi	r30, 0x3A	; 58
 68c:	f0 e0       	ldi	r31, 0x00	; 0
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

			break;
		}
		
		switch(A_u8Dir){
 68e:	61 30       	cpi	r22, 0x01	; 1
 690:	91 f0       	breq	.+36     	; 0x6b6 <MDIO_voidSetPinDir+0x6a>
 692:	18 f0       	brcs	.+6      	; 0x69a <MDIO_voidSetPinDir+0x4e>
 694:	62 30       	cpi	r22, 0x02	; 2
 696:	e1 f0       	breq	.+56     	; 0x6d0 <MDIO_voidSetPinDir+0x84>
 698:	08 95       	ret
			case INPUT: 
				CLR_BIT(*L_dirReg,L_pinNum) ;
 69a:	40 81       	ld	r20, Z
 69c:	21 e0       	ldi	r18, 0x01	; 1
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	b9 01       	movw	r22, r18
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <MDIO_voidSetPinDir+0x5c>
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	8a 95       	dec	r24
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <MDIO_voidSetPinDir+0x58>
 6ac:	cb 01       	movw	r24, r22
 6ae:	80 95       	com	r24
 6b0:	84 23       	and	r24, r20
 6b2:	80 83       	st	Z, r24
				break;
 6b4:	08 95       	ret
			case OUTPUT: 
				SET_BIT(*L_dirReg,L_pinNum) ;
 6b6:	40 81       	ld	r20, Z
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	b9 01       	movw	r22, r18
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <MDIO_voidSetPinDir+0x78>
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	8a 95       	dec	r24
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <MDIO_voidSetPinDir+0x74>
 6c8:	cb 01       	movw	r24, r22
 6ca:	84 2b       	or	r24, r20
 6cc:	80 83       	st	Z, r24
				break;
 6ce:	08 95       	ret
			case INPUT_PULL_UP: 
				CLR_BIT(*L_dirReg,L_pinNum);
 6d0:	40 81       	ld	r20, Z
 6d2:	21 e0       	ldi	r18, 0x01	; 1
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	b9 01       	movw	r22, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <MDIO_voidSetPinDir+0x92>
 6da:	66 0f       	add	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	8a 95       	dec	r24
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <MDIO_voidSetPinDir+0x8e>
 6e2:	cb 01       	movw	r24, r22
 6e4:	96 2f       	mov	r25, r22
 6e6:	90 95       	com	r25
 6e8:	94 23       	and	r25, r20
 6ea:	90 83       	st	Z, r25
				SET_BIT(*L_valReg,L_pinNum);
 6ec:	9c 91       	ld	r25, X
 6ee:	89 2b       	or	r24, r25
 6f0:	8c 93       	st	X, r24
 6f2:	08 95       	ret

000006f4 <MDIO_voidSetPinVal>:
				break;
		}
	
}
void MDIO_voidSetPinVal(Pin_t A_Pin_tPin, u8 A_u8Val){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 6f4:	98 2f       	mov	r25, r24
 6f6:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 6f8:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 6fa:	90 3b       	cpi	r25, 0xB0	; 176
 6fc:	49 f0       	breq	.+18     	; 0x710 <MDIO_voidSetPinVal+0x1c>
 6fe:	18 f4       	brcc	.+6      	; 0x706 <MDIO_voidSetPinVal+0x12>
 700:	90 3a       	cpi	r25, 0xA0	; 160
 702:	79 f0       	breq	.+30     	; 0x722 <MDIO_voidSetPinVal+0x2e>
 704:	10 c0       	rjmp	.+32     	; 0x726 <MDIO_voidSetPinVal+0x32>
 706:	90 3c       	cpi	r25, 0xC0	; 192
 708:	31 f0       	breq	.+12     	; 0x716 <MDIO_voidSetPinVal+0x22>
 70a:	90 3d       	cpi	r25, 0xD0	; 208
 70c:	39 f0       	breq	.+14     	; 0x71c <MDIO_voidSetPinVal+0x28>
 70e:	0b c0       	rjmp	.+22     	; 0x726 <MDIO_voidSetPinVal+0x32>
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
		break;
		case MDIO_PORT_B_NUM:
		L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 710:	e8 e3       	ldi	r30, 0x38	; 56
 712:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 714:	08 c0       	rjmp	.+16     	; 0x726 <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_C_NUM:
		L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 716:	e5 e3       	ldi	r30, 0x35	; 53
 718:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 71a:	05 c0       	rjmp	.+10     	; 0x726 <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_D_NUM:
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 71c:	e2 e3       	ldi	r30, 0x32	; 50
 71e:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 720:	02 c0       	rjmp	.+4      	; 0x726 <MDIO_voidSetPinVal+0x32>
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 722:	eb e3       	ldi	r30, 0x3B	; 59
 724:	f0 e0       	ldi	r31, 0x00	; 0
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

		break;
	}
	
	switch(A_u8Val){
 726:	66 23       	and	r22, r22
 728:	19 f0       	breq	.+6      	; 0x730 <MDIO_voidSetPinVal+0x3c>
 72a:	61 30       	cpi	r22, 0x01	; 1
 72c:	79 f0       	breq	.+30     	; 0x74c <MDIO_voidSetPinVal+0x58>
 72e:	08 95       	ret
		case LOW:
		CLR_BIT(*L_valReg,L_pinNum) ;
 730:	40 81       	ld	r20, Z
 732:	21 e0       	ldi	r18, 0x01	; 1
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	b9 01       	movw	r22, r18
 738:	02 c0       	rjmp	.+4      	; 0x73e <MDIO_voidSetPinVal+0x4a>
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	8a 95       	dec	r24
 740:	e2 f7       	brpl	.-8      	; 0x73a <MDIO_voidSetPinVal+0x46>
 742:	cb 01       	movw	r24, r22
 744:	80 95       	com	r24
 746:	84 23       	and	r24, r20
 748:	80 83       	st	Z, r24
		break;
 74a:	08 95       	ret
		case HIGH:
		SET_BIT(*L_valReg,L_pinNum) ;
 74c:	40 81       	ld	r20, Z
 74e:	21 e0       	ldi	r18, 0x01	; 1
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	b9 01       	movw	r22, r18
 754:	02 c0       	rjmp	.+4      	; 0x75a <MDIO_voidSetPinVal+0x66>
 756:	66 0f       	add	r22, r22
 758:	77 1f       	adc	r23, r23
 75a:	8a 95       	dec	r24
 75c:	e2 f7       	brpl	.-8      	; 0x756 <MDIO_voidSetPinVal+0x62>
 75e:	cb 01       	movw	r24, r22
 760:	84 2b       	or	r24, r20
 762:	80 83       	st	Z, r24
 764:	08 95       	ret

00000766 <__divmodhi4>:
 766:	97 fb       	bst	r25, 7
 768:	07 2e       	mov	r0, r23
 76a:	16 f4       	brtc	.+4      	; 0x770 <__divmodhi4+0xa>
 76c:	00 94       	com	r0
 76e:	07 d0       	rcall	.+14     	; 0x77e <__divmodhi4_neg1>
 770:	77 fd       	sbrc	r23, 7
 772:	09 d0       	rcall	.+18     	; 0x786 <__divmodhi4_neg2>
 774:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodhi4>
 778:	07 fc       	sbrc	r0, 7
 77a:	05 d0       	rcall	.+10     	; 0x786 <__divmodhi4_neg2>
 77c:	3e f4       	brtc	.+14     	; 0x78c <__divmodhi4_exit>

0000077e <__divmodhi4_neg1>:
 77e:	90 95       	com	r25
 780:	81 95       	neg	r24
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <__divmodhi4_neg2>:
 786:	70 95       	com	r23
 788:	61 95       	neg	r22
 78a:	7f 4f       	sbci	r23, 0xFF	; 255

0000078c <__divmodhi4_exit>:
 78c:	08 95       	ret

0000078e <__udivmodhi4>:
 78e:	aa 1b       	sub	r26, r26
 790:	bb 1b       	sub	r27, r27
 792:	51 e1       	ldi	r21, 0x11	; 17
 794:	07 c0       	rjmp	.+14     	; 0x7a4 <__udivmodhi4_ep>

00000796 <__udivmodhi4_loop>:
 796:	aa 1f       	adc	r26, r26
 798:	bb 1f       	adc	r27, r27
 79a:	a6 17       	cp	r26, r22
 79c:	b7 07       	cpc	r27, r23
 79e:	10 f0       	brcs	.+4      	; 0x7a4 <__udivmodhi4_ep>
 7a0:	a6 1b       	sub	r26, r22
 7a2:	b7 0b       	sbc	r27, r23

000007a4 <__udivmodhi4_ep>:
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	5a 95       	dec	r21
 7aa:	a9 f7       	brne	.-22     	; 0x796 <__udivmodhi4_loop>
 7ac:	80 95       	com	r24
 7ae:	90 95       	com	r25
 7b0:	bc 01       	movw	r22, r24
 7b2:	cd 01       	movw	r24, r26
 7b4:	08 95       	ret

000007b6 <_exit>:
 7b6:	f8 94       	cli

000007b8 <__stop_program>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <__stop_program>
