
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001289  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000916  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aae  00000000  00000000  00001fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000767  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a07  00000000  00000000  000033e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003dee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  7a:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HEEPROM_24C02_voidWrite>:

#include "EEPROM_24C02_config.h"
#include "EEPROM_24C02_interface.h"
#include "EEPROM_24C02_private.h"

void HEEPROM_24C02_voidWrite(u8 A_u8_location, u8 A_u8_data){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	d8 2f       	mov	r29, r24
  88:	c6 2f       	mov	r28, r22
		u8 L_u8SlaveAdd = 0b01010000;
		L_u8SlaveAdd = L_u8SlaveAdd | (HEEPROM_24C02_A2<<2) | (HEEPROM_24C02_A1<<1) | (HEEPROM_24C02_A0);
		
		MTWI_u8_sendStartCondition();
  8a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <MTWI_u8_sendStartCondition>
		MTWI_u8_sendSlaveAddress(L_u8SlaveAdd,MTWI_WRITE);
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	85 e5       	ldi	r24, 0x55	; 85
  92:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <MTWI_u8_sendSlaveAddress>
		MTWI_u8_sendData(A_u8_location);
  96:	8d 2f       	mov	r24, r29
  98:	0e 94 0e 01 	call	0x21c	; 0x21c <MTWI_u8_sendData>
		MTWI_u8_sendData(A_u8_data);
  9c:	8c 2f       	mov	r24, r28
  9e:	0e 94 0e 01 	call	0x21c	; 0x21c <MTWI_u8_sendData>
		MDELAY_void_milli(HEEPROM_24C02_WRITE_DELAY_MILLI);
  a2:	6a e0       	ldi	r22, 0x0A	; 10
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 93 00 	call	0x126	; 0x126 <MDELAY_void_milli>
		MTWI_u8_sendStopCondition();
  ae:	0e 94 18 01 	call	0x230	; 0x230 <MTWI_u8_sendStopCondition>
		
		MDELAY_void_milli(10);
  b2:	6a e0       	ldi	r22, 0x0A	; 10
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 93 00 	call	0x126	; 0x126 <MDELAY_void_milli>
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <main>:
#include "HAL/EEPROM_24C02/EEPROM_24C02_interface.h"


int main(void)
{
	MDIO_voidInit();
  c4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <MDIO_voidInit>
	MTWI_void_initMaster();
  c8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <MTWI_void_initMaster>
	MGI_void_Enable();
  cc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <MGI_void_Enable>
	


    while (1) 
    {
			HEEPROM_24C02_voidWrite(0,'I');
  d0:	69 e4       	ldi	r22, 0x49	; 73
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 41 00 	call	0x82	; 0x82 <HEEPROM_24C02_voidWrite>
			HEEPROM_24C02_voidWrite(1,'T');
  d8:	64 e5       	ldi	r22, 0x54	; 84
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 41 00 	call	0x82	; 0x82 <HEEPROM_24C02_voidWrite>
			HEEPROM_24C02_voidWrite(2,'I');
  e0:	69 e4       	ldi	r22, 0x49	; 73
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0e 94 41 00 	call	0x82	; 0x82 <HEEPROM_24C02_voidWrite>
			HEEPROM_24C02_voidWrite(3,' ');
  e8:	60 e2       	ldi	r22, 0x20	; 32
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 41 00 	call	0x82	; 0x82 <HEEPROM_24C02_voidWrite>
			HEEPROM_24C02_voidWrite(4,'B');
  f0:	62 e4       	ldi	r22, 0x42	; 66
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	0e 94 41 00 	call	0x82	; 0x82 <HEEPROM_24C02_voidWrite>
			HEEPROM_24C02_voidWrite(5,'E');
  f8:	65 e4       	ldi	r22, 0x45	; 69
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	0e 94 41 00 	call	0x82	; 0x82 <HEEPROM_24C02_voidWrite>
			HEEPROM_24C02_voidWrite(6,'N');
 100:	6e e4       	ldi	r22, 0x4E	; 78
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	0e 94 41 00 	call	0x82	; 0x82 <HEEPROM_24C02_voidWrite>
			HEEPROM_24C02_voidWrite(7,'H');
 108:	68 e4       	ldi	r22, 0x48	; 72
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	0e 94 41 00 	call	0x82	; 0x82 <HEEPROM_24C02_voidWrite>
			HEEPROM_24C02_voidWrite(8,'A');
 110:	61 e4       	ldi	r22, 0x41	; 65
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	0e 94 41 00 	call	0x82	; 0x82 <HEEPROM_24C02_voidWrite>

		MDELAY_void_milli(1000);
 118:	68 ee       	ldi	r22, 0xE8	; 232
 11a:	73 e0       	ldi	r23, 0x03	; 3
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 93 00 	call	0x126	; 0x126 <MDELAY_void_milli>
 124:	d5 cf       	rjmp	.-86     	; 0xd0 <main+0xc>

00000126 <MDELAY_void_milli>:
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 126:	41 c0       	rjmp	.+130    	; 0x1aa <MDELAY_void_milli+0x84>
		if(A_u32_ms >= 1000){
 128:	68 3e       	cpi	r22, 0xE8	; 232
 12a:	23 e0       	ldi	r18, 0x03	; 3
 12c:	72 07       	cpc	r23, r18
 12e:	81 05       	cpc	r24, r1
 130:	91 05       	cpc	r25, r1
 132:	70 f0       	brcs	.+28     	; 0x150 <MDELAY_void_milli+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	3f ef       	ldi	r19, 0xFF	; 255
 136:	49 e6       	ldi	r20, 0x69	; 105
 138:	e8 e1       	ldi	r30, 0x18	; 24
 13a:	31 50       	subi	r19, 0x01	; 1
 13c:	40 40       	sbci	r20, 0x00	; 0
 13e:	e0 40       	sbci	r30, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <MDELAY_void_milli+0x14>
 142:	00 c0       	rjmp	.+0      	; 0x144 <MDELAY_void_milli+0x1e>
 144:	00 00       	nop
			_delay_ms(1000);
			A_u32_ms -= 1000;
 146:	68 5e       	subi	r22, 0xE8	; 232
 148:	73 40       	sbci	r23, 0x03	; 3
 14a:	81 09       	sbc	r24, r1
 14c:	91 09       	sbc	r25, r1
 14e:	2d c0       	rjmp	.+90     	; 0x1aa <MDELAY_void_milli+0x84>
		}
		else if(A_u32_ms >= 100){
 150:	64 36       	cpi	r22, 0x64	; 100
 152:	71 05       	cpc	r23, r1
 154:	81 05       	cpc	r24, r1
 156:	91 05       	cpc	r25, r1
 158:	70 f0       	brcs	.+28     	; 0x176 <MDELAY_void_milli+0x50>
 15a:	ff ef       	ldi	r31, 0xFF	; 255
 15c:	20 e7       	ldi	r18, 0x70	; 112
 15e:	32 e0       	ldi	r19, 0x02	; 2
 160:	f1 50       	subi	r31, 0x01	; 1
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	30 40       	sbci	r19, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <MDELAY_void_milli+0x3a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <MDELAY_void_milli+0x44>
 16a:	00 00       	nop
			_delay_ms(100);
			A_u32_ms -= 100;
 16c:	64 56       	subi	r22, 0x64	; 100
 16e:	71 09       	sbc	r23, r1
 170:	81 09       	sbc	r24, r1
 172:	91 09       	sbc	r25, r1
 174:	1a c0       	rjmp	.+52     	; 0x1aa <MDELAY_void_milli+0x84>
		}else if(A_u32_ms >= 10){
 176:	6a 30       	cpi	r22, 0x0A	; 10
 178:	71 05       	cpc	r23, r1
 17a:	81 05       	cpc	r24, r1
 17c:	91 05       	cpc	r25, r1
 17e:	58 f0       	brcs	.+22     	; 0x196 <MDELAY_void_milli+0x70>
 180:	ef e1       	ldi	r30, 0x1F	; 31
 182:	fe e4       	ldi	r31, 0x4E	; 78
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <MDELAY_void_milli+0x5e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <MDELAY_void_milli+0x64>
 18a:	00 00       	nop
			_delay_ms(10);
			A_u32_ms -= 10;
 18c:	6a 50       	subi	r22, 0x0A	; 10
 18e:	71 09       	sbc	r23, r1
 190:	81 09       	sbc	r24, r1
 192:	91 09       	sbc	r25, r1
 194:	0a c0       	rjmp	.+20     	; 0x1aa <MDELAY_void_milli+0x84>
 196:	ef ec       	ldi	r30, 0xCF	; 207
 198:	f7 e0       	ldi	r31, 0x07	; 7
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <MDELAY_void_milli+0x74>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <MDELAY_void_milli+0x7a>
 1a0:	00 00       	nop
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
 1a2:	61 50       	subi	r22, 0x01	; 1
 1a4:	71 09       	sbc	r23, r1
 1a6:	81 09       	sbc	r24, r1
 1a8:	91 09       	sbc	r25, r1
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 1aa:	61 15       	cp	r22, r1
 1ac:	71 05       	cpc	r23, r1
 1ae:	81 05       	cpc	r24, r1
 1b0:	91 05       	cpc	r25, r1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <MDELAY_void_milli+0x90>
 1b4:	b9 cf       	rjmp	.-142    	; 0x128 <MDELAY_void_milli+0x2>
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
		}
	}
}
 1b6:	08 95       	ret

000001b8 <MDIO_voidInit>:

void MDIO_voidInit(void){
	#if MDIO_ENABLE_PULL_UP_CIRCUIT == 0
		SET_BIT(SFIOR_REG,PUD_BIT);
	#else
		CLR_BIT(SFIOR_REG,PUD_BIT);
 1b8:	80 b7       	in	r24, 0x30	; 48
 1ba:	8b 7f       	andi	r24, 0xFB	; 251
 1bc:	80 bf       	out	0x30, r24	; 48
 1be:	08 95       	ret

000001c0 <MGI_void_Enable>:
#include "GI_config.h"
#include "GI_interface.h"
#include "GI_private.h"

void MGI_void_Enable(void){
	SET_BIT(SREG_REG,SREG_I_BIT);	
 1c0:	8f b7       	in	r24, 0x3f	; 63
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	8f bf       	out	0x3f, r24	; 63
 1c6:	08 95       	ret

000001c8 <MTWI_void_initMaster>:
		
	L_u8Status = (((u8)TWSR_REG) >> 3)<<3;
		*A_u8_copyData = (u8)TWDR_REG;
		
		return L_u8Status;
}
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	80 b9       	out	0x00, r24	; 0
 1cc:	81 b1       	in	r24, 0x01	; 1
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	81 b9       	out	0x01, r24	; 1
 1d2:	81 b1       	in	r24, 0x01	; 1
 1d4:	8d 7f       	andi	r24, 0xFD	; 253
 1d6:	81 b9       	out	0x01, r24	; 1
 1d8:	86 b7       	in	r24, 0x36	; 54
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	86 bf       	out	0x36, r24	; 54
 1de:	08 95       	ret

000001e0 <MTWI_u8_sendStartCondition>:
 1e0:	86 b7       	in	r24, 0x36	; 54
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	86 bf       	out	0x36, r24	; 54
 1e6:	86 b7       	in	r24, 0x36	; 54
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	86 bf       	out	0x36, r24	; 54
 1ec:	06 b6       	in	r0, 0x36	; 54
 1ee:	07 fe       	sbrs	r0, 7
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <MTWI_u8_sendStartCondition+0xc>
 1f2:	81 b1       	in	r24, 0x01	; 1
 1f4:	88 7f       	andi	r24, 0xF8	; 248
 1f6:	08 95       	ret

000001f8 <MTWI_u8_sendSlaveAddress>:
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	61 70       	andi	r22, 0x01	; 1
 200:	86 2b       	or	r24, r22
 202:	83 b9       	out	0x03, r24	; 3
 204:	86 b7       	in	r24, 0x36	; 54
 206:	8f 7d       	andi	r24, 0xDF	; 223
 208:	86 bf       	out	0x36, r24	; 54
 20a:	86 b7       	in	r24, 0x36	; 54
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	86 bf       	out	0x36, r24	; 54
 210:	06 b6       	in	r0, 0x36	; 54
 212:	07 fe       	sbrs	r0, 7
 214:	fd cf       	rjmp	.-6      	; 0x210 <MTWI_u8_sendSlaveAddress+0x18>
 216:	81 b1       	in	r24, 0x01	; 1
 218:	88 7f       	andi	r24, 0xF8	; 248
 21a:	08 95       	ret

0000021c <MTWI_u8_sendData>:
 21c:	83 b9       	out	0x03, r24	; 3
 21e:	86 b7       	in	r24, 0x36	; 54
 220:	80 68       	ori	r24, 0x80	; 128
 222:	86 bf       	out	0x36, r24	; 54
 224:	06 b6       	in	r0, 0x36	; 54
 226:	07 fe       	sbrs	r0, 7
 228:	fd cf       	rjmp	.-6      	; 0x224 <MTWI_u8_sendData+0x8>
 22a:	81 b1       	in	r24, 0x01	; 1
 22c:	88 7f       	andi	r24, 0xF8	; 248
 22e:	08 95       	ret

00000230 <MTWI_u8_sendStopCondition>:
u8 MTWI_u8_sendStopCondition(void){
	u8 L_u8Status = 0x00;
	
	//TWI STOP Condition Bit
	SET_BIT(TWCR_REG,4);
 230:	86 b7       	in	r24, 0x36	; 54
 232:	80 61       	ori	r24, 0x10	; 16
 234:	86 bf       	out	0x36, r24	; 54
	
	//Clear FLAG
	SET_BIT(TWCR_REG,7);
 236:	86 b7       	in	r24, 0x36	; 54
 238:	80 68       	ori	r24, 0x80	; 128
 23a:	86 bf       	out	0x36, r24	; 54
	
	//Wait
	while(GET_BIT(TWCR_REG,4) == 1);
 23c:	06 b6       	in	r0, 0x36	; 54
 23e:	04 fc       	sbrc	r0, 4
 240:	fd cf       	rjmp	.-6      	; 0x23c <MTWI_u8_sendStopCondition+0xc>
	
	//get status
	L_u8Status = (((u8)TWSR_REG) >> 3)<<3;
 242:	81 b1       	in	r24, 0x01	; 1
	
	return L_u8Status;
}
 244:	88 7f       	andi	r24, 0xF8	; 248
 246:	08 95       	ret

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
