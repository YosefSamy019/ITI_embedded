
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000e78  00000f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800096  00800096  00000f42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c1d  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e92  00000000  00000000  00003ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000150b  00000000  00000000  00004d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a00  00000000  00000000  00006294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001434  00000000  00000000  00006c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ea7  00000000  00000000  000080c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00009f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_1>
   8:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_2>
   c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_5>
  18:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3a       	cpi	r26, 0xAB	; 171
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5d 02 	call	0x4ba	; 0x4ba <main>
  8a:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HLCD_void_send>:
		HLCD_RETURN_HOME_CMD(),
		HLCD_RETURN_HOME_CMD_RS,
		HLCD_RETURN_HOME_CMD_RW,
		HLCD_RETURN_HOME_CMD_TIME_US
		);
}
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	ec 01       	movw	r28, r24
  a8:	b6 2e       	mov	r11, r22
  aa:	a2 2e       	mov	r10, r18
  ac:	67 01       	movw	r12, r14
  ae:	78 01       	movw	r14, r16
  b0:	64 2f       	mov	r22, r20
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
  b8:	6a 2d       	mov	r22, r10
  ba:	8a 81       	ldd	r24, Y+2	; 0x02
  bc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
  c0:	88 81       	ld	r24, Y
  c2:	85 fd       	sbrc	r24, 5
  c4:	18 c0       	rjmp	.+48     	; 0xf6 <HLCD_void_send+0x64>
  c6:	29 c0       	rjmp	.+82     	; 0x11a <HLCD_void_send+0x88>
  c8:	21 2f       	mov	r18, r17
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	47 e0       	ldi	r20, 0x07	; 7
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	42 1b       	sub	r20, r18
  d2:	53 0b       	sbc	r21, r19
  d4:	8b 2d       	mov	r24, r11
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <HLCD_void_send+0x4c>
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	4a 95       	dec	r20
  e0:	e2 f7       	brpl	.-8      	; 0xda <HLCD_void_send+0x48>
  e2:	68 2f       	mov	r22, r24
  e4:	61 70       	andi	r22, 0x01	; 1
  e6:	fe 01       	movw	r30, r28
  e8:	e2 0f       	add	r30, r18
  ea:	f3 1f       	adc	r31, r19
  ec:	84 81       	ldd	r24, Z+4	; 0x04
  ee:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
  f2:	1f 5f       	subi	r17, 0xFF	; 255
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <HLCD_void_send+0x66>
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	18 30       	cpi	r17, 0x08	; 8
  fa:	30 f3       	brcs	.-52     	; 0xc8 <HLCD_void_send+0x36>
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 104:	68 ee       	ldi	r22, 0xE8	; 232
 106:	73 e0       	ldi	r23, 0x03	; 3
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <MDELAY_void_micro>
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 118:	52 c0       	rjmp	.+164    	; 0x1be <HLCD_void_send+0x12c>
 11a:	6b 2d       	mov	r22, r11
 11c:	66 1f       	adc	r22, r22
 11e:	66 27       	eor	r22, r22
 120:	66 1f       	adc	r22, r22
 122:	8c 81       	ldd	r24, Y+4	; 0x04
 124:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 128:	b6 fa       	bst	r11, 6
 12a:	66 27       	eor	r22, r22
 12c:	60 f9       	bld	r22, 0
 12e:	8d 81       	ldd	r24, Y+5	; 0x05
 130:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 134:	b5 fa       	bst	r11, 5
 136:	66 27       	eor	r22, r22
 138:	60 f9       	bld	r22, 0
 13a:	8e 81       	ldd	r24, Y+6	; 0x06
 13c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 140:	b4 fa       	bst	r11, 4
 142:	66 27       	eor	r22, r22
 144:	60 f9       	bld	r22, 0
 146:	8f 81       	ldd	r24, Y+7	; 0x07
 148:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 154:	68 ee       	ldi	r22, 0xE8	; 232
 156:	73 e0       	ldi	r23, 0x03	; 3
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <MDELAY_void_micro>
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 168:	68 ee       	ldi	r22, 0xE8	; 232
 16a:	73 e0       	ldi	r23, 0x03	; 3
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 5e 03 	call	0x6bc	; 0x6bc <MDELAY_void_micro>
 174:	b3 fa       	bst	r11, 3
 176:	66 27       	eor	r22, r22
 178:	60 f9       	bld	r22, 0
 17a:	8c 81       	ldd	r24, Y+4	; 0x04
 17c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 180:	b2 fa       	bst	r11, 2
 182:	66 27       	eor	r22, r22
 184:	60 f9       	bld	r22, 0
 186:	8d 81       	ldd	r24, Y+5	; 0x05
 188:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 18c:	b1 fa       	bst	r11, 1
 18e:	66 27       	eor	r22, r22
 190:	60 f9       	bld	r22, 0
 192:	8e 81       	ldd	r24, Y+6	; 0x06
 194:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 198:	6b 2d       	mov	r22, r11
 19a:	61 70       	andi	r22, 0x01	; 1
 19c:	8f 81       	ldd	r24, Y+7	; 0x07
 19e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 1aa:	68 ee       	ldi	r22, 0xE8	; 232
 1ac:	73 e0       	ldi	r23, 0x03	; 3
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <MDELAY_void_micro>
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MDIO_voidSetPinVal>
 1be:	c7 01       	movw	r24, r14
 1c0:	b6 01       	movw	r22, r12
 1c2:	68 51       	subi	r22, 0x18	; 24
 1c4:	7c 4f       	sbci	r23, 0xFC	; 252
 1c6:	8f 4f       	sbci	r24, 0xFF	; 255
 1c8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ca:	0e 94 5e 03 	call	0x6bc	; 0x6bc <MDELAY_void_micro>
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	bf 90       	pop	r11
 1e0:	af 90       	pop	r10
 1e2:	08 95       	ret

000001e4 <HLCD_HLCD_t_LcdCreate>:
 1e4:	9f 92       	push	r9
 1e6:	af 92       	push	r10
 1e8:	bf 92       	push	r11
 1ea:	cf 92       	push	r12
 1ec:	df 92       	push	r13
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	2c 97       	sbiw	r28, 0x0c	; 12
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	6c 01       	movw	r12, r24
 20c:	b6 2e       	mov	r11, r22
 20e:	a4 2e       	mov	r10, r20
 210:	92 2e       	mov	r9, r18
 212:	78 01       	movw	r14, r16
 214:	68 ee       	ldi	r22, 0xE8	; 232
 216:	73 e0       	ldi	r23, 0x03	; 3
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <MDELAY_void_micro>
 220:	9c 82       	std	Y+4, r9	; 0x04
 222:	ab 82       	std	Y+3, r10	; 0x03
 224:	ba 82       	std	Y+2, r11	; 0x02
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	89 2d       	mov	r24, r9
 22a:	0e 94 9c 03 	call	0x738	; 0x738 <MDIO_voidSetPinDir>
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	8a 2d       	mov	r24, r10
 232:	0e 94 9c 03 	call	0x738	; 0x738 <MDIO_voidSetPinDir>
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	8b 2d       	mov	r24, r11
 23a:	0e 94 9c 03 	call	0x738	; 0x738 <MDIO_voidSetPinDir>
 23e:	10 e0       	ldi	r17, 0x00	; 0
 240:	12 c0       	rjmp	.+36     	; 0x266 <HLCD_HLCD_t_LcdCreate+0x82>
 242:	81 2f       	mov	r24, r17
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	f7 01       	movw	r30, r14
 248:	e8 0f       	add	r30, r24
 24a:	f9 1f       	adc	r31, r25
 24c:	20 81       	ld	r18, Z
 24e:	a5 e0       	ldi	r26, 0x05	; 5
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	ac 0f       	add	r26, r28
 254:	bd 1f       	adc	r27, r29
 256:	a8 0f       	add	r26, r24
 258:	b9 1f       	adc	r27, r25
 25a:	2c 93       	st	X, r18
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	80 81       	ld	r24, Z
 260:	0e 94 9c 03 	call	0x738	; 0x738 <MDIO_voidSetPinDir>
 264:	1f 5f       	subi	r17, 0xFF	; 255
 266:	18 30       	cpi	r17, 0x08	; 8
 268:	60 f3       	brcs	.-40     	; 0x242 <HLCD_HLCD_t_LcdCreate+0x5e>
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	80 66       	ori	r24, 0x60	; 96
 26e:	8f 77       	andi	r24, 0x7F	; 127
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	17 e2       	ldi	r17, 0x27	; 39
 274:	e1 2e       	mov	r14, r17
 276:	f1 2c       	mov	r15, r1
 278:	00 e0       	ldi	r16, 0x00	; 0
 27a:	10 e0       	ldi	r17, 0x00	; 0
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	68 e3       	ldi	r22, 0x38	; 56
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_void_send>
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	83 7f       	andi	r24, 0xF3	; 243
 28e:	8f 7e       	andi	r24, 0xEF	; 239
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	e1 2c       	mov	r14, r1
 294:	f1 2c       	mov	r15, r1
 296:	87 01       	movw	r16, r14
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	68 e0       	ldi	r22, 0x08	; 8
 29e:	ce 01       	movw	r24, r28
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_void_send>
 2a6:	1a ef       	ldi	r17, 0xFA	; 250
 2a8:	e1 2e       	mov	r14, r17
 2aa:	15 e0       	ldi	r17, 0x05	; 5
 2ac:	f1 2e       	mov	r15, r17
 2ae:	00 e0       	ldi	r16, 0x00	; 0
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	ce 01       	movw	r24, r28
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_void_send>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_void_send>
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	8d 7f       	andi	r24, 0xFD	; 253
 2d4:	89 83       	std	Y+1, r24	; 0x01
 2d6:	17 e2       	ldi	r17, 0x27	; 39
 2d8:	e1 2e       	mov	r14, r17
 2da:	f1 2c       	mov	r15, r1
 2dc:	00 e0       	ldi	r16, 0x00	; 0
 2de:	10 e0       	ldi	r17, 0x00	; 0
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	66 e0       	ldi	r22, 0x06	; 6
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_void_send>
 2ee:	8c e0       	ldi	r24, 0x0C	; 12
 2f0:	fe 01       	movw	r30, r28
 2f2:	31 96       	adiw	r30, 0x01	; 1
 2f4:	d6 01       	movw	r26, r12
 2f6:	01 90       	ld	r0, Z+
 2f8:	0d 92       	st	X+, r0
 2fa:	8a 95       	dec	r24
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <HLCD_HLCD_t_LcdCreate+0x112>
 2fe:	c6 01       	movw	r24, r12
 300:	2c 96       	adiw	r28, 0x0c	; 12
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	ff 90       	pop	r15
 316:	ef 90       	pop	r14
 318:	df 90       	pop	r13
 31a:	cf 90       	pop	r12
 31c:	bf 90       	pop	r11
 31e:	af 90       	pop	r10
 320:	9f 90       	pop	r9
 322:	08 95       	ret

00000324 <HLCD_void_DisplayOn>:
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	fc 01       	movw	r30, r24
 32e:	90 81       	ld	r25, Z
 330:	94 60       	ori	r25, 0x04	; 4
 332:	90 83       	st	Z, r25
 334:	93 fb       	bst	r25, 3
 336:	66 27       	eor	r22, r22
 338:	60 f9       	bld	r22, 0
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	92 95       	swap	r25
 342:	91 70       	andi	r25, 0x01	; 1
 344:	6c 60       	ori	r22, 0x0C	; 12
 346:	69 2b       	or	r22, r25
 348:	e1 2c       	mov	r14, r1
 34a:	f1 2c       	mov	r15, r1
 34c:	87 01       	movw	r16, r14
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	cf 01       	movw	r24, r30
 354:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_void_send>
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	08 95       	ret

00000362 <HLCD_void_WriteCharacter>:
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	1b e2       	ldi	r17, 0x2B	; 43
 36c:	e1 2e       	mov	r14, r17
 36e:	f1 2c       	mov	r15, r1
 370:	00 e0       	ldi	r16, 0x00	; 0
 372:	10 e0       	ldi	r17, 0x00	; 0
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_void_send>
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	08 95       	ret

00000386 <HLCD_void_WriteString>:
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	8c 01       	movw	r16, r24
 390:	eb 01       	movw	r28, r22
 392:	04 c0       	rjmp	.+8      	; 0x39c <HLCD_void_WriteString+0x16>
 394:	c8 01       	movw	r24, r16
 396:	0e 94 b1 01 	call	0x362	; 0x362 <HLCD_void_WriteCharacter>
 39a:	21 96       	adiw	r28, 0x01	; 1
 39c:	68 81       	ld	r22, Y
 39e:	61 11       	cpse	r22, r1
 3a0:	f9 cf       	rjmp	.-14     	; 0x394 <HLCD_void_WriteString+0xe>
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <HLCD_void_setCursor>:
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	20 e4       	ldi	r18, 0x40	; 64
 3b6:	42 9f       	mul	r20, r18
 3b8:	60 0d       	add	r22, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	60 68       	ori	r22, 0x80	; 128
 3be:	17 e2       	ldi	r17, 0x27	; 39
 3c0:	e1 2e       	mov	r14, r17
 3c2:	f1 2c       	mov	r15, r1
 3c4:	00 e0       	ldi	r16, 0x00	; 0
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	0e 94 49 00 	call	0x92	; 0x92 <HLCD_void_send>
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	08 95       	ret

000003da <HLCD_void_WriteNumber>:

void HLCD_void_WriteNumber(HLCD_t *A_HLCD_t_lcd,s32 A_s32_number){
 3da:	8f 92       	push	r8
 3dc:	9f 92       	push	r9
 3de:	af 92       	push	r10
 3e0:	bf 92       	push	r11
 3e2:	cf 92       	push	r12
 3e4:	df 92       	push	r13
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
 3f4:	cb 01       	movw	r24, r22
 3f6:	ba 01       	movw	r22, r20
	u8 L_u8_signFlag;
	s32 L_s32_ReversedNum =0;
	u8 L_digitsCounter =0;
	
	if(A_s32_number >= 0){
 3f8:	99 23       	and	r25, r25
 3fa:	4c f4       	brge	.+18     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		L_u8_signFlag = 0;
	}else{
		L_u8_signFlag = 1;
		A_s32_number = A_s32_number * -1;
 3fc:	90 95       	com	r25
 3fe:	80 95       	com	r24
 400:	70 95       	com	r23
 402:	61 95       	neg	r22
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	8f 4f       	sbci	r24, 0xFF	; 255
 408:	9f 4f       	sbci	r25, 0xFF	; 255
	u8 L_digitsCounter =0;
	
	if(A_s32_number >= 0){
		L_u8_signFlag = 0;
	}else{
		L_u8_signFlag = 1;
 40a:	01 e0       	ldi	r16, 0x01	; 1
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	u8 L_u8_signFlag;
	s32 L_s32_ReversedNum =0;
	u8 L_digitsCounter =0;
	
	if(A_s32_number >= 0){
		L_u8_signFlag = 0;
 40e:	00 e0       	ldi	r16, 0x00	; 0
	}else{
		L_u8_signFlag = 1;
 410:	10 e0       	ldi	r17, 0x00	; 0
 412:	c1 2c       	mov	r12, r1
 414:	d1 2c       	mov	r13, r1
 416:	76 01       	movw	r14, r12
		A_s32_number = A_s32_number * -1;
	}
	
	do 
	{
		L_digitsCounter++;
 418:	1f 5f       	subi	r17, 0xFF	; 255
		L_s32_ReversedNum = L_s32_ReversedNum*10 + A_s32_number%10;
 41a:	cc 0c       	add	r12, r12
 41c:	dd 1c       	adc	r13, r13
 41e:	ee 1c       	adc	r14, r14
 420:	ff 1c       	adc	r15, r15
 422:	46 01       	movw	r8, r12
 424:	57 01       	movw	r10, r14
 426:	88 0c       	add	r8, r8
 428:	99 1c       	adc	r9, r9
 42a:	aa 1c       	adc	r10, r10
 42c:	bb 1c       	adc	r11, r11
 42e:	88 0c       	add	r8, r8
 430:	99 1c       	adc	r9, r9
 432:	aa 1c       	adc	r10, r10
 434:	bb 1c       	adc	r11, r11
 436:	c8 0c       	add	r12, r8
 438:	d9 1c       	adc	r13, r9
 43a:	ea 1c       	adc	r14, r10
 43c:	fb 1c       	adc	r15, r11
 43e:	2a e0       	ldi	r18, 0x0A	; 10
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	0e 94 77 06 	call	0xcee	; 0xcee <__divmodsi4>
 44a:	c6 0e       	add	r12, r22
 44c:	d7 1e       	adc	r13, r23
 44e:	e8 1e       	adc	r14, r24
 450:	f9 1e       	adc	r15, r25
		A_s32_number = A_s32_number / 10;
 452:	62 2f       	mov	r22, r18
 454:	73 2f       	mov	r23, r19
 456:	84 2f       	mov	r24, r20
 458:	95 2f       	mov	r25, r21
		
	} while (A_s32_number != 0);
 45a:	61 15       	cp	r22, r1
 45c:	71 05       	cpc	r23, r1
 45e:	81 05       	cpc	r24, r1
 460:	91 05       	cpc	r25, r1
 462:	d1 f6       	brne	.-76     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	
	if(L_u8_signFlag == 1){
 464:	01 30       	cpi	r16, 0x01	; 1
 466:	d1 f4       	brne	.+52     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'-');
 468:	6d e2       	ldi	r22, 0x2D	; 45
 46a:	ce 01       	movw	r24, r28
 46c:	0e 94 b1 01 	call	0x362	; 0x362 <HLCD_void_WriteCharacter>
 470:	15 c0       	rjmp	.+42     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
	}
	
	while(L_digitsCounter > 0){
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'0'+  L_s32_ReversedNum%10);
 472:	c7 01       	movw	r24, r14
 474:	b6 01       	movw	r22, r12
 476:	2a e0       	ldi	r18, 0x0A	; 10
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	0e 94 77 06 	call	0xcee	; 0xcee <__divmodsi4>
 482:	92 2e       	mov	r9, r18
 484:	a3 2e       	mov	r10, r19
 486:	b4 2e       	mov	r11, r20
 488:	05 2f       	mov	r16, r21
 48a:	60 5d       	subi	r22, 0xD0	; 208
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 b1 01 	call	0x362	; 0x362 <HLCD_void_WriteCharacter>
		L_s32_ReversedNum = L_s32_ReversedNum / 10;
 492:	c9 2c       	mov	r12, r9
 494:	da 2c       	mov	r13, r10
 496:	eb 2c       	mov	r14, r11
 498:	f0 2e       	mov	r15, r16
		L_digitsCounter--;
 49a:	11 50       	subi	r17, 0x01	; 1
	
	if(L_u8_signFlag == 1){
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'-');
	}
	
	while(L_digitsCounter > 0){
 49c:	11 11       	cpse	r17, r1
 49e:	e9 cf       	rjmp	.-46     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'0'+  L_s32_ReversedNum%10);
		L_s32_ReversedNum = L_s32_ReversedNum / 10;
		L_digitsCounter--;
	}
	
}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	bf 90       	pop	r11
 4b2:	af 90       	pop	r10
 4b4:	9f 90       	pop	r9
 4b6:	8f 90       	pop	r8
 4b8:	08 95       	ret

000004ba <main>:
#include "HAL/KEYPAD/KEYPAD_interface.h"



int main(void)
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	64 97       	sbiw	r28, 0x14	; 20
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
	Pin_t pins[] = {PinA7,PinA6,PinA5,PinA4,PinA3,PinA2,PinA1,PinA0};
 4ce:	88 e0       	ldi	r24, 0x08	; 8
 4d0:	e0 e7       	ldi	r30, 0x70	; 112
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	de 01       	movw	r26, r28
 4d6:	11 96       	adiw	r26, 0x01	; 1
 4d8:	01 90       	ld	r0, Z+
 4da:	0d 92       	st	X+, r0
 4dc:	8a 95       	dec	r24
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <main+0x1e>
	HLCD_t lcd = HLCD_HLCD_t_LcdCreate(PinB0,PinB1,PinB2,pins);
 4e0:	8e 01       	movw	r16, r28
 4e2:	0f 5f       	subi	r16, 0xFF	; 255
 4e4:	1f 4f       	sbci	r17, 0xFF	; 255
 4e6:	22 eb       	ldi	r18, 0xB2	; 178
 4e8:	41 eb       	ldi	r20, 0xB1	; 177
 4ea:	60 eb       	ldi	r22, 0xB0	; 176
 4ec:	ce 01       	movw	r24, r28
 4ee:	09 96       	adiw	r24, 0x09	; 9
 4f0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <HLCD_HLCD_t_LcdCreate>
	
	MICU_voidInit();
 4f4:	0e 94 a8 04 	call	0x950	; 0x950 <MICU_voidInit>
	MGI_void_Enable();
 4f8:	0e 94 a4 04 	call	0x948	; 0x948 <MGI_void_Enable>
	
	HLCD_void_DisplayOn(&lcd);
 4fc:	ce 01       	movw	r24, r28
 4fe:	09 96       	adiw	r24, 0x09	; 9
 500:	0e 94 92 01 	call	0x324	; 0x324 <HLCD_void_DisplayOn>
	HLCD_void_WriteString(&lcd,"ON");
 504:	68 e7       	ldi	r22, 0x78	; 120
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	ce 01       	movw	r24, r28
 50a:	09 96       	adiw	r24, 0x09	; 9
 50c:	0e 94 c3 01 	call	0x386	; 0x386 <HLCD_void_WriteString>
	MDELAY_void_milli(1000);
 510:	68 ee       	ldi	r22, 0xE8	; 232
 512:	73 e0       	ldi	r23, 0x03	; 3
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 15 03 	call	0x62a	; 0x62a <MDELAY_void_milli>

	while(1){
		
		HLCD_void_setCursor(&lcd,0,0);
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	ce 01       	movw	r24, r28
 522:	09 96       	adiw	r24, 0x09	; 9
 524:	0e 94 d6 01 	call	0x3ac	; 0x3ac <HLCD_void_setCursor>
		HLCD_void_WriteString(&lcd,"LOW_ms:  ");
 528:	6b e7       	ldi	r22, 0x7B	; 123
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	ce 01       	movw	r24, r28
 52e:	09 96       	adiw	r24, 0x09	; 9
 530:	0e 94 c3 01 	call	0x386	; 0x386 <HLCD_void_WriteString>
		HLCD_void_WriteNumber(&lcd,MICU_u64ReadTimeLowMicro()/1000);
 534:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MICU_u64ReadTimeLowMicro>
 538:	0f 2e       	mov	r0, r31
 53a:	f8 ee       	ldi	r31, 0xE8	; 232
 53c:	af 2e       	mov	r10, r31
 53e:	f0 2d       	mov	r31, r0
 540:	0f 2e       	mov	r0, r31
 542:	f3 e0       	ldi	r31, 0x03	; 3
 544:	bf 2e       	mov	r11, r31
 546:	f0 2d       	mov	r31, r0
 548:	c1 2c       	mov	r12, r1
 54a:	d1 2c       	mov	r13, r1
 54c:	e1 2c       	mov	r14, r1
 54e:	f1 2c       	mov	r15, r1
 550:	00 e0       	ldi	r16, 0x00	; 0
 552:	10 e0       	ldi	r17, 0x00	; 0
 554:	0e 94 a3 06 	call	0xd46	; 0xd46 <__udivdi3>
 558:	64 2f       	mov	r22, r20
 55a:	75 2f       	mov	r23, r21
 55c:	42 2f       	mov	r20, r18
 55e:	53 2f       	mov	r21, r19
 560:	ce 01       	movw	r24, r28
 562:	09 96       	adiw	r24, 0x09	; 9
 564:	0e 94 ed 01 	call	0x3da	; 0x3da <HLCD_void_WriteNumber>
		HLCD_void_WriteString(&lcd,"     ");
 568:	65 e8       	ldi	r22, 0x85	; 133
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	ce 01       	movw	r24, r28
 56e:	09 96       	adiw	r24, 0x09	; 9
 570:	0e 94 c3 01 	call	0x386	; 0x386 <HLCD_void_WriteString>

		HLCD_void_setCursor(&lcd,0,1);
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	ce 01       	movw	r24, r28
 57a:	09 96       	adiw	r24, 0x09	; 9
 57c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <HLCD_void_setCursor>
		HLCD_void_WriteString(&lcd,"HIGH_ms: ");
 580:	6b e8       	ldi	r22, 0x8B	; 139
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	ce 01       	movw	r24, r28
 586:	09 96       	adiw	r24, 0x09	; 9
 588:	0e 94 c3 01 	call	0x386	; 0x386 <HLCD_void_WriteString>
		HLCD_void_WriteNumber(&lcd,MICU_u64ReadTimeHighMicro()/1000);	
 58c:	0e 94 ca 04 	call	0x994	; 0x994 <MICU_u64ReadTimeHighMicro>
 590:	0e 94 a3 06 	call	0xd46	; 0xd46 <__udivdi3>
 594:	64 2f       	mov	r22, r20
 596:	75 2f       	mov	r23, r21
 598:	42 2f       	mov	r20, r18
 59a:	53 2f       	mov	r21, r19
 59c:	ce 01       	movw	r24, r28
 59e:	09 96       	adiw	r24, 0x09	; 9
 5a0:	0e 94 ed 01 	call	0x3da	; 0x3da <HLCD_void_WriteNumber>
		HLCD_void_WriteString(&lcd,"     ");
 5a4:	65 e8       	ldi	r22, 0x85	; 133
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	ce 01       	movw	r24, r28
 5aa:	09 96       	adiw	r24, 0x09	; 9
 5ac:	0e 94 c3 01 	call	0x386	; 0x386 <HLCD_void_WriteString>

		MDELAY_void_milli(100);
 5b0:	64 e6       	ldi	r22, 0x64	; 100
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 15 03 	call	0x62a	; 0x62a <MDELAY_void_milli>
 5bc:	af cf       	rjmp	.-162    	; 0x51c <main+0x62>

000005be <__vector_16>:
void MADC_voidSetCallback( void (*A_ptr2voidFunU32)(u32) ){
	G_ptr2voidFunU32 = A_ptr2voidFunU32;
}

void __vector_16 (void) __attribute__ ((signal,used, externally_visible));
void __vector_16 (void){
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
 5c8:	2f 93       	push	r18
 5ca:	3f 93       	push	r19
 5cc:	4f 93       	push	r20
 5ce:	5f 93       	push	r21
 5d0:	6f 93       	push	r22
 5d2:	7f 93       	push	r23
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
 5d8:	af 93       	push	r26
 5da:	bf 93       	push	r27
 5dc:	ef 93       	push	r30
 5de:	ff 93       	push	r31
	if(G_ptr2voidFunU32 != NULL){
 5e0:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 5e4:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 5e8:	30 97       	sbiw	r30, 0x00	; 0
 5ea:	71 f0       	breq	.+28     	; 0x608 <__vector_16+0x4a>
		u32 returnVal = 0;

		//read
		#if MADC_ADJUST==0
			returnVal = ((int)(ADCL_REG) + ((int)ADCH_REG<<8));
 5ec:	84 b1       	in	r24, 0x04	; 4
 5ee:	65 b1       	in	r22, 0x05	; 5
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	76 2f       	mov	r23, r22
 5f4:	66 27       	eor	r22, r22
 5f6:	68 0f       	add	r22, r24
 5f8:	71 1d       	adc	r23, r1
 5fa:	07 2e       	mov	r0, r23
 5fc:	00 0c       	add	r0, r0
 5fe:	88 0b       	sbc	r24, r24
 600:	99 0b       	sbc	r25, r25
			returnVal = (int)ADCL_REG>>6 + (int)ADCH_REG<<2;
		#else
			#error "ADC ERROR, adjust undefined"
		#endif
		
		if(G_ptr2voidFunU32 != NULL){
 602:	30 97       	sbiw	r30, 0x00	; 0
 604:	09 f0       	breq	.+2      	; 0x608 <__vector_16+0x4a>
			G_ptr2voidFunU32(returnVal);
 606:	09 95       	icall
		}
	}
}
 608:	ff 91       	pop	r31
 60a:	ef 91       	pop	r30
 60c:	bf 91       	pop	r27
 60e:	af 91       	pop	r26
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	7f 91       	pop	r23
 616:	6f 91       	pop	r22
 618:	5f 91       	pop	r21
 61a:	4f 91       	pop	r20
 61c:	3f 91       	pop	r19
 61e:	2f 91       	pop	r18
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <MDELAY_void_milli>:
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 62a:	41 c0       	rjmp	.+130    	; 0x6ae <MDELAY_void_milli+0x84>
		if(A_u32_ms >= 1000){
 62c:	68 3e       	cpi	r22, 0xE8	; 232
 62e:	23 e0       	ldi	r18, 0x03	; 3
 630:	72 07       	cpc	r23, r18
 632:	81 05       	cpc	r24, r1
 634:	91 05       	cpc	r25, r1
 636:	70 f0       	brcs	.+28     	; 0x654 <MDELAY_void_milli+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 638:	3f ef       	ldi	r19, 0xFF	; 255
 63a:	49 e6       	ldi	r20, 0x69	; 105
 63c:	e8 e1       	ldi	r30, 0x18	; 24
 63e:	31 50       	subi	r19, 0x01	; 1
 640:	40 40       	sbci	r20, 0x00	; 0
 642:	e0 40       	sbci	r30, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <MDELAY_void_milli+0x14>
 646:	00 c0       	rjmp	.+0      	; 0x648 <MDELAY_void_milli+0x1e>
 648:	00 00       	nop
			_delay_ms(1000);
			A_u32_ms -= 1000;
 64a:	68 5e       	subi	r22, 0xE8	; 232
 64c:	73 40       	sbci	r23, 0x03	; 3
 64e:	81 09       	sbc	r24, r1
 650:	91 09       	sbc	r25, r1
 652:	2d c0       	rjmp	.+90     	; 0x6ae <MDELAY_void_milli+0x84>
		}
		else if(A_u32_ms >= 100){
 654:	64 36       	cpi	r22, 0x64	; 100
 656:	71 05       	cpc	r23, r1
 658:	81 05       	cpc	r24, r1
 65a:	91 05       	cpc	r25, r1
 65c:	70 f0       	brcs	.+28     	; 0x67a <MDELAY_void_milli+0x50>
 65e:	ff ef       	ldi	r31, 0xFF	; 255
 660:	20 e7       	ldi	r18, 0x70	; 112
 662:	32 e0       	ldi	r19, 0x02	; 2
 664:	f1 50       	subi	r31, 0x01	; 1
 666:	20 40       	sbci	r18, 0x00	; 0
 668:	30 40       	sbci	r19, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <MDELAY_void_milli+0x3a>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <MDELAY_void_milli+0x44>
 66e:	00 00       	nop
			_delay_ms(100);
			A_u32_ms -= 100;
 670:	64 56       	subi	r22, 0x64	; 100
 672:	71 09       	sbc	r23, r1
 674:	81 09       	sbc	r24, r1
 676:	91 09       	sbc	r25, r1
 678:	1a c0       	rjmp	.+52     	; 0x6ae <MDELAY_void_milli+0x84>
		}else if(A_u32_ms >= 10){
 67a:	6a 30       	cpi	r22, 0x0A	; 10
 67c:	71 05       	cpc	r23, r1
 67e:	81 05       	cpc	r24, r1
 680:	91 05       	cpc	r25, r1
 682:	58 f0       	brcs	.+22     	; 0x69a <MDELAY_void_milli+0x70>
 684:	ef e1       	ldi	r30, 0x1F	; 31
 686:	fe e4       	ldi	r31, 0x4E	; 78
 688:	31 97       	sbiw	r30, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <MDELAY_void_milli+0x5e>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <MDELAY_void_milli+0x64>
 68e:	00 00       	nop
			_delay_ms(10);
			A_u32_ms -= 10;
 690:	6a 50       	subi	r22, 0x0A	; 10
 692:	71 09       	sbc	r23, r1
 694:	81 09       	sbc	r24, r1
 696:	91 09       	sbc	r25, r1
 698:	0a c0       	rjmp	.+20     	; 0x6ae <MDELAY_void_milli+0x84>
 69a:	ef ec       	ldi	r30, 0xCF	; 207
 69c:	f7 e0       	ldi	r31, 0x07	; 7
 69e:	31 97       	sbiw	r30, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <MDELAY_void_milli+0x74>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <MDELAY_void_milli+0x7a>
 6a4:	00 00       	nop
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
 6a6:	61 50       	subi	r22, 0x01	; 1
 6a8:	71 09       	sbc	r23, r1
 6aa:	81 09       	sbc	r24, r1
 6ac:	91 09       	sbc	r25, r1
#include "../../LIB/STD_TYPES.h"

#include "DELAY_interface.h"

void MDELAY_void_milli(u32 A_u32_ms){
	while(A_u32_ms>0){
 6ae:	61 15       	cp	r22, r1
 6b0:	71 05       	cpc	r23, r1
 6b2:	81 05       	cpc	r24, r1
 6b4:	91 05       	cpc	r25, r1
 6b6:	09 f0       	breq	.+2      	; 0x6ba <MDELAY_void_milli+0x90>
 6b8:	b9 cf       	rjmp	.-142    	; 0x62c <MDELAY_void_milli+0x2>
		}else{
			_delay_ms(1);
			A_u32_ms -= 1;
		}
	}
}
 6ba:	08 95       	ret

000006bc <MDELAY_void_micro>:

void MDELAY_void_micro(u32 A_u32_us){
	while(A_u32_us>0){
 6bc:	37 c0       	rjmp	.+110    	; 0x72c <MDELAY_void_micro+0x70>
		if(A_u32_us >= 1000){
 6be:	68 3e       	cpi	r22, 0xE8	; 232
 6c0:	23 e0       	ldi	r18, 0x03	; 3
 6c2:	72 07       	cpc	r23, r18
 6c4:	81 05       	cpc	r24, r1
 6c6:	91 05       	cpc	r25, r1
 6c8:	58 f0       	brcs	.+22     	; 0x6e0 <MDELAY_void_micro+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ca:	ef ec       	ldi	r30, 0xCF	; 207
 6cc:	f7 e0       	ldi	r31, 0x07	; 7
 6ce:	31 97       	sbiw	r30, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <MDELAY_void_micro+0x12>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <MDELAY_void_micro+0x18>
 6d4:	00 00       	nop
			_delay_us(1000);
			A_u32_us -= 1000;
 6d6:	68 5e       	subi	r22, 0xE8	; 232
 6d8:	73 40       	sbci	r23, 0x03	; 3
 6da:	81 09       	sbc	r24, r1
 6dc:	91 09       	sbc	r25, r1
 6de:	26 c0       	rjmp	.+76     	; 0x72c <MDELAY_void_micro+0x70>
		}
		else if(A_u32_us >= 100){
 6e0:	64 36       	cpi	r22, 0x64	; 100
 6e2:	71 05       	cpc	r23, r1
 6e4:	81 05       	cpc	r24, r1
 6e6:	91 05       	cpc	r25, r1
 6e8:	58 f0       	brcs	.+22     	; 0x700 <MDELAY_void_micro+0x44>
 6ea:	e7 ec       	ldi	r30, 0xC7	; 199
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	31 97       	sbiw	r30, 0x01	; 1
 6f0:	f1 f7       	brne	.-4      	; 0x6ee <MDELAY_void_micro+0x32>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <MDELAY_void_micro+0x38>
 6f4:	00 00       	nop
			_delay_us(100);
			A_u32_us -= 100;
 6f6:	64 56       	subi	r22, 0x64	; 100
 6f8:	71 09       	sbc	r23, r1
 6fa:	81 09       	sbc	r24, r1
 6fc:	91 09       	sbc	r25, r1
 6fe:	16 c0       	rjmp	.+44     	; 0x72c <MDELAY_void_micro+0x70>
		}else if(A_u32_us >= 10){
 700:	6a 30       	cpi	r22, 0x0A	; 10
 702:	71 05       	cpc	r23, r1
 704:	81 05       	cpc	r24, r1
 706:	91 05       	cpc	r25, r1
 708:	48 f0       	brcs	.+18     	; 0x71c <MDELAY_void_micro+0x60>
 70a:	fa e1       	ldi	r31, 0x1A	; 26
 70c:	fa 95       	dec	r31
 70e:	f1 f7       	brne	.-4      	; 0x70c <MDELAY_void_micro+0x50>
 710:	00 c0       	rjmp	.+0      	; 0x712 <MDELAY_void_micro+0x56>
			_delay_us(10);
			A_u32_us -= 10;
 712:	6a 50       	subi	r22, 0x0A	; 10
 714:	71 09       	sbc	r23, r1
 716:	81 09       	sbc	r24, r1
 718:	91 09       	sbc	r25, r1
 71a:	08 c0       	rjmp	.+16     	; 0x72c <MDELAY_void_micro+0x70>
 71c:	22 e0       	ldi	r18, 0x02	; 2
 71e:	2a 95       	dec	r18
 720:	f1 f7       	brne	.-4      	; 0x71e <MDELAY_void_micro+0x62>
 722:	00 c0       	rjmp	.+0      	; 0x724 <MDELAY_void_micro+0x68>
		}else{
			_delay_us(1);
			A_u32_us -= 1;
 724:	61 50       	subi	r22, 0x01	; 1
 726:	71 09       	sbc	r23, r1
 728:	81 09       	sbc	r24, r1
 72a:	91 09       	sbc	r25, r1
		}
	}
}

void MDELAY_void_micro(u32 A_u32_us){
	while(A_u32_us>0){
 72c:	61 15       	cp	r22, r1
 72e:	71 05       	cpc	r23, r1
 730:	81 05       	cpc	r24, r1
 732:	91 05       	cpc	r25, r1
 734:	21 f6       	brne	.-120    	; 0x6be <MDELAY_void_micro+0x2>
		}else{
			_delay_us(1);
			A_u32_us -= 1;
		}
	}
 736:	08 95       	ret

00000738 <MDIO_voidSetPinDir>:
	#endif
}


void MDIO_voidSetPinDir(Pin_t A_Pin_tPin, u8 A_u8Dir){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 738:	98 2f       	mov	r25, r24
 73a:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 73c:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 73e:	90 3b       	cpi	r25, 0xB0	; 176
 740:	49 f0       	breq	.+18     	; 0x754 <MDIO_voidSetPinDir+0x1c>
 742:	18 f4       	brcc	.+6      	; 0x74a <MDIO_voidSetPinDir+0x12>
 744:	90 3a       	cpi	r25, 0xA0	; 160
 746:	a9 f0       	breq	.+42     	; 0x772 <MDIO_voidSetPinDir+0x3a>
 748:	18 c0       	rjmp	.+48     	; 0x77a <MDIO_voidSetPinDir+0x42>
 74a:	90 3c       	cpi	r25, 0xC0	; 192
 74c:	41 f0       	breq	.+16     	; 0x75e <MDIO_voidSetPinDir+0x26>
 74e:	90 3d       	cpi	r25, 0xD0	; 208
 750:	59 f0       	breq	.+22     	; 0x768 <MDIO_voidSetPinDir+0x30>
 752:	13 c0       	rjmp	.+38     	; 0x77a <MDIO_voidSetPinDir+0x42>
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
			break;
		case MDIO_PORT_B_NUM:
						L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 754:	a8 e3       	ldi	r26, 0x38	; 56
 756:	b0 e0       	ldi	r27, 0x00	; 0
 758:	e7 e3       	ldi	r30, 0x37	; 55
 75a:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 75c:	0e c0       	rjmp	.+28     	; 0x77a <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_C_NUM:
						L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 75e:	a5 e3       	ldi	r26, 0x35	; 53
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	e4 e3       	ldi	r30, 0x34	; 52
 764:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
 766:	09 c0       	rjmp	.+18     	; 0x77a <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_D_NUM:
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 768:	a2 e3       	ldi	r26, 0x32	; 50
 76a:	b0 e0       	ldi	r27, 0x00	; 0
 76c:	e1 e3       	ldi	r30, 0x31	; 49
 76e:	f0 e0       	ldi	r31, 0x00	; 0

			break;
 770:	04 c0       	rjmp	.+8      	; 0x77a <MDIO_voidSetPinDir+0x42>
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 772:	ab e3       	ldi	r26, 0x3B	; 59
 774:	b0 e0       	ldi	r27, 0x00	; 0
 776:	ea e3       	ldi	r30, 0x3A	; 58
 778:	f0 e0       	ldi	r31, 0x00	; 0
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

			break;
		}
		
		switch(A_u8Dir){
 77a:	61 30       	cpi	r22, 0x01	; 1
 77c:	91 f0       	breq	.+36     	; 0x7a2 <MDIO_voidSetPinDir+0x6a>
 77e:	18 f0       	brcs	.+6      	; 0x786 <MDIO_voidSetPinDir+0x4e>
 780:	62 30       	cpi	r22, 0x02	; 2
 782:	e1 f0       	breq	.+56     	; 0x7bc <MDIO_voidSetPinDir+0x84>
 784:	08 95       	ret
			case INPUT: 
				CLR_BIT(*L_dirReg,L_pinNum) ;
 786:	40 81       	ld	r20, Z
 788:	21 e0       	ldi	r18, 0x01	; 1
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	b9 01       	movw	r22, r18
 78e:	02 c0       	rjmp	.+4      	; 0x794 <MDIO_voidSetPinDir+0x5c>
 790:	66 0f       	add	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	8a 95       	dec	r24
 796:	e2 f7       	brpl	.-8      	; 0x790 <MDIO_voidSetPinDir+0x58>
 798:	cb 01       	movw	r24, r22
 79a:	80 95       	com	r24
 79c:	84 23       	and	r24, r20
 79e:	80 83       	st	Z, r24
				break;
 7a0:	08 95       	ret
			case OUTPUT: 
				SET_BIT(*L_dirReg,L_pinNum) ;
 7a2:	40 81       	ld	r20, Z
 7a4:	21 e0       	ldi	r18, 0x01	; 1
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	b9 01       	movw	r22, r18
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <MDIO_voidSetPinDir+0x78>
 7ac:	66 0f       	add	r22, r22
 7ae:	77 1f       	adc	r23, r23
 7b0:	8a 95       	dec	r24
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <MDIO_voidSetPinDir+0x74>
 7b4:	cb 01       	movw	r24, r22
 7b6:	84 2b       	or	r24, r20
 7b8:	80 83       	st	Z, r24
				break;
 7ba:	08 95       	ret
			case INPUT_PULL_UP: 
				CLR_BIT(*L_dirReg,L_pinNum);
 7bc:	40 81       	ld	r20, Z
 7be:	21 e0       	ldi	r18, 0x01	; 1
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	b9 01       	movw	r22, r18
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <MDIO_voidSetPinDir+0x92>
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	8a 95       	dec	r24
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <MDIO_voidSetPinDir+0x8e>
 7ce:	cb 01       	movw	r24, r22
 7d0:	96 2f       	mov	r25, r22
 7d2:	90 95       	com	r25
 7d4:	94 23       	and	r25, r20
 7d6:	90 83       	st	Z, r25
				SET_BIT(*L_valReg,L_pinNum);
 7d8:	9c 91       	ld	r25, X
 7da:	89 2b       	or	r24, r25
 7dc:	8c 93       	st	X, r24
 7de:	08 95       	ret

000007e0 <MDIO_voidSetPinVal>:
				break;
		}
	
}
void MDIO_voidSetPinVal(Pin_t A_Pin_tPin, u8 A_u8Val){
	u8 L_portNum = A_Pin_tPin & 0xF0;
 7e0:	98 2f       	mov	r25, r24
 7e2:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
 7e4:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
 7e6:	90 3b       	cpi	r25, 0xB0	; 176
 7e8:	49 f0       	breq	.+18     	; 0x7fc <MDIO_voidSetPinVal+0x1c>
 7ea:	18 f4       	brcc	.+6      	; 0x7f2 <MDIO_voidSetPinVal+0x12>
 7ec:	90 3a       	cpi	r25, 0xA0	; 160
 7ee:	79 f0       	breq	.+30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f0:	10 c0       	rjmp	.+32     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f2:	90 3c       	cpi	r25, 0xC0	; 192
 7f4:	31 f0       	breq	.+12     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f6:	90 3d       	cpi	r25, 0xD0	; 208
 7f8:	39 f0       	breq	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fa:	0b c0       	rjmp	.+22     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
		break;
		case MDIO_PORT_B_NUM:
		L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
 7fc:	e8 e3       	ldi	r30, 0x38	; 56
 7fe:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 800:	08 c0       	rjmp	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		case MDIO_PORT_C_NUM:
		L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
 802:	e5 e3       	ldi	r30, 0x35	; 53
 804:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 806:	05 c0       	rjmp	.+10     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		case MDIO_PORT_D_NUM:
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
 808:	e2 e3       	ldi	r30, 0x32	; 50
 80a:	f0 e0       	ldi	r31, 0x00	; 0

		break;
 80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
 80e:	eb e3       	ldi	r30, 0x3B	; 59
 810:	f0 e0       	ldi	r31, 0x00	; 0
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

		break;
	}
	
	switch(A_u8Val){
 812:	66 23       	and	r22, r22
 814:	19 f0       	breq	.+6      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 816:	61 30       	cpi	r22, 0x01	; 1
 818:	79 f0       	breq	.+30     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 81a:	08 95       	ret
		case LOW:
		CLR_BIT(*L_valReg,L_pinNum) ;
 81c:	40 81       	ld	r20, Z
 81e:	21 e0       	ldi	r18, 0x01	; 1
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	b9 01       	movw	r22, r18
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	66 0f       	add	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	8a 95       	dec	r24
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	cb 01       	movw	r24, r22
 830:	80 95       	com	r24
 832:	84 23       	and	r24, r20
 834:	80 83       	st	Z, r24
		break;
 836:	08 95       	ret
		case HIGH:
		SET_BIT(*L_valReg,L_pinNum) ;
 838:	40 81       	ld	r20, Z
 83a:	21 e0       	ldi	r18, 0x01	; 1
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	b9 01       	movw	r22, r18
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	66 0f       	add	r22, r22
 844:	77 1f       	adc	r23, r23
 846:	8a 95       	dec	r24
 848:	e2 f7       	brpl	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 84a:	cb 01       	movw	r24, r22
 84c:	84 2b       	or	r24, r20
 84e:	80 83       	st	Z, r24
 850:	08 95       	ret

00000852 <__vector_1>:




void __vector_1 (void) __attribute__ ((signal,used, externally_visible));
void __vector_1 (void){
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
 85c:	2f 93       	push	r18
 85e:	3f 93       	push	r19
 860:	4f 93       	push	r20
 862:	5f 93       	push	r21
 864:	6f 93       	push	r22
 866:	7f 93       	push	r23
 868:	8f 93       	push	r24
 86a:	9f 93       	push	r25
 86c:	af 93       	push	r26
 86e:	bf 93       	push	r27
 870:	ef 93       	push	r30
 872:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_0_callBack != NULL){
 874:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <G_ptr2voidCallback_INT_0_callBack>
 878:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <G_ptr2voidCallback_INT_0_callBack+0x1>
 87c:	30 97       	sbiw	r30, 0x00	; 0
 87e:	09 f0       	breq	.+2      	; 0x882 <__stack+0x23>
		G_ptr2voidCallback_INT_0_callBack();
 880:	09 95       	icall
	}
}
 882:	ff 91       	pop	r31
 884:	ef 91       	pop	r30
 886:	bf 91       	pop	r27
 888:	af 91       	pop	r26
 88a:	9f 91       	pop	r25
 88c:	8f 91       	pop	r24
 88e:	7f 91       	pop	r23
 890:	6f 91       	pop	r22
 892:	5f 91       	pop	r21
 894:	4f 91       	pop	r20
 896:	3f 91       	pop	r19
 898:	2f 91       	pop	r18
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <__vector_2>:


void __vector_2 (void) __attribute__ ((signal,used, externally_visible));
void __vector_2 (void){
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	11 24       	eor	r1, r1
 8ae:	2f 93       	push	r18
 8b0:	3f 93       	push	r19
 8b2:	4f 93       	push	r20
 8b4:	5f 93       	push	r21
 8b6:	6f 93       	push	r22
 8b8:	7f 93       	push	r23
 8ba:	8f 93       	push	r24
 8bc:	9f 93       	push	r25
 8be:	af 93       	push	r26
 8c0:	bf 93       	push	r27
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_1_callBack != NULL){
 8c6:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <G_ptr2voidCallback_INT_1_callBack>
 8ca:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <G_ptr2voidCallback_INT_1_callBack+0x1>
 8ce:	30 97       	sbiw	r30, 0x00	; 0
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <__vector_2+0x30>
		G_ptr2voidCallback_INT_1_callBack();
 8d2:	09 95       	icall
	}
}
 8d4:	ff 91       	pop	r31
 8d6:	ef 91       	pop	r30
 8d8:	bf 91       	pop	r27
 8da:	af 91       	pop	r26
 8dc:	9f 91       	pop	r25
 8de:	8f 91       	pop	r24
 8e0:	7f 91       	pop	r23
 8e2:	6f 91       	pop	r22
 8e4:	5f 91       	pop	r21
 8e6:	4f 91       	pop	r20
 8e8:	3f 91       	pop	r19
 8ea:	2f 91       	pop	r18
 8ec:	0f 90       	pop	r0
 8ee:	0f be       	out	0x3f, r0	; 63
 8f0:	0f 90       	pop	r0
 8f2:	1f 90       	pop	r1
 8f4:	18 95       	reti

000008f6 <__vector_3>:


void __vector_3 (void) __attribute__ ((signal,used, externally_visible));
void __vector_3 (void){
 8f6:	1f 92       	push	r1
 8f8:	0f 92       	push	r0
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	0f 92       	push	r0
 8fe:	11 24       	eor	r1, r1
 900:	2f 93       	push	r18
 902:	3f 93       	push	r19
 904:	4f 93       	push	r20
 906:	5f 93       	push	r21
 908:	6f 93       	push	r22
 90a:	7f 93       	push	r23
 90c:	8f 93       	push	r24
 90e:	9f 93       	push	r25
 910:	af 93       	push	r26
 912:	bf 93       	push	r27
 914:	ef 93       	push	r30
 916:	ff 93       	push	r31
	if(G_ptr2voidCallback_INT_2_callBack != NULL){
 918:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <G_ptr2voidCallback_INT_2_callBack>
 91c:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <G_ptr2voidCallback_INT_2_callBack+0x1>
 920:	30 97       	sbiw	r30, 0x00	; 0
 922:	09 f0       	breq	.+2      	; 0x926 <__vector_3+0x30>
		G_ptr2voidCallback_INT_2_callBack();
 924:	09 95       	icall
	}
 926:	ff 91       	pop	r31
 928:	ef 91       	pop	r30
 92a:	bf 91       	pop	r27
 92c:	af 91       	pop	r26
 92e:	9f 91       	pop	r25
 930:	8f 91       	pop	r24
 932:	7f 91       	pop	r23
 934:	6f 91       	pop	r22
 936:	5f 91       	pop	r21
 938:	4f 91       	pop	r20
 93a:	3f 91       	pop	r19
 93c:	2f 91       	pop	r18
 93e:	0f 90       	pop	r0
 940:	0f be       	out	0x3f, r0	; 63
 942:	0f 90       	pop	r0
 944:	1f 90       	pop	r1
 946:	18 95       	reti

00000948 <MGI_void_Enable>:
#include "GI_config.h"
#include "GI_interface.h"
#include "GI_private.h"

void MGI_void_Enable(void){
	SET_BIT(SREG_REG,SREG_I_BIT);	
 948:	8f b7       	in	r24, 0x3f	; 63
 94a:	80 68       	ori	r24, 0x80	; 128
 94c:	8f bf       	out	0x3f, r24	; 63
 94e:	08 95       	ret

00000950 <MICU_voidInit>:
}

//0 --> 100
u8 MICU_u8ReadDutyCycle(void){
	return (G_u64TicksHigh * 100 ) / (G_u64TicksHigh + G_u64TicksLow);
}
 950:	8f b5       	in	r24, 0x2f	; 47
 952:	8e 7f       	andi	r24, 0xFE	; 254
 954:	8f bd       	out	0x2f, r24	; 47
 956:	8f b5       	in	r24, 0x2f	; 47
 958:	8d 7f       	andi	r24, 0xFD	; 253
 95a:	8f bd       	out	0x2f, r24	; 47
 95c:	8e b5       	in	r24, 0x2e	; 46
 95e:	87 7f       	andi	r24, 0xF7	; 247
 960:	8e bd       	out	0x2e, r24	; 46
 962:	8e b5       	in	r24, 0x2e	; 46
 964:	8f 7e       	andi	r24, 0xEF	; 239
 966:	8e bd       	out	0x2e, r24	; 46
 968:	8e b5       	in	r24, 0x2e	; 46
 96a:	80 68       	ori	r24, 0x80	; 128
 96c:	8e bd       	out	0x2e, r24	; 46
 96e:	89 b7       	in	r24, 0x39	; 57
 970:	80 62       	ori	r24, 0x20	; 32
 972:	89 bf       	out	0x39, r24	; 57
 974:	8e b5       	in	r24, 0x2e	; 46
 976:	80 64       	ori	r24, 0x40	; 64
 978:	8e bd       	out	0x2e, r24	; 46
 97a:	89 b7       	in	r24, 0x39	; 57
 97c:	84 60       	ori	r24, 0x04	; 4
 97e:	89 bf       	out	0x39, r24	; 57
 980:	8e b5       	in	r24, 0x2e	; 46
 982:	8e 7f       	andi	r24, 0xFE	; 254
 984:	8e bd       	out	0x2e, r24	; 46
 986:	8e b5       	in	r24, 0x2e	; 46
 988:	82 60       	ori	r24, 0x02	; 2
 98a:	8e bd       	out	0x2e, r24	; 46
 98c:	8e b5       	in	r24, 0x2e	; 46
 98e:	8b 7f       	andi	r24, 0xFB	; 251
 990:	8e bd       	out	0x2e, r24	; 46
 992:	08 95       	ret

00000994 <MICU_u64ReadTimeHighMicro>:
 994:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <G_u64TicksHigh>
 998:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <G_u64TicksHigh+0x1>
 99c:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <G_u64TicksHigh+0x2>
 9a0:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <G_u64TicksHigh+0x3>
 9a4:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <G_u64TicksHigh+0x4>
 9a8:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <G_u64TicksHigh+0x5>
 9ac:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <G_u64TicksHigh+0x6>
 9b0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <G_u64TicksHigh+0x7>
 9b4:	08 95       	ret

000009b6 <MICU_u64ReadTimeLowMicro>:
 9b6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 9ba:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 9be:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 9c2:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 9c6:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 9ca:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 9ce:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 9d2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 9d6:	08 95       	ret

000009d8 <__vector_6>:



//Timer/Counter1 Capture Event
void __vector_6 (void) __attribute__ ((signal,used, externally_visible));
void __vector_6 (void){
 9d8:	1f 92       	push	r1
 9da:	0f 92       	push	r0
 9dc:	0f b6       	in	r0, 0x3f	; 63
 9de:	0f 92       	push	r0
 9e0:	11 24       	eor	r1, r1
 9e2:	2f 92       	push	r2
 9e4:	3f 92       	push	r3
 9e6:	4f 92       	push	r4
 9e8:	5f 92       	push	r5
 9ea:	6f 92       	push	r6
 9ec:	7f 92       	push	r7
 9ee:	8f 92       	push	r8
 9f0:	9f 92       	push	r9
 9f2:	af 92       	push	r10
 9f4:	bf 92       	push	r11
 9f6:	cf 92       	push	r12
 9f8:	df 92       	push	r13
 9fa:	ef 92       	push	r14
 9fc:	ff 92       	push	r15
 9fe:	0f 93       	push	r16
 a00:	1f 93       	push	r17
 a02:	2f 93       	push	r18
 a04:	3f 93       	push	r19
 a06:	4f 93       	push	r20
 a08:	5f 93       	push	r21
 a0a:	6f 93       	push	r22
 a0c:	7f 93       	push	r23
 a0e:	8f 93       	push	r24
 a10:	9f 93       	push	r25
 a12:	af 93       	push	r26
 a14:	bf 93       	push	r27
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	ef 93       	push	r30
 a1c:	ff 93       	push	r31
	static u8 L_u8Flag  = 0;
	
	switch(L_u8Flag){			
 a1e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <L_u8Flag.1660>
 a22:	81 30       	cpi	r24, 0x01	; 1
 a24:	b1 f0       	breq	.+44     	; 0xa52 <__vector_6+0x7a>
 a26:	20 f0       	brcs	.+8      	; 0xa30 <__vector_6+0x58>
 a28:	82 30       	cpi	r24, 0x02	; 2
 a2a:	09 f4       	brne	.+2      	; 0xa2e <__vector_6+0x56>
 a2c:	55 c0       	rjmp	.+170    	; 0xad8 <__vector_6+0x100>
 a2e:	96 c0       	rjmp	.+300    	; 0xb5c <__vector_6+0x184>
		case 0:
			L_u8Flag = 1;
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <L_u8Flag.1660>
			TCNT1_REG = (u16)0;			//clear timer
 a36:	1d bc       	out	0x2d, r1	; 45
 a38:	1c bc       	out	0x2c, r1	; 44
			CLR_BIT(TCCR1B_REG,ICES1);	//edge select: wait FALLING
 a3a:	8e b5       	in	r24, 0x2e	; 46
 a3c:	8f 7b       	andi	r24, 0xBF	; 191
 a3e:	8e bd       	out	0x2e, r24	; 46
			G_u32OverflowsCount = 0;
 a40:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <G_u32OverflowsCount>
 a44:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <G_u32OverflowsCount+0x1>
 a48:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <G_u32OverflowsCount+0x2>
 a4c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <G_u32OverflowsCount+0x3>
			break;	
 a50:	85 c0       	rjmp	.+266    	; 0xb5c <__vector_6+0x184>
			
		case 1:
			L_u8Flag = 2;
 a52:	82 e0       	ldi	r24, 0x02	; 2
 a54:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <L_u8Flag.1660>
			G_u64TicksHigh = (u64)(TCNT1_REG)  + G_u32OverflowsCount * 0XFFFF;	// read high ticks
 a58:	2c b4       	in	r2, 0x2c	; 44
 a5a:	3d b4       	in	r3, 0x2d	; 45
 a5c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <G_u32OverflowsCount>
 a60:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <G_u32OverflowsCount+0x1>
 a64:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <G_u32OverflowsCount+0x2>
 a68:	50 91 a2 00 	lds	r21, 0x00A2	; 0x8000a2 <G_u32OverflowsCount+0x3>
 a6c:	af ef       	ldi	r26, 0xFF	; 255
 a6e:	bf ef       	ldi	r27, 0xFF	; 255
 a70:	0e 94 96 06 	call	0xd2c	; 0xd2c <__muluhisi3>
 a74:	dc 01       	movw	r26, r24
 a76:	cb 01       	movw	r24, r22
 a78:	28 2f       	mov	r18, r24
 a7a:	39 2f       	mov	r19, r25
 a7c:	4a 2f       	mov	r20, r26
 a7e:	5b 2f       	mov	r21, r27
 a80:	60 e0       	ldi	r22, 0x00	; 0
 a82:	70 e0       	ldi	r23, 0x00	; 0
 a84:	80 e0       	ldi	r24, 0x00	; 0
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	a2 2c       	mov	r10, r2
 a8a:	b3 2c       	mov	r11, r3
 a8c:	c1 2c       	mov	r12, r1
 a8e:	d1 2c       	mov	r13, r1
 a90:	e1 2c       	mov	r14, r1
 a92:	f1 2c       	mov	r15, r1
 a94:	00 e0       	ldi	r16, 0x00	; 0
 a96:	10 e0       	ldi	r17, 0x00	; 0
 a98:	0e 94 00 07 	call	0xe00	; 0xe00 <__adddi3>
 a9c:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <G_u64TicksHigh>
 aa0:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <G_u64TicksHigh+0x1>
 aa4:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <G_u64TicksHigh+0x2>
 aa8:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <G_u64TicksHigh+0x3>
 aac:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <G_u64TicksHigh+0x4>
 ab0:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <G_u64TicksHigh+0x5>
 ab4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <G_u64TicksHigh+0x6>
 ab8:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <G_u64TicksHigh+0x7>
			TCNT1_REG = (u16)0;					//clear timer
 abc:	1d bc       	out	0x2d, r1	; 45
 abe:	1c bc       	out	0x2c, r1	; 44
			G_u32OverflowsCount = 0;
 ac0:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <G_u32OverflowsCount>
 ac4:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <G_u32OverflowsCount+0x1>
 ac8:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <G_u32OverflowsCount+0x2>
 acc:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <G_u32OverflowsCount+0x3>
			SET_BIT(TCCR1B_REG,ICES1);			//edge select: wait RISING
 ad0:	8e b5       	in	r24, 0x2e	; 46
 ad2:	80 64       	ori	r24, 0x40	; 64
 ad4:	8e bd       	out	0x2e, r24	; 46
			break;	
 ad6:	42 c0       	rjmp	.+132    	; 0xb5c <__vector_6+0x184>
			
		case 2:
		
			L_u8Flag = 1;
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <L_u8Flag.1660>
			G_u64TicksLow = (u64)(TCNT1_REG)  + G_u32OverflowsCount * 0XFFFF; // read low ticks
 ade:	2c b4       	in	r2, 0x2c	; 44
 ae0:	3d b4       	in	r3, 0x2d	; 45
 ae2:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <G_u32OverflowsCount>
 ae6:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <G_u32OverflowsCount+0x1>
 aea:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <G_u32OverflowsCount+0x2>
 aee:	50 91 a2 00 	lds	r21, 0x00A2	; 0x8000a2 <G_u32OverflowsCount+0x3>
 af2:	af ef       	ldi	r26, 0xFF	; 255
 af4:	bf ef       	ldi	r27, 0xFF	; 255
 af6:	0e 94 96 06 	call	0xd2c	; 0xd2c <__muluhisi3>
 afa:	dc 01       	movw	r26, r24
 afc:	cb 01       	movw	r24, r22
 afe:	28 2f       	mov	r18, r24
 b00:	39 2f       	mov	r19, r25
 b02:	4a 2f       	mov	r20, r26
 b04:	5b 2f       	mov	r21, r27
 b06:	60 e0       	ldi	r22, 0x00	; 0
 b08:	70 e0       	ldi	r23, 0x00	; 0
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	a2 2c       	mov	r10, r2
 b10:	b3 2c       	mov	r11, r3
 b12:	c1 2c       	mov	r12, r1
 b14:	d1 2c       	mov	r13, r1
 b16:	e1 2c       	mov	r14, r1
 b18:	f1 2c       	mov	r15, r1
 b1a:	00 e0       	ldi	r16, 0x00	; 0
 b1c:	10 e0       	ldi	r17, 0x00	; 0
 b1e:	0e 94 00 07 	call	0xe00	; 0xe00 <__adddi3>
 b22:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
 b26:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 b2a:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 b2e:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 b32:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 b36:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 b3a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 b3e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
			TCNT1_REG = (u16)0;					//clear timer
 b42:	1d bc       	out	0x2d, r1	; 45
 b44:	1c bc       	out	0x2c, r1	; 44
			G_u32OverflowsCount = 0;
 b46:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <G_u32OverflowsCount>
 b4a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <G_u32OverflowsCount+0x1>
 b4e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <G_u32OverflowsCount+0x2>
 b52:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <G_u32OverflowsCount+0x3>
			CLR_BIT(TCCR1B_REG,ICES1);	//edge select: wait falling
 b56:	8e b5       	in	r24, 0x2e	; 46
 b58:	8f 7b       	andi	r24, 0xBF	; 191
 b5a:	8e bd       	out	0x2e, r24	; 46
			break;						
	} 
}
 b5c:	ff 91       	pop	r31
 b5e:	ef 91       	pop	r30
 b60:	df 91       	pop	r29
 b62:	cf 91       	pop	r28
 b64:	bf 91       	pop	r27
 b66:	af 91       	pop	r26
 b68:	9f 91       	pop	r25
 b6a:	8f 91       	pop	r24
 b6c:	7f 91       	pop	r23
 b6e:	6f 91       	pop	r22
 b70:	5f 91       	pop	r21
 b72:	4f 91       	pop	r20
 b74:	3f 91       	pop	r19
 b76:	2f 91       	pop	r18
 b78:	1f 91       	pop	r17
 b7a:	0f 91       	pop	r16
 b7c:	ff 90       	pop	r15
 b7e:	ef 90       	pop	r14
 b80:	df 90       	pop	r13
 b82:	cf 90       	pop	r12
 b84:	bf 90       	pop	r11
 b86:	af 90       	pop	r10
 b88:	9f 90       	pop	r9
 b8a:	8f 90       	pop	r8
 b8c:	7f 90       	pop	r7
 b8e:	6f 90       	pop	r6
 b90:	5f 90       	pop	r5
 b92:	4f 90       	pop	r4
 b94:	3f 90       	pop	r3
 b96:	2f 90       	pop	r2
 b98:	0f 90       	pop	r0
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	0f 90       	pop	r0
 b9e:	1f 90       	pop	r1
 ba0:	18 95       	reti

00000ba2 <__vector_9>:

void __vector_9 (void)__attribute__((signal))__attribute__((interrupt));
void __vector_9 (void)
	{
 ba2:	78 94       	sei
 ba4:	1f 92       	push	r1
 ba6:	0f 92       	push	r0
 ba8:	0f b6       	in	r0, 0x3f	; 63
 baa:	0f 92       	push	r0
 bac:	11 24       	eor	r1, r1
 bae:	8f 93       	push	r24
 bb0:	9f 93       	push	r25
 bb2:	af 93       	push	r26
 bb4:	bf 93       	push	r27
		G_u32OverflowsCount++;
 bb6:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <G_u32OverflowsCount>
 bba:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <G_u32OverflowsCount+0x1>
 bbe:	a0 91 a1 00 	lds	r26, 0x00A1	; 0x8000a1 <G_u32OverflowsCount+0x2>
 bc2:	b0 91 a2 00 	lds	r27, 0x00A2	; 0x8000a2 <G_u32OverflowsCount+0x3>
 bc6:	01 96       	adiw	r24, 0x01	; 1
 bc8:	a1 1d       	adc	r26, r1
 bca:	b1 1d       	adc	r27, r1
 bcc:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <G_u32OverflowsCount>
 bd0:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <G_u32OverflowsCount+0x1>
 bd4:	a0 93 a1 00 	sts	0x00A1, r26	; 0x8000a1 <G_u32OverflowsCount+0x2>
 bd8:	b0 93 a2 00 	sts	0x00A2, r27	; 0x8000a2 <G_u32OverflowsCount+0x3>
	}
 bdc:	bf 91       	pop	r27
 bde:	af 91       	pop	r26
 be0:	9f 91       	pop	r25
 be2:	8f 91       	pop	r24
 be4:	0f 90       	pop	r0
 be6:	0f be       	out	0x3f, r0	; 63
 be8:	0f 90       	pop	r0
 bea:	1f 90       	pop	r1
 bec:	18 95       	reti

00000bee <__vector_5>:


//Timer/Counter2 Overflow ISR
#if MTIMER2_MODE_SELECT == MTIMER2_MODE_NORMAL
void __vector_5(void)__attribute__((signal));
void __vector_5(){
 bee:	1f 92       	push	r1
 bf0:	0f 92       	push	r0
 bf2:	0f b6       	in	r0, 0x3f	; 63
 bf4:	0f 92       	push	r0
 bf6:	11 24       	eor	r1, r1
 bf8:	2f 93       	push	r18
 bfa:	3f 93       	push	r19
 bfc:	4f 93       	push	r20
 bfe:	5f 93       	push	r21
 c00:	6f 93       	push	r22
 c02:	7f 93       	push	r23
 c04:	8f 93       	push	r24
 c06:	9f 93       	push	r25
 c08:	af 93       	push	r26
 c0a:	bf 93       	push	r27
 c0c:	ef 93       	push	r30
 c0e:	ff 93       	push	r31
	static u32 counter = 0;
	counter++;
 c10:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <counter.1665>
 c14:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <counter.1665+0x1>
 c18:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <counter.1665+0x2>
 c1c:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <counter.1665+0x3>
 c20:	01 96       	adiw	r24, 0x01	; 1
 c22:	a1 1d       	adc	r26, r1
 c24:	b1 1d       	adc	r27, r1
 c26:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <counter.1665>
 c2a:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <counter.1665+0x1>
 c2e:	a0 93 a5 00 	sts	0x00A5, r26	; 0x8000a5 <counter.1665+0x2>
 c32:	b0 93 a6 00 	sts	0x00A6, r27	; 0x8000a6 <counter.1665+0x3>

	if(counter == MTIMER2_MAX_COUNT){
 c36:	83 34       	cpi	r24, 0x43	; 67
 c38:	9f 40       	sbci	r25, 0x0F	; 15
 c3a:	a1 05       	cpc	r26, r1
 c3c:	b1 05       	cpc	r27, r1
 c3e:	a9 f4       	brne	.+42     	; 0xc6a <__vector_5+0x7c>
		counter = 0;
 c40:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <counter.1665>
 c44:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <counter.1665+0x1>
 c48:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <counter.1665+0x2>
 c4c:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <counter.1665+0x3>
		TCNT2_REG = MTIMER2_PRELOAD_VAL;
 c50:	80 ec       	ldi	r24, 0xC0	; 192
 c52:	84 bd       	out	0x24, r24	; 36
		
		if(G_ptr2voidCallback_callback != NULL){
 c54:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <G_ptr2voidCallback_callback>
 c58:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <G_ptr2voidCallback_callback+0x1>
 c5c:	89 2b       	or	r24, r25
 c5e:	29 f0       	breq	.+10     	; 0xc6a <__vector_5+0x7c>
			G_ptr2voidCallback_callback();
 c60:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <G_ptr2voidCallback_callback>
 c64:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <G_ptr2voidCallback_callback+0x1>
 c68:	09 95       	icall
		}
		
	}
}
 c6a:	ff 91       	pop	r31
 c6c:	ef 91       	pop	r30
 c6e:	bf 91       	pop	r27
 c70:	af 91       	pop	r26
 c72:	9f 91       	pop	r25
 c74:	8f 91       	pop	r24
 c76:	7f 91       	pop	r23
 c78:	6f 91       	pop	r22
 c7a:	5f 91       	pop	r21
 c7c:	4f 91       	pop	r20
 c7e:	3f 91       	pop	r19
 c80:	2f 91       	pop	r18
 c82:	0f 90       	pop	r0
 c84:	0f be       	out	0x3f, r0	; 63
 c86:	0f 90       	pop	r0
 c88:	1f 90       	pop	r1
 c8a:	18 95       	reti

00000c8c <__vector_13>:
	void MUART_voidSetRXCallback(ptr2voidU32Callback A_ptrCallback){
		G_ptrCallback = A_ptrCallback;
	}
	
	void __vector_13(void)__attribute__((signal));
	void __vector_13(void){
 c8c:	1f 92       	push	r1
 c8e:	0f 92       	push	r0
 c90:	0f b6       	in	r0, 0x3f	; 63
 c92:	0f 92       	push	r0
 c94:	11 24       	eor	r1, r1
 c96:	2f 93       	push	r18
 c98:	3f 93       	push	r19
 c9a:	4f 93       	push	r20
 c9c:	5f 93       	push	r21
 c9e:	6f 93       	push	r22
 ca0:	7f 93       	push	r23
 ca2:	8f 93       	push	r24
 ca4:	9f 93       	push	r25
 ca6:	af 93       	push	r26
 ca8:	bf 93       	push	r27
 caa:	ef 93       	push	r30
 cac:	ff 93       	push	r31
		if(G_ptrCallback != NULL){
 cae:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <G_ptrCallback>
 cb2:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <G_ptrCallback+0x1>
 cb6:	89 2b       	or	r24, r25
 cb8:	49 f0       	breq	.+18     	; 0xccc <__vector_13+0x40>
			
			//write ninth bit then write the low 8 bits
			#if MUART_CHAR_SIZE_SELECT==MUART_CHAR_SIZE_9_BITS
			L_u32Data = GET_BIT(UCSRB_REG,1) << 8;
			#endif
			L_u32Data = L_u32Data | UDR_REG;
 cba:	6c b1       	in	r22, 0x0c	; 12
 cbc:	70 e0       	ldi	r23, 0x00	; 0
 cbe:	80 e0       	ldi	r24, 0x00	; 0
 cc0:	90 e0       	ldi	r25, 0x00	; 0
			
			G_ptrCallback(L_u32Data);
 cc2:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <G_ptrCallback>
 cc6:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <G_ptrCallback+0x1>
 cca:	09 95       	icall
		}
	}
 ccc:	ff 91       	pop	r31
 cce:	ef 91       	pop	r30
 cd0:	bf 91       	pop	r27
 cd2:	af 91       	pop	r26
 cd4:	9f 91       	pop	r25
 cd6:	8f 91       	pop	r24
 cd8:	7f 91       	pop	r23
 cda:	6f 91       	pop	r22
 cdc:	5f 91       	pop	r21
 cde:	4f 91       	pop	r20
 ce0:	3f 91       	pop	r19
 ce2:	2f 91       	pop	r18
 ce4:	0f 90       	pop	r0
 ce6:	0f be       	out	0x3f, r0	; 63
 ce8:	0f 90       	pop	r0
 cea:	1f 90       	pop	r1
 cec:	18 95       	reti

00000cee <__divmodsi4>:
 cee:	05 2e       	mov	r0, r21
 cf0:	97 fb       	bst	r25, 7
 cf2:	1e f4       	brtc	.+6      	; 0xcfa <__divmodsi4+0xc>
 cf4:	00 94       	com	r0
 cf6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__negsi2>
 cfa:	57 fd       	sbrc	r21, 7
 cfc:	07 d0       	rcall	.+14     	; 0xd0c <__divmodsi4_neg2>
 cfe:	0e 94 09 07 	call	0xe12	; 0xe12 <__udivmodsi4>
 d02:	07 fc       	sbrc	r0, 7
 d04:	03 d0       	rcall	.+6      	; 0xd0c <__divmodsi4_neg2>
 d06:	4e f4       	brtc	.+18     	; 0xd1a <__divmodsi4_exit>
 d08:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__negsi2>

00000d0c <__divmodsi4_neg2>:
 d0c:	50 95       	com	r21
 d0e:	40 95       	com	r20
 d10:	30 95       	com	r19
 d12:	21 95       	neg	r18
 d14:	3f 4f       	sbci	r19, 0xFF	; 255
 d16:	4f 4f       	sbci	r20, 0xFF	; 255
 d18:	5f 4f       	sbci	r21, 0xFF	; 255

00000d1a <__divmodsi4_exit>:
 d1a:	08 95       	ret

00000d1c <__negsi2>:
 d1c:	90 95       	com	r25
 d1e:	80 95       	com	r24
 d20:	70 95       	com	r23
 d22:	61 95       	neg	r22
 d24:	7f 4f       	sbci	r23, 0xFF	; 255
 d26:	8f 4f       	sbci	r24, 0xFF	; 255
 d28:	9f 4f       	sbci	r25, 0xFF	; 255
 d2a:	08 95       	ret

00000d2c <__muluhisi3>:
 d2c:	0e 94 2b 07 	call	0xe56	; 0xe56 <__umulhisi3>
 d30:	a5 9f       	mul	r26, r21
 d32:	90 0d       	add	r25, r0
 d34:	b4 9f       	mul	r27, r20
 d36:	90 0d       	add	r25, r0
 d38:	a4 9f       	mul	r26, r20
 d3a:	80 0d       	add	r24, r0
 d3c:	91 1d       	adc	r25, r1
 d3e:	11 24       	eor	r1, r1
 d40:	08 95       	ret

00000d42 <__umoddi3>:
 d42:	68 94       	set
 d44:	01 c0       	rjmp	.+2      	; 0xd48 <__udivdi3_umoddi3>

00000d46 <__udivdi3>:
 d46:	e8 94       	clt

00000d48 <__udivdi3_umoddi3>:
 d48:	8f 92       	push	r8
 d4a:	9f 92       	push	r9
 d4c:	cf 93       	push	r28
 d4e:	df 93       	push	r29
 d50:	0e 94 af 06 	call	0xd5e	; 0xd5e <__udivmod64>
 d54:	df 91       	pop	r29
 d56:	cf 91       	pop	r28
 d58:	9f 90       	pop	r9
 d5a:	8f 90       	pop	r8
 d5c:	08 95       	ret

00000d5e <__udivmod64>:
 d5e:	88 24       	eor	r8, r8
 d60:	99 24       	eor	r9, r9
 d62:	f4 01       	movw	r30, r8
 d64:	e4 01       	movw	r28, r8
 d66:	b0 e4       	ldi	r27, 0x40	; 64
 d68:	9f 93       	push	r25
 d6a:	aa 27       	eor	r26, r26
 d6c:	9a 15       	cp	r25, r10
 d6e:	8b 04       	cpc	r8, r11
 d70:	9c 04       	cpc	r9, r12
 d72:	ed 05       	cpc	r30, r13
 d74:	fe 05       	cpc	r31, r14
 d76:	cf 05       	cpc	r28, r15
 d78:	d0 07       	cpc	r29, r16
 d7a:	a1 07       	cpc	r26, r17
 d7c:	98 f4       	brcc	.+38     	; 0xda4 <__udivmod64+0x46>
 d7e:	ad 2f       	mov	r26, r29
 d80:	dc 2f       	mov	r29, r28
 d82:	cf 2f       	mov	r28, r31
 d84:	fe 2f       	mov	r31, r30
 d86:	e9 2d       	mov	r30, r9
 d88:	98 2c       	mov	r9, r8
 d8a:	89 2e       	mov	r8, r25
 d8c:	98 2f       	mov	r25, r24
 d8e:	87 2f       	mov	r24, r23
 d90:	76 2f       	mov	r23, r22
 d92:	65 2f       	mov	r22, r21
 d94:	54 2f       	mov	r21, r20
 d96:	43 2f       	mov	r20, r19
 d98:	32 2f       	mov	r19, r18
 d9a:	22 27       	eor	r18, r18
 d9c:	b8 50       	subi	r27, 0x08	; 8
 d9e:	31 f7       	brne	.-52     	; 0xd6c <__udivmod64+0xe>
 da0:	bf 91       	pop	r27
 da2:	27 c0       	rjmp	.+78     	; 0xdf2 <__udivmod64+0x94>
 da4:	1b 2e       	mov	r1, r27
 da6:	bf 91       	pop	r27
 da8:	bb 27       	eor	r27, r27
 daa:	22 0f       	add	r18, r18
 dac:	33 1f       	adc	r19, r19
 dae:	44 1f       	adc	r20, r20
 db0:	55 1f       	adc	r21, r21
 db2:	66 1f       	adc	r22, r22
 db4:	77 1f       	adc	r23, r23
 db6:	88 1f       	adc	r24, r24
 db8:	99 1f       	adc	r25, r25
 dba:	88 1c       	adc	r8, r8
 dbc:	99 1c       	adc	r9, r9
 dbe:	ee 1f       	adc	r30, r30
 dc0:	ff 1f       	adc	r31, r31
 dc2:	cc 1f       	adc	r28, r28
 dc4:	dd 1f       	adc	r29, r29
 dc6:	aa 1f       	adc	r26, r26
 dc8:	bb 1f       	adc	r27, r27
 dca:	8a 14       	cp	r8, r10
 dcc:	9b 04       	cpc	r9, r11
 dce:	ec 05       	cpc	r30, r12
 dd0:	fd 05       	cpc	r31, r13
 dd2:	ce 05       	cpc	r28, r14
 dd4:	df 05       	cpc	r29, r15
 dd6:	a0 07       	cpc	r26, r16
 dd8:	b1 07       	cpc	r27, r17
 dda:	48 f0       	brcs	.+18     	; 0xdee <__udivmod64+0x90>
 ddc:	8a 18       	sub	r8, r10
 dde:	9b 08       	sbc	r9, r11
 de0:	ec 09       	sbc	r30, r12
 de2:	fd 09       	sbc	r31, r13
 de4:	ce 09       	sbc	r28, r14
 de6:	df 09       	sbc	r29, r15
 de8:	a0 0b       	sbc	r26, r16
 dea:	b1 0b       	sbc	r27, r17
 dec:	21 60       	ori	r18, 0x01	; 1
 dee:	1a 94       	dec	r1
 df0:	e1 f6       	brne	.-72     	; 0xdaa <__udivmod64+0x4c>
 df2:	2e f4       	brtc	.+10     	; 0xdfe <__udivmod64+0xa0>
 df4:	94 01       	movw	r18, r8
 df6:	af 01       	movw	r20, r30
 df8:	be 01       	movw	r22, r28
 dfa:	cd 01       	movw	r24, r26
 dfc:	00 0c       	add	r0, r0
 dfe:	08 95       	ret

00000e00 <__adddi3>:
 e00:	2a 0d       	add	r18, r10
 e02:	3b 1d       	adc	r19, r11
 e04:	4c 1d       	adc	r20, r12
 e06:	5d 1d       	adc	r21, r13
 e08:	6e 1d       	adc	r22, r14
 e0a:	7f 1d       	adc	r23, r15
 e0c:	80 1f       	adc	r24, r16
 e0e:	91 1f       	adc	r25, r17
 e10:	08 95       	ret

00000e12 <__udivmodsi4>:
 e12:	a1 e2       	ldi	r26, 0x21	; 33
 e14:	1a 2e       	mov	r1, r26
 e16:	aa 1b       	sub	r26, r26
 e18:	bb 1b       	sub	r27, r27
 e1a:	fd 01       	movw	r30, r26
 e1c:	0d c0       	rjmp	.+26     	; 0xe38 <__udivmodsi4_ep>

00000e1e <__udivmodsi4_loop>:
 e1e:	aa 1f       	adc	r26, r26
 e20:	bb 1f       	adc	r27, r27
 e22:	ee 1f       	adc	r30, r30
 e24:	ff 1f       	adc	r31, r31
 e26:	a2 17       	cp	r26, r18
 e28:	b3 07       	cpc	r27, r19
 e2a:	e4 07       	cpc	r30, r20
 e2c:	f5 07       	cpc	r31, r21
 e2e:	20 f0       	brcs	.+8      	; 0xe38 <__udivmodsi4_ep>
 e30:	a2 1b       	sub	r26, r18
 e32:	b3 0b       	sbc	r27, r19
 e34:	e4 0b       	sbc	r30, r20
 e36:	f5 0b       	sbc	r31, r21

00000e38 <__udivmodsi4_ep>:
 e38:	66 1f       	adc	r22, r22
 e3a:	77 1f       	adc	r23, r23
 e3c:	88 1f       	adc	r24, r24
 e3e:	99 1f       	adc	r25, r25
 e40:	1a 94       	dec	r1
 e42:	69 f7       	brne	.-38     	; 0xe1e <__udivmodsi4_loop>
 e44:	60 95       	com	r22
 e46:	70 95       	com	r23
 e48:	80 95       	com	r24
 e4a:	90 95       	com	r25
 e4c:	9b 01       	movw	r18, r22
 e4e:	ac 01       	movw	r20, r24
 e50:	bd 01       	movw	r22, r26
 e52:	cf 01       	movw	r24, r30
 e54:	08 95       	ret

00000e56 <__umulhisi3>:
 e56:	a2 9f       	mul	r26, r18
 e58:	b0 01       	movw	r22, r0
 e5a:	b3 9f       	mul	r27, r19
 e5c:	c0 01       	movw	r24, r0
 e5e:	a3 9f       	mul	r26, r19
 e60:	70 0d       	add	r23, r0
 e62:	81 1d       	adc	r24, r1
 e64:	11 24       	eor	r1, r1
 e66:	91 1d       	adc	r25, r1
 e68:	b2 9f       	mul	r27, r18
 e6a:	70 0d       	add	r23, r0
 e6c:	81 1d       	adc	r24, r1
 e6e:	11 24       	eor	r1, r1
 e70:	91 1d       	adc	r25, r1
 e72:	08 95       	ret

00000e74 <_exit>:
 e74:	f8 94       	cli

00000e76 <__stop_program>:
 e76:	ff cf       	rjmp	.-2      	; 0xe76 <__stop_program>
