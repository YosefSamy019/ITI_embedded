
security_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00006eca  00006f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000099  00800194  00800194  00007092  2**0
                  ALLOC
  3 .stab         000073c8  00000000  00000000  00007094  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024b5  00000000  00000000  0000e45c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00010911  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  00010af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  00010d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  00013628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  00014c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00015fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  000161e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  000164e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016ecc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__vector_1>
       8:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__vector_2>
       c:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__vector_3>
      10:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__vector_4>
      14:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__vector_7>
      20:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__vector_8>
      24:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 12 21 	jmp	0x4224	; 0x4224 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	fe e6       	ldi	r31, 0x6E	; 110
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 34 	call	0x684a	; 0x684a <main>
      8a:	0c 94 63 37 	jmp	0x6ec6	; 0x6ec6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 36 	jmp	0x6d58	; 0x6d58 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 36 	jmp	0x6d90	; 0x6d90 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 36 	jmp	0x6d70	; 0x6d70 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 36 	jmp	0x6d70	; 0x6d70 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 36 	jmp	0x6d58	; 0x6d58 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 36 	jmp	0x6d90	; 0x6d90 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b4 36 	jmp	0x6d68	; 0x6d68 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d0 36 	jmp	0x6da0	; 0x6da0 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b8 36 	jmp	0x6d70	; 0x6d70 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b8 36 	jmp	0x6d70	; 0x6d70 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b8 36 	jmp	0x6d70	; 0x6d70 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b8 36 	jmp	0x6d70	; 0x6d70 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 b8 36 	jmp	0x6d70	; 0x6d70 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 bc 36 	jmp	0x6d78	; 0x6d78 <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 d8 36 	jmp	0x6db0	; 0x6db0 <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 b4 36 	jmp	0x6d68	; 0x6d68 <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 d0 36 	jmp	0x6da0	; 0x6da0 <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	ea 58       	subi	r30, 0x8A	; 138
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <MWDT_voidTurnOn>:
#include "WDT_int.h"
#include "WDT_register.h"
#include "WDT_private.h"

void MWDT_voidTurnOn  (u8 A_u8TimeOut)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
	/*set time out */
	
	if (A_u8TimeOut == WDT_16ms3)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	88 23       	and	r24, r24
     efe:	b1 f4       	brne	.+44     	; 0xf2c <MWDT_voidTurnOn+0x3e>
	{
	      CLR_BIT (WDTCR , WDP0) ; /*prescaller 000 to reset after 16.3ms*/
     f00:	a1 e4       	ldi	r26, 0x41	; 65
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e4       	ldi	r30, 0x41	; 65
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8e 7f       	andi	r24, 0xFE	; 254
     f0c:	8c 93       	st	X, r24
	      CLR_BIT (WDTCR , WDP1) ;
     f0e:	a1 e4       	ldi	r26, 0x41	; 65
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e4       	ldi	r30, 0x41	; 65
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8d 7f       	andi	r24, 0xFD	; 253
     f1a:	8c 93       	st	X, r24
	      CLR_BIT (WDTCR , WDP2) ;
     f1c:	a1 e4       	ldi	r26, 0x41	; 65
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e1 e4       	ldi	r30, 0x41	; 65
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8b 7f       	andi	r24, 0xFB	; 251
     f28:	8c 93       	st	X, r24
     f2a:	ae c0       	rjmp	.+348    	; 0x1088 <MWDT_voidTurnOn+0x19a>
	}	  
	else if (A_u8TimeOut == WDT_32ms5)
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	b1 f4       	brne	.+44     	; 0xf5e <MWDT_voidTurnOn+0x70>
	{
	      SET_BIT (WDTCR , WDP0) ; /*prescaller 001 to reset after 32.5ms*/
     f32:	a1 e4       	ldi	r26, 0x41	; 65
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e1 e4       	ldi	r30, 0x41	; 65
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	8c 93       	st	X, r24
	      CLR_BIT (WDTCR , WDP1) ;
     f40:	a1 e4       	ldi	r26, 0x41	; 65
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e1 e4       	ldi	r30, 0x41	; 65
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8d 7f       	andi	r24, 0xFD	; 253
     f4c:	8c 93       	st	X, r24
	      CLR_BIT (WDTCR , WDP2) ;
     f4e:	a1 e4       	ldi	r26, 0x41	; 65
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e1 e4       	ldi	r30, 0x41	; 65
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8b 7f       	andi	r24, 0xFB	; 251
     f5a:	8c 93       	st	X, r24
     f5c:	95 c0       	rjmp	.+298    	; 0x1088 <MWDT_voidTurnOn+0x19a>
	}	  
	else if (A_u8TimeOut == WDT_65ms0)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	82 30       	cpi	r24, 0x02	; 2
     f62:	b1 f4       	brne	.+44     	; 0xf90 <MWDT_voidTurnOn+0xa2>
	{
	      CLR_BIT (WDTCR , WDP0) ; /*prescaller 010 to reset after 65ms*/
     f64:	a1 e4       	ldi	r26, 0x41	; 65
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e1 e4       	ldi	r30, 0x41	; 65
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8e 7f       	andi	r24, 0xFE	; 254
     f70:	8c 93       	st	X, r24
	      SET_BIT (WDTCR , WDP1) ;
     f72:	a1 e4       	ldi	r26, 0x41	; 65
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e1 e4       	ldi	r30, 0x41	; 65
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	8c 93       	st	X, r24
	      CLR_BIT (WDTCR , WDP2) ;
     f80:	a1 e4       	ldi	r26, 0x41	; 65
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e1 e4       	ldi	r30, 0x41	; 65
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8b 7f       	andi	r24, 0xFB	; 251
     f8c:	8c 93       	st	X, r24
     f8e:	7c c0       	rjmp	.+248    	; 0x1088 <MWDT_voidTurnOn+0x19a>
	}	  
	else if (A_u8TimeOut == WDT_0s13)
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	b1 f4       	brne	.+44     	; 0xfc2 <MWDT_voidTurnOn+0xd4>
	{
	      SET_BIT (WDTCR , WDP0) ; /*prescaller 011 to reset after 0.13s*/
     f96:	a1 e4       	ldi	r26, 0x41	; 65
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e1 e4       	ldi	r30, 0x41	; 65
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	81 60       	ori	r24, 0x01	; 1
     fa2:	8c 93       	st	X, r24
	      SET_BIT (WDTCR , WDP1) ;
     fa4:	a1 e4       	ldi	r26, 0x41	; 65
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e1 e4       	ldi	r30, 0x41	; 65
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	82 60       	ori	r24, 0x02	; 2
     fb0:	8c 93       	st	X, r24
	      CLR_BIT (WDTCR , WDP2) ;
     fb2:	a1 e4       	ldi	r26, 0x41	; 65
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e1 e4       	ldi	r30, 0x41	; 65
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	8c 93       	st	X, r24
     fc0:	63 c0       	rjmp	.+198    	; 0x1088 <MWDT_voidTurnOn+0x19a>
	}	  
	else if (A_u8TimeOut == WDT_0s26)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	84 30       	cpi	r24, 0x04	; 4
     fc6:	b1 f4       	brne	.+44     	; 0xff4 <MWDT_voidTurnOn+0x106>
	{
	      CLR_BIT (WDTCR , WDP0) ; /*prescaller 000 to reset after 0.26s*/
     fc8:	a1 e4       	ldi	r26, 0x41	; 65
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e1 e4       	ldi	r30, 0x41	; 65
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	8c 93       	st	X, r24
	      CLR_BIT (WDTCR , WDP1) ;
     fd6:	a1 e4       	ldi	r26, 0x41	; 65
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e1 e4       	ldi	r30, 0x41	; 65
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8d 7f       	andi	r24, 0xFD	; 253
     fe2:	8c 93       	st	X, r24
	      SET_BIT (WDTCR , WDP2) ;
     fe4:	a1 e4       	ldi	r26, 0x41	; 65
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e1 e4       	ldi	r30, 0x41	; 65
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	84 60       	ori	r24, 0x04	; 4
     ff0:	8c 93       	st	X, r24
     ff2:	4a c0       	rjmp	.+148    	; 0x1088 <MWDT_voidTurnOn+0x19a>
	}	  
	else if (A_u8TimeOut == WDT_0s52)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	85 30       	cpi	r24, 0x05	; 5
     ff8:	b1 f4       	brne	.+44     	; 0x1026 <MWDT_voidTurnOn+0x138>
	{
	      SET_BIT (WDTCR , WDP0) ; /*prescaller 000 to reset after 0.52s*/
     ffa:	a1 e4       	ldi	r26, 0x41	; 65
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e1 e4       	ldi	r30, 0x41	; 65
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	8c 93       	st	X, r24
	      CLR_BIT (WDTCR , WDP1) ;
    1008:	a1 e4       	ldi	r26, 0x41	; 65
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e1 e4       	ldi	r30, 0x41	; 65
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8d 7f       	andi	r24, 0xFD	; 253
    1014:	8c 93       	st	X, r24
	      SET_BIT (WDTCR , WDP2) ;
    1016:	a1 e4       	ldi	r26, 0x41	; 65
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e1 e4       	ldi	r30, 0x41	; 65
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	84 60       	ori	r24, 0x04	; 4
    1022:	8c 93       	st	X, r24
    1024:	31 c0       	rjmp	.+98     	; 0x1088 <MWDT_voidTurnOn+0x19a>
	}	  
	else if (A_u8TimeOut == WDT_1s0)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	86 30       	cpi	r24, 0x06	; 6
    102a:	b1 f4       	brne	.+44     	; 0x1058 <MWDT_voidTurnOn+0x16a>
	{
	      CLR_BIT (WDTCR , WDP0) ; /*prescaller 000 to reset after 1s*/
    102c:	a1 e4       	ldi	r26, 0x41	; 65
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e1 e4       	ldi	r30, 0x41	; 65
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	8e 7f       	andi	r24, 0xFE	; 254
    1038:	8c 93       	st	X, r24
	      SET_BIT (WDTCR , WDP1) ;
    103a:	a1 e4       	ldi	r26, 0x41	; 65
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e1 e4       	ldi	r30, 0x41	; 65
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	82 60       	ori	r24, 0x02	; 2
    1046:	8c 93       	st	X, r24
	      SET_BIT (WDTCR , WDP2) ;
    1048:	a1 e4       	ldi	r26, 0x41	; 65
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e1 e4       	ldi	r30, 0x41	; 65
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	84 60       	ori	r24, 0x04	; 4
    1054:	8c 93       	st	X, r24
    1056:	18 c0       	rjmp	.+48     	; 0x1088 <MWDT_voidTurnOn+0x19a>
	}	  
	else if (A_u8TimeOut == WDT_2s1)
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	87 30       	cpi	r24, 0x07	; 7
    105c:	a9 f4       	brne	.+42     	; 0x1088 <MWDT_voidTurnOn+0x19a>
	{
	      SET_BIT (WDTCR , WDP0) ; /*prescaller 000 to reset after 2.1s*/
    105e:	a1 e4       	ldi	r26, 0x41	; 65
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e1 e4       	ldi	r30, 0x41	; 65
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	81 60       	ori	r24, 0x01	; 1
    106a:	8c 93       	st	X, r24
	      SET_BIT (WDTCR , WDP1) ;
    106c:	a1 e4       	ldi	r26, 0x41	; 65
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e1 e4       	ldi	r30, 0x41	; 65
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	8c 93       	st	X, r24
	      SET_BIT (WDTCR , WDP2) ;
    107a:	a1 e4       	ldi	r26, 0x41	; 65
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e1 e4       	ldi	r30, 0x41	; 65
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	84 60       	ori	r24, 0x04	; 4
    1086:	8c 93       	st	X, r24
	}
	
	/*Enable WDT*/
	SET_BIT (WDTCR , WDE) ;
    1088:	a1 e4       	ldi	r26, 0x41	; 65
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e1 e4       	ldi	r30, 0x41	; 65
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	88 60       	ori	r24, 0x08	; 8
    1094:	8c 93       	st	X, r24
}
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <MWDT_voidTurnOff>:

void MWDT_voidTurnOff (void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	WDTCR = WDT_DISABLE ; /*set WDE and WDTOE in the same line*/
    10a6:	e1 e4       	ldi	r30, 0x41	; 65
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	88 e1       	ldi	r24, 0x18	; 24
    10ac:	80 83       	st	Z, r24
	WDTCR = 0 ; /*disable WDT*/
    10ae:	e1 e4       	ldi	r30, 0x41	; 65
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	10 82       	st	Z, r1
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <MUART_voidInit>:
#define F_CPU 8000000UL /*frequancy of mc*/
#include <util/delay.h>
#include <stdlib.h>

void MUART_voidInit (void)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	60 97       	sbiw	r28, 0x10	; 16
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
	/*Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	#if    BAUD_RATE == 2400   || BAUD_RATE == 4800   || BAUD_RATE == 9600   || BAUD_RATE == 14400  || \
	       BAUD_RATE == 19200  || BAUD_RATE == 28800  || BAUD_RATE == 38400  || BAUD_RATE == 57600  || \
		   BAUD_RATE == 76800  || BAUD_RATE == 115200 || BAUD_RATE == 230400 || BAUD_RATE == 250000 || \
		   BAUD_RATE == 500000 || BAUD_RATE == 1000000
	                     UBRR  = (F_CPU/(16*(u32)BAUD_RATE))-1 ;
    10ce:	83 e3       	ldi	r24, 0x33	; 51
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	98 8b       	std	Y+16, r25	; 0x10
    10d4:	8f 87       	std	Y+15, r24	; 0x0f
						 UBRRH = (u8)(UBRR>>8);
    10d6:	e0 e4       	ldi	r30, 0x40	; 64
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	8f 85       	ldd	r24, Y+15	; 0x0f
    10dc:	98 89       	ldd	r25, Y+16	; 0x10
    10de:	89 2f       	mov	r24, r25
    10e0:	99 27       	eor	r25, r25
    10e2:	80 83       	st	Z, r24
						 UBRRL = (u8)(UBRR);
    10e4:	e9 e2       	ldi	r30, 0x29	; 41
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ea:	80 83       	st	Z, r24
	#else 
	     #error "select correct option of baud rate"
	#endif
	
	/*Enable USART Sender*/
	SET_BIT(UCSRB , TXEN) ;
    10ec:	aa e2       	ldi	r26, 0x2A	; 42
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ea e2       	ldi	r30, 0x2A	; 42
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 60       	ori	r24, 0x08	; 8
    10f8:	8c 93       	st	X, r24
	
	/*Enable USART Receiver*/
	SET_BIT(UCSRB , RXEN) ;
    10fa:	aa e2       	ldi	r26, 0x2A	; 42
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ea e2       	ldi	r30, 0x2A	; 42
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 61       	ori	r24, 0x10	; 16
    1106:	8c 93       	st	X, r24
	#elif NUMBER_OF_DATA_BITS == 6 /*URSEL = 1 , UCSZ2 = 0 , UCSZ1 = 0 , UCSZ0 = 1*/
	        UCSRC = (1<<URSEL) | (1<<UCSZ0) ;
	#elif NUMBER_OF_DATA_BITS == 7 /*URSEL = 1 , UCSZ2 = 0 , UCSZ1 = 1 , UCSZ0 = 0*/
	        UCSRC = (1<<URSEL) | (1<<UCSZ1) ;
	#elif NUMBER_OF_DATA_BITS == 8 /*URSEL = 1 , UCSZ2 = 0 , UCSZ1 = 1 , UCSZ0 = 1*/
	        UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1) ; 
    1108:	e0 e4       	ldi	r30, 0x40	; 64
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	86 e8       	ldi	r24, 0x86	; 134
    110e:	80 83       	st	Z, r24
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a6 e9       	ldi	r26, 0x96	; 150
    1116:	b3 e4       	ldi	r27, 0x43	; 67
    1118:	8b 87       	std	Y+11, r24	; 0x0b
    111a:	9c 87       	std	Y+12, r25	; 0x0c
    111c:	ad 87       	std	Y+13, r26	; 0x0d
    111e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1120:	6b 85       	ldd	r22, Y+11	; 0x0b
    1122:	7c 85       	ldd	r23, Y+12	; 0x0c
    1124:	8d 85       	ldd	r24, Y+13	; 0x0d
    1126:	9e 85       	ldd	r25, Y+14	; 0x0e
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	4a ef       	ldi	r20, 0xFA	; 250
    112e:	54 e4       	ldi	r21, 0x44	; 68
    1130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	8f 83       	std	Y+7, r24	; 0x07
    113a:	98 87       	std	Y+8, r25	; 0x08
    113c:	a9 87       	std	Y+9, r26	; 0x09
    113e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1140:	6f 81       	ldd	r22, Y+7	; 0x07
    1142:	78 85       	ldd	r23, Y+8	; 0x08
    1144:	89 85       	ldd	r24, Y+9	; 0x09
    1146:	9a 85       	ldd	r25, Y+10	; 0x0a
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e8       	ldi	r20, 0x80	; 128
    114e:	5f e3       	ldi	r21, 0x3F	; 63
    1150:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1154:	88 23       	and	r24, r24
    1156:	2c f4       	brge	.+10     	; 0x1162 <MUART_voidInit+0xa8>
		__ticks = 1;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	3f c0       	rjmp	.+126    	; 0x11e0 <MUART_voidInit+0x126>
	else if (__tmp > 65535)
    1162:	6f 81       	ldd	r22, Y+7	; 0x07
    1164:	78 85       	ldd	r23, Y+8	; 0x08
    1166:	89 85       	ldd	r24, Y+9	; 0x09
    1168:	9a 85       	ldd	r25, Y+10	; 0x0a
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	3f ef       	ldi	r19, 0xFF	; 255
    116e:	4f e7       	ldi	r20, 0x7F	; 127
    1170:	57 e4       	ldi	r21, 0x47	; 71
    1172:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1176:	18 16       	cp	r1, r24
    1178:	4c f5       	brge	.+82     	; 0x11cc <MUART_voidInit+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117a:	6b 85       	ldd	r22, Y+11	; 0x0b
    117c:	7c 85       	ldd	r23, Y+12	; 0x0c
    117e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1180:	9e 85       	ldd	r25, Y+14	; 0x0e
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e2       	ldi	r20, 0x20	; 32
    1188:	51 e4       	ldi	r21, 0x41	; 65
    118a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	0f c0       	rjmp	.+30     	; 0x11c2 <MUART_voidInit+0x108>
    11a4:	88 ec       	ldi	r24, 0xC8	; 200
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9c 83       	std	Y+4, r25	; 0x04
    11aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <MUART_voidInit+0xf6>
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	9e 83       	std	Y+6, r25	; 0x06
    11c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	69 f7       	brne	.-38     	; 0x11a4 <MUART_voidInit+0xea>
    11ca:	14 c0       	rjmp	.+40     	; 0x11f4 <MUART_voidInit+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11cc:	6f 81       	ldd	r22, Y+7	; 0x07
    11ce:	78 85       	ldd	r23, Y+8	; 0x08
    11d0:	89 85       	ldd	r24, Y+9	; 0x09
    11d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	9e 83       	std	Y+6, r25	; 0x06
    11de:	8d 83       	std	Y+5, r24	; 0x05
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <MUART_voidInit+0x132>
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
	     #error "select correct option of NUMBER_OF_DATA_BITS "
	#endif
	
	/*wait until all other peripherals be initialized*/
	_delay_ms(300) ;
}
    11f4:	60 96       	adiw	r28, 0x10	; 16
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <MUART_voidSendData>:

void MUART_voidSendData(u8 A_u8Data)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	0f 92       	push	r0
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
    1212:	eb e2       	ldi	r30, 0x2B	; 43
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	80 72       	andi	r24, 0x20	; 32
    121e:	90 70       	andi	r25, 0x00	; 0
    1220:	95 95       	asr	r25
    1222:	87 95       	ror	r24
    1224:	95 95       	asr	r25
    1226:	87 95       	ror	r24
    1228:	95 95       	asr	r25
    122a:	87 95       	ror	r24
    122c:	95 95       	asr	r25
    122e:	87 95       	ror	r24
    1230:	95 95       	asr	r25
    1232:	87 95       	ror	r24
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	69 f3       	breq	.-38     	; 0x1212 <MUART_voidSendData+0xc>
	
	/*Put data to UDR transmit buffer transmit*/
	UDR=A_u8Data ;
    1238:	ec e2       	ldi	r30, 0x2C	; 44
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	80 83       	st	Z, r24
}
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <MUART_voidSendString>:

void MUART_voidSendString(u8* A_pu8Str)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <MUART_voidSendString+0x6>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	0a c0       	rjmp	.+20     	; 0x126c <MUART_voidSendString+0x24>
	while(*A_pu8Str != '\0')
	{
		MUART_voidSendData(*A_pu8Str);
    1258:	e9 81       	ldd	r30, Y+1	; 0x01
    125a:	fa 81       	ldd	r31, Y+2	; 0x02
    125c:	80 81       	ld	r24, Z
    125e:	0e 94 03 09 	call	0x1206	; 0x1206 <MUART_voidSendData>
		A_pu8Str++ ;
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01
	UDR=A_u8Data ;
}

void MUART_voidSendString(u8* A_pu8Str)
{
	while(*A_pu8Str != '\0')
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	80 81       	ld	r24, Z
    1272:	88 23       	and	r24, r24
    1274:	89 f7       	brne	.-30     	; 0x1258 <MUART_voidSendString+0x10>
	{
		MUART_voidSendData(*A_pu8Str);
		A_pu8Str++ ;
	}
	MUART_voidSendData('\n');
    1276:	8a e0       	ldi	r24, 0x0A	; 10
    1278:	0e 94 03 09 	call	0x1206	; 0x1206 <MUART_voidSendData>
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <MUART_voidSendIntNumber>:

void MUART_voidSendIntNumber(u32 A_u32Number)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	a4 97       	sbiw	r28, 0x24	; 36
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	69 a3       	std	Y+33, r22	; 0x21
    129c:	7a a3       	std	Y+34, r23	; 0x22
    129e:	8b a3       	std	Y+35, r24	; 0x23
    12a0:	9c a3       	std	Y+36, r25	; 0x24
	/**array to stored conversion character*/
	s8* L_Ps8String [16] = {0} ;
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	fe 01       	movw	r30, r28
    12a6:	31 96       	adiw	r30, 0x01	; 1
    12a8:	df 01       	movw	r26, r30
    12aa:	98 2f       	mov	r25, r24
    12ac:	1d 92       	st	X+, r1
    12ae:	9a 95       	dec	r25
    12b0:	e9 f7       	brne	.-6      	; 0x12ac <MUART_voidSendIntNumber+0x26>

	/** convert integer to string*/
	ltoa (A_u32Number , (s8*)L_Ps8String , 10) ;
    12b2:	89 a1       	ldd	r24, Y+33	; 0x21
    12b4:	9a a1       	ldd	r25, Y+34	; 0x22
    12b6:	ab a1       	ldd	r26, Y+35	; 0x23
    12b8:	bc a1       	ldd	r27, Y+36	; 0x24
    12ba:	9e 01       	movw	r18, r28
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	bc 01       	movw	r22, r24
    12c2:	cd 01       	movw	r24, r26
    12c4:	a9 01       	movw	r20, r18
    12c6:	2a e0       	ldi	r18, 0x0A	; 10
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <ltoa>

	/**display number after convesion*/
	MUART_voidSendString ((u8*)L_Ps8String) ;
    12ce:	ce 01       	movw	r24, r28
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	0e 94 24 09 	call	0x1248	; 0x1248 <MUART_voidSendString>
}
    12d6:	a4 96       	adiw	r28, 0x24	; 36
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <MUART_u8ReceiveData>:

u8 MUART_u8ReceiveData(void)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
    12f0:	eb e2       	ldi	r30, 0x2B	; 43
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	88 1f       	adc	r24, r24
    12f8:	88 27       	eor	r24, r24
    12fa:	88 1f       	adc	r24, r24
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	90 70       	andi	r25, 0x00	; 0
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	a9 f3       	breq	.-22     	; 0x12f0 <MUART_u8ReceiveData+0x8>
	
	/*Receive data from UDR receive buffer*/
	return UDR ;
    1306:	ec e2       	ldi	r30, 0x2C	; 44
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
}
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <MUART_voidReceiveString>:

void MUART_voidReceiveString(u8 A_u8Str[])
{
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <MUART_voidReceiveString+0xa>
    131c:	00 d0       	rcall	.+0      	; 0x131e <MUART_voidReceiveString+0xc>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <MUART_voidReceiveString+0xe>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
	u32 L_u32Index = 0 ;
    1328:	19 82       	std	Y+1, r1	; 0x01
    132a:	1a 82       	std	Y+2, r1	; 0x02
    132c:	1b 82       	std	Y+3, r1	; 0x03
    132e:	1c 82       	std	Y+4, r1	; 0x04
	while (1)
	{
		A_u8Str[L_u32Index]=MUART_u8ReceiveData();
    1330:	29 81       	ldd	r18, Y+1	; 0x01
    1332:	3a 81       	ldd	r19, Y+2	; 0x02
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	8c 01       	movw	r16, r24
    133a:	02 0f       	add	r16, r18
    133c:	13 1f       	adc	r17, r19
    133e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <MUART_u8ReceiveData>
    1342:	f8 01       	movw	r30, r16
    1344:	80 83       	st	Z, r24
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
    1346:	29 81       	ldd	r18, Y+1	; 0x01
    1348:	3a 81       	ldd	r19, Y+2	; 0x02
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	fc 01       	movw	r30, r24
    1350:	e2 0f       	add	r30, r18
    1352:	f3 1f       	adc	r31, r19
    1354:	80 81       	ld	r24, Z
    1356:	8a 30       	cpi	r24, 0x0A	; 10
    1358:	51 f0       	breq	.+20     	; 0x136e <MUART_voidReceiveString+0x5c>
    135a:	29 81       	ldd	r18, Y+1	; 0x01
    135c:	3a 81       	ldd	r19, Y+2	; 0x02
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	fc 01       	movw	r30, r24
    1364:	e2 0f       	add	r30, r18
    1366:	f3 1f       	adc	r31, r19
    1368:	80 81       	ld	r24, Z
    136a:	8d 30       	cpi	r24, 0x0D	; 13
    136c:	99 f4       	brne	.+38     	; 0x1394 <MUART_voidReceiveString+0x82>
		{
			A_u8Str[L_u32Index]='\0';
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	2d 81       	ldd	r18, Y+5	; 0x05
    1374:	3e 81       	ldd	r19, Y+6	; 0x06
    1376:	f9 01       	movw	r30, r18
    1378:	e8 0f       	add	r30, r24
    137a:	f9 1f       	adc	r31, r25
    137c:	10 82       	st	Z, r1
			break;
		}
		L_u32Index ++ ;
	}
}
    137e:	26 96       	adiw	r28, 0x06	; 6
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
		{
			A_u8Str[L_u32Index]='\0';
			break;
		}
		L_u32Index ++ ;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	ab 81       	ldd	r26, Y+3	; 0x03
    139a:	bc 81       	ldd	r27, Y+4	; 0x04
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	a1 1d       	adc	r26, r1
    13a0:	b1 1d       	adc	r27, r1
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	ab 83       	std	Y+3, r26	; 0x03
    13a8:	bc 83       	std	Y+4, r27	; 0x04
    13aa:	c2 cf       	rjmp	.-124    	; 0x1330 <MUART_voidReceiveString+0x1e>

000013ac <MUART_voidReciveIntNumber>:
	}
}

u32 MUART_voidReciveIntNumber(void) 
{
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	cc 56       	subi	r28, 0x6C	; 108
    13be:	d0 40       	sbci	r29, 0x00	; 0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
	u32 L_u32Index = 0 ;
    13ca:	1d 82       	std	Y+5, r1	; 0x05
    13cc:	1e 82       	std	Y+6, r1	; 0x06
    13ce:	1f 82       	std	Y+7, r1	; 0x07
    13d0:	18 86       	std	Y+8, r1	; 0x08
	u32 A_u32Number ;
	u8  A_u8Str [100] ;
	while (1)
	{
		A_u8Str[L_u32Index]=MUART_u8ReceiveData();
    13d2:	ed 80       	ldd	r14, Y+5	; 0x05
    13d4:	fe 80       	ldd	r15, Y+6	; 0x06
    13d6:	0f 81       	ldd	r16, Y+7	; 0x07
    13d8:	18 85       	ldd	r17, Y+8	; 0x08
    13da:	0e 94 74 09 	call	0x12e8	; 0x12e8 <MUART_u8ReceiveData>
    13de:	28 2f       	mov	r18, r24
    13e0:	ce 01       	movw	r24, r28
    13e2:	09 96       	adiw	r24, 0x09	; 9
    13e4:	fc 01       	movw	r30, r24
    13e6:	ee 0d       	add	r30, r14
    13e8:	ff 1d       	adc	r31, r15
    13ea:	20 83       	st	Z, r18
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	af 81       	ldd	r26, Y+7	; 0x07
    13f2:	b8 85       	ldd	r27, Y+8	; 0x08
    13f4:	9e 01       	movw	r18, r28
    13f6:	27 5f       	subi	r18, 0xF7	; 247
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	f9 01       	movw	r30, r18
    13fc:	e8 0f       	add	r30, r24
    13fe:	f9 1f       	adc	r31, r25
    1400:	80 81       	ld	r24, Z
    1402:	8a 30       	cpi	r24, 0x0A	; 10
    1404:	69 f0       	breq	.+26     	; 0x1420 <MUART_voidReciveIntNumber+0x74>
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	af 81       	ldd	r26, Y+7	; 0x07
    140c:	b8 85       	ldd	r27, Y+8	; 0x08
    140e:	9e 01       	movw	r18, r28
    1410:	27 5f       	subi	r18, 0xF7	; 247
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	f9 01       	movw	r30, r18
    1416:	e8 0f       	add	r30, r24
    1418:	f9 1f       	adc	r31, r25
    141a:	80 81       	ld	r24, Z
    141c:	8d 30       	cpi	r24, 0x0D	; 13
    141e:	49 f5       	brne	.+82     	; 0x1472 <MUART_voidReciveIntNumber+0xc6>
		{
			A_u8Str[L_u32Index]='\0';
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	af 81       	ldd	r26, Y+7	; 0x07
    1426:	b8 85       	ldd	r27, Y+8	; 0x08
    1428:	9e 01       	movw	r18, r28
    142a:	27 5f       	subi	r18, 0xF7	; 247
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	f9 01       	movw	r30, r18
    1430:	e8 0f       	add	r30, r24
    1432:	f9 1f       	adc	r31, r25
    1434:	10 82       	st	Z, r1
			break;
		}
		L_u32Index ++ ;
	}
	A_u32Number = atol(A_u8Str) ;
    1436:	ce 01       	movw	r24, r28
    1438:	09 96       	adiw	r24, 0x09	; 9
    143a:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <atol>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	ab 83       	std	Y+3, r26	; 0x03
    1448:	bc 83       	std	Y+4, r27	; 0x04
	return A_u32Number ;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	ab 81       	ldd	r26, Y+3	; 0x03
    1450:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	c4 59       	subi	r28, 0x94	; 148
    1458:	df 4f       	sbci	r29, 0xFF	; 255
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	08 95       	ret
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
		{
			A_u8Str[L_u32Index]='\0';
			break;
		}
		L_u32Index ++ ;
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	af 81       	ldd	r26, Y+7	; 0x07
    1478:	b8 85       	ldd	r27, Y+8	; 0x08
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	a1 1d       	adc	r26, r1
    147e:	b1 1d       	adc	r27, r1
    1480:	8d 83       	std	Y+5, r24	; 0x05
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	af 83       	std	Y+7, r26	; 0x07
    1486:	b8 87       	std	Y+8, r27	; 0x08
    1488:	a4 cf       	rjmp	.-184    	; 0x13d2 <MUART_voidReciveIntNumber+0x26>

0000148a <MTimer_voidInt>:
static u32 G_u32CountsForSecondRising = 0 ; /*number of counts until arrived to second rising of input signal*/
static u32 G_u32FrequancyOfTimeOn     = 0 ; /*counts of (time on) range */
static u32 G_u32FrequancyOfTimeTotal  = 0 ; /*counts of (time total) range */

void MTimer_voidInt (void)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62

	/** Enable global interrupt flag */
	    SET_BIT(SREG, I_BIT);
    1492:	af e5       	ldi	r26, 0x5F	; 95
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ef e5       	ldi	r30, 0x5F	; 95
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 68       	ori	r24, 0x80	; 128
    149e:	8c 93       	st	X, r24
	    #elif TIMER0_PRESCALER == CLK_PS_8          /**clk = 1MHZ    */
			CLR_BIT(TCCR0 , CS00) ;
	        SET_BIT(TCCR0 , CS01) ;
	        CLR_BIT(TCCR0 , CS02) ;
	    #elif TIMER0_PRESCALER == CLK_PS_64         /**clk = 125KHZ  */
		    SET_BIT(TCCR0 , CS00) ;
    14a0:	a3 e5       	ldi	r26, 0x53	; 83
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e3 e5       	ldi	r30, 0x53	; 83
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	81 60       	ori	r24, 0x01	; 1
    14ac:	8c 93       	st	X, r24
	        SET_BIT(TCCR0 , CS01) ;
    14ae:	a3 e5       	ldi	r26, 0x53	; 83
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e3 e5       	ldi	r30, 0x53	; 83
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	82 60       	ori	r24, 0x02	; 2
    14ba:	8c 93       	st	X, r24
	        CLR_BIT(TCCR0 , CS02) ;
    14bc:	a3 e5       	ldi	r26, 0x53	; 83
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e3 e5       	ldi	r30, 0x53	; 83
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8b 7f       	andi	r24, 0xFB	; 251
    14c8:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , COM00)  ;/*clear OC0 on compare match , set at botton*/
			SET_BIT(TCCR0 , COM01)  ;
			CLR_BIT(TIMSK , OCIE0) ;/*Disable interrupt of compare match mode*/
			MDIO_voidSetPinDir (DIO_PORTB , DIO_PIN3 , DIO_HIGH) ; /*set OC0 pin as output*/
		#elif TIMER0_MODE == COMPARE_MATCH_MODE
		    CLR_BIT(TCCR0 , WGM00) ;/*output compare match mode*/
    14ca:	a3 e5       	ldi	r26, 0x53	; 83
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e3 e5       	ldi	r30, 0x53	; 83
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 7b       	andi	r24, 0xBF	; 191
    14d6:	8c 93       	st	X, r24
		    SET_BIT(TCCR0 , WGM01) ;
    14d8:	a3 e5       	ldi	r26, 0x53	; 83
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e3 e5       	ldi	r30, 0x53	; 83
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	88 60       	ori	r24, 0x08	; 8
    14e4:	8c 93       	st	X, r24
			SET_BIT(TIMSK , OCIE0);/*Enable interrupt of compare match mode*/
    14e6:	a9 e5       	ldi	r26, 0x59	; 89
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e9 e5       	ldi	r30, 0x59	; 89
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	82 60       	ori	r24, 0x02	; 2
    14f2:	8c 93       	st	X, r24
			G_u32Timer0IntervalCtcCount = TIMER0_INTERVAL_COUNTS ;
    14f4:	80 ea       	ldi	r24, 0xA0	; 160
    14f6:	9f e0       	ldi	r25, 0x0F	; 15
    14f8:	a0 e0       	ldi	r26, 0x00	; 0
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	80 93 98 01 	sts	0x0198, r24
    1500:	90 93 99 01 	sts	0x0199, r25
    1504:	a0 93 9a 01 	sts	0x019A, r26
    1508:	b0 93 9b 01 	sts	0x019B, r27
			#if TIMER0_COMPAREVALUE >= 0 && TIMER0_COMPAREVALUE <= 255
		        OCR0 = TIMER0_COMPAREVALUE ;
    150c:	ec e5       	ldi	r30, 0x5C	; 92
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	89 e8       	ldi	r24, 0x89	; 137
    1512:	80 83       	st	Z, r24
		#else
			#error "select correct mode of TIMER2_MODE"
		#endif
	#elif TIMER2 == DISABLE2
	/** NO clk source (Timer2 stopped) */
	    CLR_BIT(TCCR2 , CS20) ;
    1514:	a5 e4       	ldi	r26, 0x45	; 69
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e5 e4       	ldi	r30, 0x45	; 69
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	8e 7f       	andi	r24, 0xFE	; 254
    1520:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2 , CS21) ;
    1522:	a5 e4       	ldi	r26, 0x45	; 69
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e4       	ldi	r30, 0x45	; 69
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8d 7f       	andi	r24, 0xFD	; 253
    152e:	8c 93       	st	X, r24
	    CLR_BIT(TCCR2 , CS22) ;
    1530:	a5 e4       	ldi	r26, 0x45	; 69
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e4       	ldi	r30, 0x45	; 69
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8b 7f       	andi	r24, 0xFB	; 251
    153c:	8c 93       	st	X, r24
        /*                         TIMER1                               */
        /****************************************************************/
	#if   TIMER1 == ENABLE1
	    /**set prescaller of Timer clk*/
	    #if   TIMER1_PRESCALER == CLK_PS_1          /**clk = 8MHZ    */
		    SET_BIT(TCCR1B , CS10) ;
    153e:	ae e4       	ldi	r26, 0x4E	; 78
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ee e4       	ldi	r30, 0x4E	; 78
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	81 60       	ori	r24, 0x01	; 1
    154a:	8c 93       	st	X, r24
	        CLR_BIT(TCCR1B , CS11) ;
    154c:	ae e4       	ldi	r26, 0x4E	; 78
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ee e4       	ldi	r30, 0x4E	; 78
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8d 7f       	andi	r24, 0xFD	; 253
    1558:	8c 93       	st	X, r24
	        CLR_BIT(TCCR1B , CS12) ;
    155a:	ae e4       	ldi	r26, 0x4E	; 78
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ee e4       	ldi	r30, 0x4E	; 78
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8b 7f       	andi	r24, 0xFB	; 251
    1566:	8c 93       	st	X, r24
			#error "select correct options of TIMER1_PRESCALER"
		#endif

		/**Timer/counter1 mode*/
		#if   TIMER1_MODE == NORMAL_MODE
		    CLR_BIT(TCCR1A , WGM10) ;/*Normal mode (over flow mode)*/
    1568:	af e4       	ldi	r26, 0x4F	; 79
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ef e4       	ldi	r30, 0x4F	; 79
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8e 7f       	andi	r24, 0xFE	; 254
    1574:	8c 93       	st	X, r24
		    CLR_BIT(TCCR1A , WGM11) ;
    1576:	af e4       	ldi	r26, 0x4F	; 79
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	ef e4       	ldi	r30, 0x4F	; 79
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8d 7f       	andi	r24, 0xFD	; 253
    1582:	8c 93       	st	X, r24
		    CLR_BIT(TCCR1B , WGM12) ;
    1584:	ae e4       	ldi	r26, 0x4E	; 78
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	ee e4       	ldi	r30, 0x4E	; 78
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	87 7f       	andi	r24, 0xF7	; 247
    1590:	8c 93       	st	X, r24
		    CLR_BIT(TCCR1B , WGM13) ;
    1592:	ae e4       	ldi	r26, 0x4E	; 78
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	ee e4       	ldi	r30, 0x4E	; 78
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 7e       	andi	r24, 0xEF	; 239
    159e:	8c 93       	st	X, r24
			SET_BIT(TIMSK  , TOIE1) ;/*Enable interrupt of over flow mode*/
    15a0:	a9 e5       	ldi	r26, 0x59	; 89
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e9 e5       	ldi	r30, 0x59	; 89
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	84 60       	ori	r24, 0x04	; 4
    15ac:	8c 93       	st	X, r24
			#if ICU_ENABLE == ENABLE_ICU
				SET_BIT(TCCR1B , ICNC1) ;/*input capture noise cancler*/
    15ae:	ae e4       	ldi	r26, 0x4E	; 78
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ee e4       	ldi	r30, 0x4E	; 78
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	8c 93       	st	X, r24
	    CLR_BIT(TCCR1B , CS11) ;
	    CLR_BIT(TCCR1B , CS12) ;
	#else
		#error "TIMER1 must be ENABLE1 or DISABLE1"
	#endif
}
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <MTimer_voidSetDisiredTime>:

void MTimer_voidSetDisiredTime (u8 A_u8TimerID , f32 A_f32DisiredTime , void (*A_fptr)(void) )
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	63 97       	sbiw	r28, 0x13	; 19
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	8d 87       	std	Y+13, r24	; 0x0d
    15d8:	4e 87       	std	Y+14, r20	; 0x0e
    15da:	5f 87       	std	Y+15, r21	; 0x0f
    15dc:	68 8b       	std	Y+16, r22	; 0x10
    15de:	79 8b       	std	Y+17, r23	; 0x11
    15e0:	3b 8b       	std	Y+19, r19	; 0x13
    15e2:	2a 8b       	std	Y+18, r18	; 0x12
	if (A_u8TimerID == TIMER0)
    15e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <MTimer_voidSetDisiredTime+0x2a>
    15ea:	1a c1       	rjmp	.+564    	; 0x1820 <MTimer_voidSetDisiredTime+0x25e>
					G_u32Timer0IntervalCount ++ ;
				}
			}
	    #endif
	}
	else if (A_u8TimerID == TIMER2)
    15ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ee:	84 30       	cpi	r24, 0x04	; 4
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <MTimer_voidSetDisiredTime+0x32>
    15f2:	16 c1       	rjmp	.+556    	; 0x1820 <MTimer_voidSetDisiredTime+0x25e>
					G_u32Timer2IntervalCount ++ ;
				}
			}
	    #endif
	}
	else if (A_u8TimerID == TIMER1)
    15f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f6:	85 30       	cpi	r24, 0x05	; 5
    15f8:	09 f0       	breq	.+2      	; 0x15fc <MTimer_voidSetDisiredTime+0x3a>
    15fa:	12 c1       	rjmp	.+548    	; 0x1820 <MTimer_voidSetDisiredTime+0x25e>
			  ** OverFlowTime       = (2^resolution) * Prescaller / system frequancy
			  ** OverFlowCount      = DisiredTime / OverFlowTime
			  ** NumberOfTimerCount = OverFlowCount * (2^resolution)
			  ** PreloadValue       = (2^resolution) - NumberOfTimerCount
			*/
		    f32 L_f32OverFlowTime        = 65535 ;
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	9f ef       	ldi	r25, 0xFF	; 255
    1600:	af e7       	ldi	r26, 0x7F	; 127
    1602:	b7 e4       	ldi	r27, 0x47	; 71
    1604:	89 87       	std	Y+9, r24	; 0x09
    1606:	9a 87       	std	Y+10, r25	; 0x0a
    1608:	ab 87       	std	Y+11, r26	; 0x0b
    160a:	bc 87       	std	Y+12, r27	; 0x0c
	        f32 L_f32OverFlowCount       = 0 ;
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	a0 e0       	ldi	r26, 0x00	; 0
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	8d 83       	std	Y+5, r24	; 0x05
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	af 83       	std	Y+7, r26	; 0x07
    161a:	b8 87       	std	Y+8, r27	; 0x08
	        u16  L_u16NumberOfTimerCount = 65535 ;
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	9f ef       	ldi	r25, 0xFF	; 255
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
	        u16  L_u16PreloadValue       = 0 ;
    1624:	1a 82       	std	Y+2, r1	; 0x02
    1626:	19 82       	std	Y+1, r1	; 0x01

	        L_f32OverFlowTime  = L_f32OverFlowTime * TIMER1_PRESCALER ;
            L_f32OverFlowTime  = L_f32OverFlowTime / CLOK_SYSTEM ;
    1628:	69 85       	ldd	r22, Y+9	; 0x09
    162a:	7a 85       	ldd	r23, Y+10	; 0x0a
    162c:	8b 85       	ldd	r24, Y+11	; 0x0b
    162e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	34 e2       	ldi	r19, 0x24	; 36
    1634:	44 ef       	ldi	r20, 0xF4	; 244
    1636:	5a e4       	ldi	r21, 0x4A	; 74
    1638:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	89 87       	std	Y+9, r24	; 0x09
    1642:	9a 87       	std	Y+10, r25	; 0x0a
    1644:	ab 87       	std	Y+11, r26	; 0x0b
    1646:	bc 87       	std	Y+12, r27	; 0x0c
			L_f32OverFlowCount = A_f32DisiredTime / L_f32OverFlowTime ;
    1648:	6e 85       	ldd	r22, Y+14	; 0x0e
    164a:	7f 85       	ldd	r23, Y+15	; 0x0f
    164c:	88 89       	ldd	r24, Y+16	; 0x10
    164e:	99 89       	ldd	r25, Y+17	; 0x11
    1650:	29 85       	ldd	r18, Y+9	; 0x09
    1652:	3a 85       	ldd	r19, Y+10	; 0x0a
    1654:	4b 85       	ldd	r20, Y+11	; 0x0b
    1656:	5c 85       	ldd	r21, Y+12	; 0x0c
    1658:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	af 83       	std	Y+7, r26	; 0x07
    1666:	b8 87       	std	Y+8, r27	; 0x08
			Timer1_Overflow_CallBack = A_fptr ;
    1668:	8a 89       	ldd	r24, Y+18	; 0x12
    166a:	9b 89       	ldd	r25, Y+19	; 0x13
    166c:	90 93 e3 01 	sts	0x01E3, r25
    1670:	80 93 e2 01 	sts	0x01E2, r24
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount * A_f32DisiredTime ;
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	cc 01       	movw	r24, r24
    167a:	a0 e0       	ldi	r26, 0x00	; 0
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	bc 01       	movw	r22, r24
    1680:	cd 01       	movw	r24, r26
    1682:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1690:	3f 85       	ldd	r19, Y+15	; 0x0f
    1692:	48 89       	ldd	r20, Y+16	; 0x10
    1694:	59 89       	ldd	r21, Y+17	; 0x11
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
			L_u16NumberOfTimerCount = L_u16NumberOfTimerCount / L_f32OverFlowTime ;
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	cc 01       	movw	r24, r24
    16b4:	a0 e0       	ldi	r26, 0x00	; 0
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	29 85       	ldd	r18, Y+9	; 0x09
    16ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    16cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    16ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    16d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9c 83       	std	Y+4, r25	; 0x04
    16e6:	8b 83       	std	Y+3, r24	; 0x03
			if (L_f32OverFlowCount < 1.0)
    16e8:	6d 81       	ldd	r22, Y+5	; 0x05
    16ea:	7e 81       	ldd	r23, Y+6	; 0x06
    16ec:	8f 81       	ldd	r24, Y+7	; 0x07
    16ee:	98 85       	ldd	r25, Y+8	; 0x08
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	cc f4       	brge	.+50     	; 0x1732 <MTimer_voidSetDisiredTime+0x170>
			{
				L_u16PreloadValue       = 65535 - L_u16NumberOfTimerCount ;
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	80 95       	com	r24
    1706:	90 95       	com	r25
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
				TCNT1 = L_u16PreloadValue ;
    170c:	ec e4       	ldi	r30, 0x4C	; 76
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	9a 81       	ldd	r25, Y+2	; 0x02
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
				G_u32Timer1IntervalCount = 1 ;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a0 e0       	ldi	r26, 0x00	; 0
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	80 93 ac 01 	sts	0x01AC, r24
    1724:	90 93 ad 01 	sts	0x01AD, r25
    1728:	a0 93 ae 01 	sts	0x01AE, r26
    172c:	b0 93 af 01 	sts	0x01AF, r27
    1730:	77 c0       	rjmp	.+238    	; 0x1820 <MTimer_voidSetDisiredTime+0x25e>
			}
			else
			{
				G_u32Timer1IntervalCount = (u32)L_f32OverFlowCount ;
    1732:	6d 81       	ldd	r22, Y+5	; 0x05
    1734:	7e 81       	ldd	r23, Y+6	; 0x06
    1736:	8f 81       	ldd	r24, Y+7	; 0x07
    1738:	98 85       	ldd	r25, Y+8	; 0x08
    173a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	80 93 ac 01 	sts	0x01AC, r24
    1746:	90 93 ad 01 	sts	0x01AD, r25
    174a:	a0 93 ae 01 	sts	0x01AE, r26
    174e:	b0 93 af 01 	sts	0x01AF, r27
				if (L_f32OverFlowCount - (u32)L_f32OverFlowCount != 0.0)
    1752:	6d 81       	ldd	r22, Y+5	; 0x05
    1754:	7e 81       	ldd	r23, Y+6	; 0x06
    1756:	8f 81       	ldd	r24, Y+7	; 0x07
    1758:	98 85       	ldd	r25, Y+8	; 0x08
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    176a:	9b 01       	movw	r18, r22
    176c:	ac 01       	movw	r20, r24
    176e:	6d 81       	ldd	r22, Y+5	; 0x05
    1770:	7e 81       	ldd	r23, Y+6	; 0x06
    1772:	8f 81       	ldd	r24, Y+7	; 0x07
    1774:	98 85       	ldd	r25, Y+8	; 0x08
    1776:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    178e:	88 23       	and	r24, r24
    1790:	09 f4       	brne	.+2      	; 0x1794 <MTimer_voidSetDisiredTime+0x1d2>
    1792:	46 c0       	rjmp	.+140    	; 0x1820 <MTimer_voidSetDisiredTime+0x25e>
				{
					L_u16NumberOfTimerCount = (u16)((L_u16NumberOfTimerCount / 65535.0) * 65535) ;
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	cc 01       	movw	r24, r24
    179a:	a0 e0       	ldi	r26, 0x00	; 0
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	3f ef       	ldi	r19, 0xFF	; 255
    17b2:	4f e7       	ldi	r20, 0x7F	; 127
    17b4:	57 e4       	ldi	r21, 0x47	; 71
    17b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
				    L_u16PreloadValue    = 65535 - L_u16NumberOfTimerCount ;
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	80 95       	com	r24
    17e8:	90 95       	com	r25
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
				    TCNT1 = L_u16PreloadValue ;
    17ee:	ec e4       	ldi	r30, 0x4C	; 76
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
					G_u32Timer1IntervalCount ++ ;
    17fa:	80 91 ac 01 	lds	r24, 0x01AC
    17fe:	90 91 ad 01 	lds	r25, 0x01AD
    1802:	a0 91 ae 01 	lds	r26, 0x01AE
    1806:	b0 91 af 01 	lds	r27, 0x01AF
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	a1 1d       	adc	r26, r1
    180e:	b1 1d       	adc	r27, r1
    1810:	80 93 ac 01 	sts	0x01AC, r24
    1814:	90 93 ad 01 	sts	0x01AD, r25
    1818:	a0 93 ae 01 	sts	0x01AE, r26
    181c:	b0 93 af 01 	sts	0x01AF, r27
				}
			}
	    #endif
	}
}
    1820:	63 96       	adiw	r28, 0x13	; 19
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <MTimer_voidCtcCallBack>:

void MTimer_voidCtcCallBack (u8  A_u8TimerID , void (*A_fptr1)(void) , void (*A_fptr2)(void))
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <MTimer_voidCtcCallBack+0x6>
    1838:	00 d0       	rcall	.+0      	; 0x183a <MTimer_voidCtcCallBack+0x8>
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	7b 83       	std	Y+3, r23	; 0x03
    1844:	6a 83       	std	Y+2, r22	; 0x02
    1846:	5d 83       	std	Y+5, r21	; 0x05
    1848:	4c 83       	std	Y+4, r20	; 0x04
	if (A_u8TimerID == TIMER0)
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	39 f4       	brne	.+14     	; 0x185e <MTimer_voidCtcCallBack+0x2c>
	{
        Timer0_CTC_CallBack = A_fptr1 ;
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	90 93 e7 01 	sts	0x01E7, r25
    1858:	80 93 e6 01 	sts	0x01E6, r24
    185c:	19 c0       	rjmp	.+50     	; 0x1890 <MTimer_voidCtcCallBack+0x5e>
	}
	else if (A_u8TimerID == TIMER2)
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	84 30       	cpi	r24, 0x04	; 4
    1862:	39 f4       	brne	.+14     	; 0x1872 <MTimer_voidCtcCallBack+0x40>
	{
		Timer2_CTC_CallBack = A_fptr1 ;
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	9b 81       	ldd	r25, Y+3	; 0x03
    1868:	90 93 e9 01 	sts	0x01E9, r25
    186c:	80 93 e8 01 	sts	0x01E8, r24
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <MTimer_voidCtcCallBack+0x5e>
	}
	else if (A_u8TimerID == TIMER1)
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	85 30       	cpi	r24, 0x05	; 5
    1876:	61 f4       	brne	.+24     	; 0x1890 <MTimer_voidCtcCallBack+0x5e>
		#if   COMPARE_TYPE == COMPARE_A
		    Timer1_CTC_A_CallBack = A_fptr1 ;
		#elif COMPARE_TYPE == COMPARE_B
		    Timer1_CTC_B_CallBack = A_fptr2 ;
		#elif COMPARE_TYPE == COMPARE_BOTH
		    Timer1_CTC_A_CallBack = A_fptr1 ;
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	90 93 eb 01 	sts	0x01EB, r25
    1880:	80 93 ea 01 	sts	0x01EA, r24
			Timer1_CTC_B_CallBack = A_fptr2 ;
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	90 93 ed 01 	sts	0x01ED, r25
    188c:	80 93 ec 01 	sts	0x01EC, r24
		#endif
	}
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <MTimer_voidSetPWM>:

void MTimer_voidSetPWM (u8  A_u8TimerID , u16 A_u16CompareValueA , u16 A_u16CompareValueB)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <MTimer_voidSetPWM+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <MTimer_voidSetPWM+0x8>
    18a8:	0f 92       	push	r0
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	7b 83       	std	Y+3, r23	; 0x03
    18b2:	6a 83       	std	Y+2, r22	; 0x02
    18b4:	5d 83       	std	Y+5, r21	; 0x05
    18b6:	4c 83       	std	Y+4, r20	; 0x04
    if (A_u8TimerID == TIMER0)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	39 f0       	breq	.+14     	; 0x18cc <MTimer_voidSetPWM+0x2c>
	{
		#if TIMER0_MODE == FAST_PWM_MODE || TIMER0_MODE == PWM_PHASE_CORRECT_MODE
		    OCR0 = A_u16CompareValueA ;
		#endif
	}
	else if (A_u8TimerID == TIMER2)
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	21 f4       	brne	.+8      	; 0x18cc <MTimer_voidSetPWM+0x2c>
	{
		#if TIMER2_MODE == FAST_PWM_MODE || TIMER2_MODE == PWM_PHASE_CORRECT_MODE
	        OCR2 = A_u16CompareValueA ;
    18c4:	e3 e4       	ldi	r30, 0x43	; 67
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	80 83       	st	Z, r24
			      OCR1A = A_u16CompareValueA ;
			      OCR1B = A_u16CompareValueB ;
		    #endif
		#endif
	}
}
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <MTimerCalcFreqofTon>:

u32 MTimerCalcFreqofTon (void)
{
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <MTimerCalcFreqofTon+0xe>
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <MTimerCalcFreqofTon+0x10>
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
	u32 L_u32Period = 0 ;
    18f0:	19 82       	std	Y+1, r1	; 0x01
    18f2:	1a 82       	std	Y+2, r1	; 0x02
    18f4:	1b 82       	std	Y+3, r1	; 0x03
    18f6:	1c 82       	std	Y+4, r1	; 0x04
	G_u32OverFlowCounts = 0 ;
    18f8:	10 92 b0 01 	sts	0x01B0, r1
    18fc:	10 92 b1 01 	sts	0x01B1, r1
    1900:	10 92 b2 01 	sts	0x01B2, r1
    1904:	10 92 b3 01 	sts	0x01B3, r1

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1908:	a8 e5       	ldi	r26, 0x58	; 88
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e8 e5       	ldi	r30, 0x58	; 88
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	80 62       	ori	r24, 0x20	; 32
    1914:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    1916:	ae e4       	ldi	r26, 0x4E	; 78
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	ee e4       	ldi	r30, 0x4E	; 78
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 64       	ori	r24, 0x40	; 64
    1922:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1924:	e8 e5       	ldi	r30, 0x58	; 88
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	80 72       	andi	r24, 0x20	; 32
    1930:	90 70       	andi	r25, 0x00	; 0
    1932:	95 95       	asr	r25
    1934:	87 95       	ror	r24
    1936:	95 95       	asr	r25
    1938:	87 95       	ror	r24
    193a:	95 95       	asr	r25
    193c:	87 95       	ror	r24
    193e:	95 95       	asr	r25
    1940:	87 95       	ror	r24
    1942:	95 95       	asr	r25
    1944:	87 95       	ror	r24
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	69 f3       	breq	.-38     	; 0x1924 <MTimerCalcFreqofTon+0x48>
	G_u32CountsForFirstRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    194a:	e6 e4       	ldi	r30, 0x46	; 70
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	7c 01       	movw	r14, r24
    1954:	00 e0       	ldi	r16, 0x00	; 0
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	80 91 b0 01 	lds	r24, 0x01B0
    195c:	90 91 b1 01 	lds	r25, 0x01B1
    1960:	a0 91 b2 01 	lds	r26, 0x01B2
    1964:	b0 91 b3 01 	lds	r27, 0x01B3
    1968:	2f ef       	ldi	r18, 0xFF	; 255
    196a:	3f ef       	ldi	r19, 0xFF	; 255
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__mulsi3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	8e 0d       	add	r24, r14
    197e:	9f 1d       	adc	r25, r15
    1980:	a0 1f       	adc	r26, r16
    1982:	b1 1f       	adc	r27, r17
    1984:	80 93 b4 01 	sts	0x01B4, r24
    1988:	90 93 b5 01 	sts	0x01B5, r25
    198c:	a0 93 b6 01 	sts	0x01B6, r26
    1990:	b0 93 b7 01 	sts	0x01B7, r27

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1994:	a8 e5       	ldi	r26, 0x58	; 88
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e8 e5       	ldi	r30, 0x58	; 88
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 62       	ori	r24, 0x20	; 32
    19a0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect falling edge*/
    19a2:	ae e4       	ldi	r26, 0x4E	; 78
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ee e4       	ldi	r30, 0x4E	; 78
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 7b       	andi	r24, 0xBF	; 191
    19ae:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    19b0:	e8 e5       	ldi	r30, 0x58	; 88
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	80 72       	andi	r24, 0x20	; 32
    19bc:	90 70       	andi	r25, 0x00	; 0
    19be:	95 95       	asr	r25
    19c0:	87 95       	ror	r24
    19c2:	95 95       	asr	r25
    19c4:	87 95       	ror	r24
    19c6:	95 95       	asr	r25
    19c8:	87 95       	ror	r24
    19ca:	95 95       	asr	r25
    19cc:	87 95       	ror	r24
    19ce:	95 95       	asr	r25
    19d0:	87 95       	ror	r24
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	69 f3       	breq	.-38     	; 0x19b0 <MTimerCalcFreqofTon+0xd4>
	G_u32CountsForFirstFaling = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    19d6:	e6 e4       	ldi	r30, 0x46	; 70
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	7c 01       	movw	r14, r24
    19e0:	00 e0       	ldi	r16, 0x00	; 0
    19e2:	10 e0       	ldi	r17, 0x00	; 0
    19e4:	80 91 b0 01 	lds	r24, 0x01B0
    19e8:	90 91 b1 01 	lds	r25, 0x01B1
    19ec:	a0 91 b2 01 	lds	r26, 0x01B2
    19f0:	b0 91 b3 01 	lds	r27, 0x01B3
    19f4:	2f ef       	ldi	r18, 0xFF	; 255
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__mulsi3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	8e 0d       	add	r24, r14
    1a0a:	9f 1d       	adc	r25, r15
    1a0c:	a0 1f       	adc	r26, r16
    1a0e:	b1 1f       	adc	r27, r17
    1a10:	80 93 b8 01 	sts	0x01B8, r24
    1a14:	90 93 b9 01 	sts	0x01B9, r25
    1a18:	a0 93 ba 01 	sts	0x01BA, r26
    1a1c:	b0 93 bb 01 	sts	0x01BB, r27

	G_u32OverFlowCounts = 0 ;
    1a20:	10 92 b0 01 	sts	0x01B0, r1
    1a24:	10 92 b1 01 	sts	0x01B1, r1
    1a28:	10 92 b2 01 	sts	0x01B2, r1
    1a2c:	10 92 b3 01 	sts	0x01B3, r1

	L_u32Period = G_u32CountsForFirstFaling - G_u32CountsForFirstRising ;
    1a30:	20 91 b8 01 	lds	r18, 0x01B8
    1a34:	30 91 b9 01 	lds	r19, 0x01B9
    1a38:	40 91 ba 01 	lds	r20, 0x01BA
    1a3c:	50 91 bb 01 	lds	r21, 0x01BB
    1a40:	80 91 b4 01 	lds	r24, 0x01B4
    1a44:	90 91 b5 01 	lds	r25, 0x01B5
    1a48:	a0 91 b6 01 	lds	r26, 0x01B6
    1a4c:	b0 91 b7 01 	lds	r27, 0x01B7
    1a50:	79 01       	movw	r14, r18
    1a52:	8a 01       	movw	r16, r20
    1a54:	e8 1a       	sub	r14, r24
    1a56:	f9 0a       	sbc	r15, r25
    1a58:	0a 0b       	sbc	r16, r26
    1a5a:	1b 0b       	sbc	r17, r27
    1a5c:	d8 01       	movw	r26, r16
    1a5e:	c7 01       	movw	r24, r14
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	ab 83       	std	Y+3, r26	; 0x03
    1a66:	bc 83       	std	Y+4, r27	; 0x04

	G_u32FrequancyOfTimeOn = CLOK_SYSTEM / (L_u32Period * (u32)TIMER1_PRESCALER) ;
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	92 e1       	ldi	r25, 0x12	; 18
    1a6c:	aa e7       	ldi	r26, 0x7A	; 122
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	29 81       	ldd	r18, Y+1	; 0x01
    1a72:	3a 81       	ldd	r19, Y+2	; 0x02
    1a74:	4b 81       	ldd	r20, Y+3	; 0x03
    1a76:	5c 81       	ldd	r21, Y+4	; 0x04
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <__udivmodsi4>
    1a80:	da 01       	movw	r26, r20
    1a82:	c9 01       	movw	r24, r18
    1a84:	80 93 c0 01 	sts	0x01C0, r24
    1a88:	90 93 c1 01 	sts	0x01C1, r25
    1a8c:	a0 93 c2 01 	sts	0x01C2, r26
    1a90:	b0 93 c3 01 	sts	0x01C3, r27
	return G_u32FrequancyOfTimeOn ;
    1a94:	80 91 c0 01 	lds	r24, 0x01C0
    1a98:	90 91 c1 01 	lds	r25, 0x01C1
    1a9c:	a0 91 c2 01 	lds	r26, 0x01C2
    1aa0:	b0 91 c3 01 	lds	r27, 0x01C3

}
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	08 95       	ret

00001abe <MTimerCalcDutyCycle>:

f32 MTimerCalcDutyCycle (void)
{
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	2c 97       	sbiw	r28, 0x0c	; 12
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
	u32 L_u32Period = 0 ;
    1ada:	19 86       	std	Y+9, r1	; 0x09
    1adc:	1a 86       	std	Y+10, r1	; 0x0a
    1ade:	1b 86       	std	Y+11, r1	; 0x0b
    1ae0:	1c 86       	std	Y+12, r1	; 0x0c
	u32 L_u32High  = 0 ;
    1ae2:	1d 82       	std	Y+5, r1	; 0x05
    1ae4:	1e 82       	std	Y+6, r1	; 0x06
    1ae6:	1f 82       	std	Y+7, r1	; 0x07
    1ae8:	18 86       	std	Y+8, r1	; 0x08
	f32  L_f32Duty = 0.0 ;
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	ab 83       	std	Y+3, r26	; 0x03
    1af8:	bc 83       	std	Y+4, r27	; 0x04
	G_u32OverFlowCounts = 0 ;
    1afa:	10 92 b0 01 	sts	0x01B0, r1
    1afe:	10 92 b1 01 	sts	0x01B1, r1
    1b02:	10 92 b2 01 	sts	0x01B2, r1
    1b06:	10 92 b3 01 	sts	0x01B3, r1

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1b0a:	a8 e5       	ldi	r26, 0x58	; 88
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e8 e5       	ldi	r30, 0x58	; 88
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 62       	ori	r24, 0x20	; 32
    1b16:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    1b18:	ae e4       	ldi	r26, 0x4E	; 78
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	ee e4       	ldi	r30, 0x4E	; 78
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	80 64       	ori	r24, 0x40	; 64
    1b24:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1b26:	e8 e5       	ldi	r30, 0x58	; 88
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	80 72       	andi	r24, 0x20	; 32
    1b32:	90 70       	andi	r25, 0x00	; 0
    1b34:	95 95       	asr	r25
    1b36:	87 95       	ror	r24
    1b38:	95 95       	asr	r25
    1b3a:	87 95       	ror	r24
    1b3c:	95 95       	asr	r25
    1b3e:	87 95       	ror	r24
    1b40:	95 95       	asr	r25
    1b42:	87 95       	ror	r24
    1b44:	95 95       	asr	r25
    1b46:	87 95       	ror	r24
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	69 f3       	breq	.-38     	; 0x1b26 <MTimerCalcDutyCycle+0x68>
	G_u32CountsForFirstRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1b4c:	e6 e4       	ldi	r30, 0x46	; 70
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	7c 01       	movw	r14, r24
    1b56:	00 e0       	ldi	r16, 0x00	; 0
    1b58:	10 e0       	ldi	r17, 0x00	; 0
    1b5a:	80 91 b0 01 	lds	r24, 0x01B0
    1b5e:	90 91 b1 01 	lds	r25, 0x01B1
    1b62:	a0 91 b2 01 	lds	r26, 0x01B2
    1b66:	b0 91 b3 01 	lds	r27, 0x01B3
    1b6a:	2f ef       	ldi	r18, 0xFF	; 255
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__mulsi3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8e 0d       	add	r24, r14
    1b80:	9f 1d       	adc	r25, r15
    1b82:	a0 1f       	adc	r26, r16
    1b84:	b1 1f       	adc	r27, r17
    1b86:	80 93 b4 01 	sts	0x01B4, r24
    1b8a:	90 93 b5 01 	sts	0x01B5, r25
    1b8e:	a0 93 b6 01 	sts	0x01B6, r26
    1b92:	b0 93 b7 01 	sts	0x01B7, r27

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1b96:	a8 e5       	ldi	r26, 0x58	; 88
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e8 e5       	ldi	r30, 0x58	; 88
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	80 62       	ori	r24, 0x20	; 32
    1ba2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect falling edge*/
    1ba4:	ae e4       	ldi	r26, 0x4E	; 78
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	ee e4       	ldi	r30, 0x4E	; 78
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	8f 7b       	andi	r24, 0xBF	; 191
    1bb0:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1bb2:	e8 e5       	ldi	r30, 0x58	; 88
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	80 72       	andi	r24, 0x20	; 32
    1bbe:	90 70       	andi	r25, 0x00	; 0
    1bc0:	95 95       	asr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	95 95       	asr	r25
    1bc6:	87 95       	ror	r24
    1bc8:	95 95       	asr	r25
    1bca:	87 95       	ror	r24
    1bcc:	95 95       	asr	r25
    1bce:	87 95       	ror	r24
    1bd0:	95 95       	asr	r25
    1bd2:	87 95       	ror	r24
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	69 f3       	breq	.-38     	; 0x1bb2 <MTimerCalcDutyCycle+0xf4>
	G_u32CountsForFirstFaling = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1bd8:	e6 e4       	ldi	r30, 0x46	; 70
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	7c 01       	movw	r14, r24
    1be2:	00 e0       	ldi	r16, 0x00	; 0
    1be4:	10 e0       	ldi	r17, 0x00	; 0
    1be6:	80 91 b0 01 	lds	r24, 0x01B0
    1bea:	90 91 b1 01 	lds	r25, 0x01B1
    1bee:	a0 91 b2 01 	lds	r26, 0x01B2
    1bf2:	b0 91 b3 01 	lds	r27, 0x01B3
    1bf6:	2f ef       	ldi	r18, 0xFF	; 255
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__mulsi3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	8e 0d       	add	r24, r14
    1c0c:	9f 1d       	adc	r25, r15
    1c0e:	a0 1f       	adc	r26, r16
    1c10:	b1 1f       	adc	r27, r17
    1c12:	80 93 b8 01 	sts	0x01B8, r24
    1c16:	90 93 b9 01 	sts	0x01B9, r25
    1c1a:	a0 93 ba 01 	sts	0x01BA, r26
    1c1e:	b0 93 bb 01 	sts	0x01BB, r27

	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1c22:	a8 e5       	ldi	r26, 0x58	; 88
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e8 e5       	ldi	r30, 0x58	; 88
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	80 62       	ori	r24, 0x20	; 32
    1c2e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    1c30:	ae e4       	ldi	r26, 0x4E	; 78
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ee e4       	ldi	r30, 0x4E	; 78
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	80 64       	ori	r24, 0x40	; 64
    1c3c:	8c 93       	st	X, r24
	while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1c3e:	e8 e5       	ldi	r30, 0x58	; 88
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	80 72       	andi	r24, 0x20	; 32
    1c4a:	90 70       	andi	r25, 0x00	; 0
    1c4c:	95 95       	asr	r25
    1c4e:	87 95       	ror	r24
    1c50:	95 95       	asr	r25
    1c52:	87 95       	ror	r24
    1c54:	95 95       	asr	r25
    1c56:	87 95       	ror	r24
    1c58:	95 95       	asr	r25
    1c5a:	87 95       	ror	r24
    1c5c:	95 95       	asr	r25
    1c5e:	87 95       	ror	r24
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	69 f3       	breq	.-38     	; 0x1c3e <MTimerCalcDutyCycle+0x180>
	G_u32CountsForSecondRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1c64:	e6 e4       	ldi	r30, 0x46	; 70
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	91 81       	ldd	r25, Z+1	; 0x01
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	00 e0       	ldi	r16, 0x00	; 0
    1c70:	10 e0       	ldi	r17, 0x00	; 0
    1c72:	80 91 b0 01 	lds	r24, 0x01B0
    1c76:	90 91 b1 01 	lds	r25, 0x01B1
    1c7a:	a0 91 b2 01 	lds	r26, 0x01B2
    1c7e:	b0 91 b3 01 	lds	r27, 0x01B3
    1c82:	2f ef       	ldi	r18, 0xFF	; 255
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__mulsi3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8e 0d       	add	r24, r14
    1c98:	9f 1d       	adc	r25, r15
    1c9a:	a0 1f       	adc	r26, r16
    1c9c:	b1 1f       	adc	r27, r17
    1c9e:	80 93 bc 01 	sts	0x01BC, r24
    1ca2:	90 93 bd 01 	sts	0x01BD, r25
    1ca6:	a0 93 be 01 	sts	0x01BE, r26
    1caa:	b0 93 bf 01 	sts	0x01BF, r27
	SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1cae:	a8 e5       	ldi	r26, 0x58	; 88
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e8 e5       	ldi	r30, 0x58	; 88
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	80 62       	ori	r24, 0x20	; 32
    1cba:	8c 93       	st	X, r24

	G_u32OverFlowCounts = 0 ;
    1cbc:	10 92 b0 01 	sts	0x01B0, r1
    1cc0:	10 92 b1 01 	sts	0x01B1, r1
    1cc4:	10 92 b2 01 	sts	0x01B2, r1
    1cc8:	10 92 b3 01 	sts	0x01B3, r1

	L_u32High   = G_u32CountsForFirstFaling - G_u32CountsForFirstRising ;
    1ccc:	20 91 b8 01 	lds	r18, 0x01B8
    1cd0:	30 91 b9 01 	lds	r19, 0x01B9
    1cd4:	40 91 ba 01 	lds	r20, 0x01BA
    1cd8:	50 91 bb 01 	lds	r21, 0x01BB
    1cdc:	80 91 b4 01 	lds	r24, 0x01B4
    1ce0:	90 91 b5 01 	lds	r25, 0x01B5
    1ce4:	a0 91 b6 01 	lds	r26, 0x01B6
    1ce8:	b0 91 b7 01 	lds	r27, 0x01B7
    1cec:	79 01       	movw	r14, r18
    1cee:	8a 01       	movw	r16, r20
    1cf0:	e8 1a       	sub	r14, r24
    1cf2:	f9 0a       	sbc	r15, r25
    1cf4:	0a 0b       	sbc	r16, r26
    1cf6:	1b 0b       	sbc	r17, r27
    1cf8:	d8 01       	movw	r26, r16
    1cfa:	c7 01       	movw	r24, r14
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	af 83       	std	Y+7, r26	; 0x07
    1d02:	b8 87       	std	Y+8, r27	; 0x08
	L_u32Period = G_u32CountsForSecondRising - G_u32CountsForFirstRising ;
    1d04:	20 91 bc 01 	lds	r18, 0x01BC
    1d08:	30 91 bd 01 	lds	r19, 0x01BD
    1d0c:	40 91 be 01 	lds	r20, 0x01BE
    1d10:	50 91 bf 01 	lds	r21, 0x01BF
    1d14:	80 91 b4 01 	lds	r24, 0x01B4
    1d18:	90 91 b5 01 	lds	r25, 0x01B5
    1d1c:	a0 91 b6 01 	lds	r26, 0x01B6
    1d20:	b0 91 b7 01 	lds	r27, 0x01B7
    1d24:	79 01       	movw	r14, r18
    1d26:	8a 01       	movw	r16, r20
    1d28:	e8 1a       	sub	r14, r24
    1d2a:	f9 0a       	sbc	r15, r25
    1d2c:	0a 0b       	sbc	r16, r26
    1d2e:	1b 0b       	sbc	r17, r27
    1d30:	d8 01       	movw	r26, r16
    1d32:	c7 01       	movw	r24, r14
    1d34:	89 87       	std	Y+9, r24	; 0x09
    1d36:	9a 87       	std	Y+10, r25	; 0x0a
    1d38:	ab 87       	std	Y+11, r26	; 0x0b
    1d3a:	bc 87       	std	Y+12, r27	; 0x0c
	L_f32Duty = L_u32High * 100 ;
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	af 81       	ldd	r26, Y+7	; 0x07
    1d42:	b8 85       	ldd	r27, Y+8	; 0x08
    1d44:	24 e6       	ldi	r18, 0x64	; 100
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__mulsi3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	ab 83       	std	Y+3, r26	; 0x03
    1d6a:	bc 83       	std	Y+4, r27	; 0x04
	L_f32Duty = L_f32Duty / (f32)L_u32Period ;
    1d6c:	69 85       	ldd	r22, Y+9	; 0x09
    1d6e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d70:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d72:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d74:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    1d78:	9b 01       	movw	r18, r22
    1d7a:	ac 01       	movw	r20, r24
    1d7c:	69 81       	ldd	r22, Y+1	; 0x01
    1d7e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	ab 83       	std	Y+3, r26	; 0x03
    1d92:	bc 83       	std	Y+4, r27	; 0x04
	return L_f32Duty ;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	ab 81       	ldd	r26, Y+3	; 0x03
    1d9a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	2c 96       	adiw	r28, 0x0c	; 12
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	ff 90       	pop	r15
    1db6:	ef 90       	pop	r14
    1db8:	08 95       	ret

00001dba <MTimerCalcFreqofTtotal>:

u32 MTimerCalcFreqofTtotal (void)
{
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <MTimerCalcFreqofTtotal+0xe>
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <MTimerCalcFreqofTtotal+0x10>
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
		u32 L_u32Period = 0 ;
    1dce:	19 82       	std	Y+1, r1	; 0x01
    1dd0:	1a 82       	std	Y+2, r1	; 0x02
    1dd2:	1b 82       	std	Y+3, r1	; 0x03
    1dd4:	1c 82       	std	Y+4, r1	; 0x04
		G_u32OverFlowCounts = 0 ;
    1dd6:	10 92 b0 01 	sts	0x01B0, r1
    1dda:	10 92 b1 01 	sts	0x01B1, r1
    1dde:	10 92 b2 01 	sts	0x01B2, r1
    1de2:	10 92 b3 01 	sts	0x01B3, r1

		SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1de6:	a8 e5       	ldi	r26, 0x58	; 88
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e8 e5       	ldi	r30, 0x58	; 88
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	80 62       	ori	r24, 0x20	; 32
    1df2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    1df4:	ae e4       	ldi	r26, 0x4E	; 78
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	ee e4       	ldi	r30, 0x4E	; 78
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 64       	ori	r24, 0x40	; 64
    1e00:	8c 93       	st	X, r24
		while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1e02:	e8 e5       	ldi	r30, 0x58	; 88
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	80 72       	andi	r24, 0x20	; 32
    1e0e:	90 70       	andi	r25, 0x00	; 0
    1e10:	95 95       	asr	r25
    1e12:	87 95       	ror	r24
    1e14:	95 95       	asr	r25
    1e16:	87 95       	ror	r24
    1e18:	95 95       	asr	r25
    1e1a:	87 95       	ror	r24
    1e1c:	95 95       	asr	r25
    1e1e:	87 95       	ror	r24
    1e20:	95 95       	asr	r25
    1e22:	87 95       	ror	r24
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	69 f3       	breq	.-38     	; 0x1e02 <MTimerCalcFreqofTtotal+0x48>
		G_u32CountsForFirstRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1e28:	e6 e4       	ldi	r30, 0x46	; 70
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	7c 01       	movw	r14, r24
    1e32:	00 e0       	ldi	r16, 0x00	; 0
    1e34:	10 e0       	ldi	r17, 0x00	; 0
    1e36:	80 91 b0 01 	lds	r24, 0x01B0
    1e3a:	90 91 b1 01 	lds	r25, 0x01B1
    1e3e:	a0 91 b2 01 	lds	r26, 0x01B2
    1e42:	b0 91 b3 01 	lds	r27, 0x01B3
    1e46:	2f ef       	ldi	r18, 0xFF	; 255
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__mulsi3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	8e 0d       	add	r24, r14
    1e5c:	9f 1d       	adc	r25, r15
    1e5e:	a0 1f       	adc	r26, r16
    1e60:	b1 1f       	adc	r27, r17
    1e62:	80 93 b4 01 	sts	0x01B4, r24
    1e66:	90 93 b5 01 	sts	0x01B5, r25
    1e6a:	a0 93 b6 01 	sts	0x01B6, r26
    1e6e:	b0 93 b7 01 	sts	0x01B7, r27

		SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1e72:	a8 e5       	ldi	r26, 0x58	; 88
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e8 e5       	ldi	r30, 0x58	; 88
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	80 62       	ori	r24, 0x20	; 32
    1e7e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , ICES1) ;            /*set input capture edge to detect rising edge*/
    1e80:	ae e4       	ldi	r26, 0x4E	; 78
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ee e4       	ldi	r30, 0x4E	; 78
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	80 64       	ori	r24, 0x40	; 64
    1e8c:	8c 93       	st	X, r24
		while (READ_BIT (TIFR , ICF1) == 0) ;/*wait for capture happened*/
    1e8e:	e8 e5       	ldi	r30, 0x58	; 88
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	80 72       	andi	r24, 0x20	; 32
    1e9a:	90 70       	andi	r25, 0x00	; 0
    1e9c:	95 95       	asr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	95 95       	asr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	95 95       	asr	r25
    1ea6:	87 95       	ror	r24
    1ea8:	95 95       	asr	r25
    1eaa:	87 95       	ror	r24
    1eac:	95 95       	asr	r25
    1eae:	87 95       	ror	r24
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	69 f3       	breq	.-38     	; 0x1e8e <MTimerCalcFreqofTtotal+0xd4>
		G_u32CountsForSecondRising = (ICR1 + ((u32)65535*G_u32OverFlowCounts)) ;   /*take value of capture register*/
    1eb4:	e6 e4       	ldi	r30, 0x46	; 70
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	7c 01       	movw	r14, r24
    1ebe:	00 e0       	ldi	r16, 0x00	; 0
    1ec0:	10 e0       	ldi	r17, 0x00	; 0
    1ec2:	80 91 b0 01 	lds	r24, 0x01B0
    1ec6:	90 91 b1 01 	lds	r25, 0x01B1
    1eca:	a0 91 b2 01 	lds	r26, 0x01B2
    1ece:	b0 91 b3 01 	lds	r27, 0x01B3
    1ed2:	2f ef       	ldi	r18, 0xFF	; 255
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	50 e0       	ldi	r21, 0x00	; 0
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 4b 36 	call	0x6c96	; 0x6c96 <__mulsi3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8e 0d       	add	r24, r14
    1ee8:	9f 1d       	adc	r25, r15
    1eea:	a0 1f       	adc	r26, r16
    1eec:	b1 1f       	adc	r27, r17
    1eee:	80 93 bc 01 	sts	0x01BC, r24
    1ef2:	90 93 bd 01 	sts	0x01BD, r25
    1ef6:	a0 93 be 01 	sts	0x01BE, r26
    1efa:	b0 93 bf 01 	sts	0x01BF, r27
		SET_BIT (TIFR , ICF1) ;              /*clear PIF flag*/
    1efe:	a8 e5       	ldi	r26, 0x58	; 88
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e8 e5       	ldi	r30, 0x58	; 88
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	80 62       	ori	r24, 0x20	; 32
    1f0a:	8c 93       	st	X, r24

		G_u32OverFlowCounts = 0 ;
    1f0c:	10 92 b0 01 	sts	0x01B0, r1
    1f10:	10 92 b1 01 	sts	0x01B1, r1
    1f14:	10 92 b2 01 	sts	0x01B2, r1
    1f18:	10 92 b3 01 	sts	0x01B3, r1

		L_u32Period = G_u32CountsForSecondRising - G_u32CountsForFirstRising ;
    1f1c:	20 91 bc 01 	lds	r18, 0x01BC
    1f20:	30 91 bd 01 	lds	r19, 0x01BD
    1f24:	40 91 be 01 	lds	r20, 0x01BE
    1f28:	50 91 bf 01 	lds	r21, 0x01BF
    1f2c:	80 91 b4 01 	lds	r24, 0x01B4
    1f30:	90 91 b5 01 	lds	r25, 0x01B5
    1f34:	a0 91 b6 01 	lds	r26, 0x01B6
    1f38:	b0 91 b7 01 	lds	r27, 0x01B7
    1f3c:	79 01       	movw	r14, r18
    1f3e:	8a 01       	movw	r16, r20
    1f40:	e8 1a       	sub	r14, r24
    1f42:	f9 0a       	sbc	r15, r25
    1f44:	0a 0b       	sbc	r16, r26
    1f46:	1b 0b       	sbc	r17, r27
    1f48:	d8 01       	movw	r26, r16
    1f4a:	c7 01       	movw	r24, r14
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	ab 83       	std	Y+3, r26	; 0x03
    1f52:	bc 83       	std	Y+4, r27	; 0x04
		G_u32FrequancyOfTimeTotal = CLOK_SYSTEM / (L_u32Period * (u32)TIMER1_PRESCALER) ;
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	92 e1       	ldi	r25, 0x12	; 18
    1f58:	aa e7       	ldi	r26, 0x7A	; 122
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	29 81       	ldd	r18, Y+1	; 0x01
    1f5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f60:	4b 81       	ldd	r20, Y+3	; 0x03
    1f62:	5c 81       	ldd	r21, Y+4	; 0x04
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <__udivmodsi4>
    1f6c:	da 01       	movw	r26, r20
    1f6e:	c9 01       	movw	r24, r18
    1f70:	80 93 c4 01 	sts	0x01C4, r24
    1f74:	90 93 c5 01 	sts	0x01C5, r25
    1f78:	a0 93 c6 01 	sts	0x01C6, r26
    1f7c:	b0 93 c7 01 	sts	0x01C7, r27
		return G_u32FrequancyOfTimeTotal ;
    1f80:	80 91 c4 01 	lds	r24, 0x01C4
    1f84:	90 91 c5 01 	lds	r25, 0x01C5
    1f88:	a0 91 c6 01 	lds	r26, 0x01C6
    1f8c:	b0 91 c7 01 	lds	r27, 0x01C7
}
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	08 95       	ret

00001faa <__vector_11>:

/*ISR of Timer0 over flow*/
void __vector_11(void)__attribute__((signal))__attribute__((interrupt));
void __vector_11(void)
{
    1faa:	78 94       	sei
    1fac:	1f 92       	push	r1
    1fae:	0f 92       	push	r0
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	0f 92       	push	r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	2f 93       	push	r18
    1fb8:	3f 93       	push	r19
    1fba:	4f 93       	push	r20
    1fbc:	5f 93       	push	r21
    1fbe:	6f 93       	push	r22
    1fc0:	7f 93       	push	r23
    1fc2:	8f 93       	push	r24
    1fc4:	9f 93       	push	r25
    1fc6:	af 93       	push	r26
    1fc8:	bf 93       	push	r27
    1fca:	ef 93       	push	r30
    1fcc:	ff 93       	push	r31
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    1fd6:	80 91 c8 01 	lds	r24, 0x01C8
    1fda:	90 91 c9 01 	lds	r25, 0x01C9
    1fde:	a0 91 ca 01 	lds	r26, 0x01CA
    1fe2:	b0 91 cb 01 	lds	r27, 0x01CB
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	a1 1d       	adc	r26, r1
    1fea:	b1 1d       	adc	r27, r1
    1fec:	80 93 c8 01 	sts	0x01C8, r24
    1ff0:	90 93 c9 01 	sts	0x01C9, r25
    1ff4:	a0 93 ca 01 	sts	0x01CA, r26
    1ff8:	b0 93 cb 01 	sts	0x01CB, r27
	if(LS_u32Counter == G_u32Timer0IntervalCount)
    1ffc:	20 91 c8 01 	lds	r18, 0x01C8
    2000:	30 91 c9 01 	lds	r19, 0x01C9
    2004:	40 91 ca 01 	lds	r20, 0x01CA
    2008:	50 91 cb 01 	lds	r21, 0x01CB
    200c:	80 91 94 01 	lds	r24, 0x0194
    2010:	90 91 95 01 	lds	r25, 0x0195
    2014:	a0 91 96 01 	lds	r26, 0x0196
    2018:	b0 91 97 01 	lds	r27, 0x0197
    201c:	28 17       	cp	r18, r24
    201e:	39 07       	cpc	r19, r25
    2020:	4a 07       	cpc	r20, r26
    2022:	5b 07       	cpc	r21, r27
    2024:	99 f4       	brne	.+38     	; 0x204c <__vector_11+0xa2>
	{
		if(Timer0_Overflow_CallBack != NULL)
    2026:	80 91 e0 01 	lds	r24, 0x01E0
    202a:	90 91 e1 01 	lds	r25, 0x01E1
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f0       	breq	.+26     	; 0x204c <__vector_11+0xa2>
		{
			Timer0_Overflow_CallBack();
    2032:	e0 91 e0 01 	lds	r30, 0x01E0
    2036:	f0 91 e1 01 	lds	r31, 0x01E1
    203a:	09 95       	icall
			LS_u32Counter = 0;
    203c:	10 92 c8 01 	sts	0x01C8, r1
    2040:	10 92 c9 01 	sts	0x01C9, r1
    2044:	10 92 ca 01 	sts	0x01CA, r1
    2048:	10 92 cb 01 	sts	0x01CB, r1
		}
	}
}
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	ff 91       	pop	r31
    2052:	ef 91       	pop	r30
    2054:	bf 91       	pop	r27
    2056:	af 91       	pop	r26
    2058:	9f 91       	pop	r25
    205a:	8f 91       	pop	r24
    205c:	7f 91       	pop	r23
    205e:	6f 91       	pop	r22
    2060:	5f 91       	pop	r21
    2062:	4f 91       	pop	r20
    2064:	3f 91       	pop	r19
    2066:	2f 91       	pop	r18
    2068:	0f 90       	pop	r0
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	0f 90       	pop	r0
    206e:	1f 90       	pop	r1
    2070:	18 95       	reti

00002072 <__vector_5>:
/*ISR of Timer0 compare match*/

/*ISR of Timer2 over flow*/
void __vector_5(void)__attribute__((signal))__attribute__((interrupt));
void __vector_5(void)
{
    2072:	78 94       	sei
    2074:	1f 92       	push	r1
    2076:	0f 92       	push	r0
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	0f 92       	push	r0
    207c:	11 24       	eor	r1, r1
    207e:	2f 93       	push	r18
    2080:	3f 93       	push	r19
    2082:	4f 93       	push	r20
    2084:	5f 93       	push	r21
    2086:	6f 93       	push	r22
    2088:	7f 93       	push	r23
    208a:	8f 93       	push	r24
    208c:	9f 93       	push	r25
    208e:	af 93       	push	r26
    2090:	bf 93       	push	r27
    2092:	ef 93       	push	r30
    2094:	ff 93       	push	r31
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    209e:	80 91 cc 01 	lds	r24, 0x01CC
    20a2:	90 91 cd 01 	lds	r25, 0x01CD
    20a6:	a0 91 ce 01 	lds	r26, 0x01CE
    20aa:	b0 91 cf 01 	lds	r27, 0x01CF
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	a1 1d       	adc	r26, r1
    20b2:	b1 1d       	adc	r27, r1
    20b4:	80 93 cc 01 	sts	0x01CC, r24
    20b8:	90 93 cd 01 	sts	0x01CD, r25
    20bc:	a0 93 ce 01 	sts	0x01CE, r26
    20c0:	b0 93 cf 01 	sts	0x01CF, r27
	if(LS_u32Counter == G_u32Timer2IntervalCount)
    20c4:	20 91 cc 01 	lds	r18, 0x01CC
    20c8:	30 91 cd 01 	lds	r19, 0x01CD
    20cc:	40 91 ce 01 	lds	r20, 0x01CE
    20d0:	50 91 cf 01 	lds	r21, 0x01CF
    20d4:	80 91 9c 01 	lds	r24, 0x019C
    20d8:	90 91 9d 01 	lds	r25, 0x019D
    20dc:	a0 91 9e 01 	lds	r26, 0x019E
    20e0:	b0 91 9f 01 	lds	r27, 0x019F
    20e4:	28 17       	cp	r18, r24
    20e6:	39 07       	cpc	r19, r25
    20e8:	4a 07       	cpc	r20, r26
    20ea:	5b 07       	cpc	r21, r27
    20ec:	99 f4       	brne	.+38     	; 0x2114 <__vector_5+0xa2>
	{
		if(Timer2_Overflow_CallBack != NULL)
    20ee:	80 91 e4 01 	lds	r24, 0x01E4
    20f2:	90 91 e5 01 	lds	r25, 0x01E5
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f0       	breq	.+26     	; 0x2114 <__vector_5+0xa2>
		{
			Timer2_Overflow_CallBack();
    20fa:	e0 91 e4 01 	lds	r30, 0x01E4
    20fe:	f0 91 e5 01 	lds	r31, 0x01E5
    2102:	09 95       	icall
			LS_u32Counter = 0;
    2104:	10 92 cc 01 	sts	0x01CC, r1
    2108:	10 92 cd 01 	sts	0x01CD, r1
    210c:	10 92 ce 01 	sts	0x01CE, r1
    2110:	10 92 cf 01 	sts	0x01CF, r1
		}
	}
}
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	ff 91       	pop	r31
    211a:	ef 91       	pop	r30
    211c:	bf 91       	pop	r27
    211e:	af 91       	pop	r26
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	7f 91       	pop	r23
    2126:	6f 91       	pop	r22
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	0f 90       	pop	r0
    2136:	1f 90       	pop	r1
    2138:	18 95       	reti

0000213a <__vector_4>:

/*ISR of Timer2 compare match*/
void __vector_4(void)__attribute__((signal))__attribute__((interrupt));
void __vector_4(void)
{
    213a:	78 94       	sei
    213c:	1f 92       	push	r1
    213e:	0f 92       	push	r0
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	0f 92       	push	r0
    2144:	11 24       	eor	r1, r1
    2146:	2f 93       	push	r18
    2148:	3f 93       	push	r19
    214a:	4f 93       	push	r20
    214c:	5f 93       	push	r21
    214e:	6f 93       	push	r22
    2150:	7f 93       	push	r23
    2152:	8f 93       	push	r24
    2154:	9f 93       	push	r25
    2156:	af 93       	push	r26
    2158:	bf 93       	push	r27
    215a:	ef 93       	push	r30
    215c:	ff 93       	push	r31
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    2166:	80 91 d0 01 	lds	r24, 0x01D0
    216a:	90 91 d1 01 	lds	r25, 0x01D1
    216e:	a0 91 d2 01 	lds	r26, 0x01D2
    2172:	b0 91 d3 01 	lds	r27, 0x01D3
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	a1 1d       	adc	r26, r1
    217a:	b1 1d       	adc	r27, r1
    217c:	80 93 d0 01 	sts	0x01D0, r24
    2180:	90 93 d1 01 	sts	0x01D1, r25
    2184:	a0 93 d2 01 	sts	0x01D2, r26
    2188:	b0 93 d3 01 	sts	0x01D3, r27

	if(LS_u32Counter == G_u32Timer2IntervalCtcCount)
    218c:	20 91 d0 01 	lds	r18, 0x01D0
    2190:	30 91 d1 01 	lds	r19, 0x01D1
    2194:	40 91 d2 01 	lds	r20, 0x01D2
    2198:	50 91 d3 01 	lds	r21, 0x01D3
    219c:	80 91 a0 01 	lds	r24, 0x01A0
    21a0:	90 91 a1 01 	lds	r25, 0x01A1
    21a4:	a0 91 a2 01 	lds	r26, 0x01A2
    21a8:	b0 91 a3 01 	lds	r27, 0x01A3
    21ac:	28 17       	cp	r18, r24
    21ae:	39 07       	cpc	r19, r25
    21b0:	4a 07       	cpc	r20, r26
    21b2:	5b 07       	cpc	r21, r27
    21b4:	99 f4       	brne	.+38     	; 0x21dc <__vector_4+0xa2>
	{
		if(Timer2_CTC_CallBack != NULL)
    21b6:	80 91 e8 01 	lds	r24, 0x01E8
    21ba:	90 91 e9 01 	lds	r25, 0x01E9
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	69 f0       	breq	.+26     	; 0x21dc <__vector_4+0xa2>
		{
			Timer2_CTC_CallBack();
    21c2:	e0 91 e8 01 	lds	r30, 0x01E8
    21c6:	f0 91 e9 01 	lds	r31, 0x01E9
    21ca:	09 95       	icall
			LS_u32Counter = 0;
    21cc:	10 92 d0 01 	sts	0x01D0, r1
    21d0:	10 92 d1 01 	sts	0x01D1, r1
    21d4:	10 92 d2 01 	sts	0x01D2, r1
    21d8:	10 92 d3 01 	sts	0x01D3, r1
		}
	}
}
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	ff 91       	pop	r31
    21e2:	ef 91       	pop	r30
    21e4:	bf 91       	pop	r27
    21e6:	af 91       	pop	r26
    21e8:	9f 91       	pop	r25
    21ea:	8f 91       	pop	r24
    21ec:	7f 91       	pop	r23
    21ee:	6f 91       	pop	r22
    21f0:	5f 91       	pop	r21
    21f2:	4f 91       	pop	r20
    21f4:	3f 91       	pop	r19
    21f6:	2f 91       	pop	r18
    21f8:	0f 90       	pop	r0
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	0f 90       	pop	r0
    21fe:	1f 90       	pop	r1
    2200:	18 95       	reti

00002202 <__vector_9>:

/*ISR of Timer1 over flow*/
void __vector_9(void)__attribute__((signal))__attribute__((interrupt));
void __vector_9(void)
{
    2202:	78 94       	sei
    2204:	1f 92       	push	r1
    2206:	0f 92       	push	r0
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	0f 92       	push	r0
    220c:	11 24       	eor	r1, r1
    220e:	2f 93       	push	r18
    2210:	3f 93       	push	r19
    2212:	4f 93       	push	r20
    2214:	5f 93       	push	r21
    2216:	6f 93       	push	r22
    2218:	7f 93       	push	r23
    221a:	8f 93       	push	r24
    221c:	9f 93       	push	r25
    221e:	af 93       	push	r26
    2220:	bf 93       	push	r27
    2222:	ef 93       	push	r30
    2224:	ff 93       	push	r31
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;
    G_u32OverFlowCounts ++ ;
    222e:	80 91 b0 01 	lds	r24, 0x01B0
    2232:	90 91 b1 01 	lds	r25, 0x01B1
    2236:	a0 91 b2 01 	lds	r26, 0x01B2
    223a:	b0 91 b3 01 	lds	r27, 0x01B3
    223e:	01 96       	adiw	r24, 0x01	; 1
    2240:	a1 1d       	adc	r26, r1
    2242:	b1 1d       	adc	r27, r1
    2244:	80 93 b0 01 	sts	0x01B0, r24
    2248:	90 93 b1 01 	sts	0x01B1, r25
    224c:	a0 93 b2 01 	sts	0x01B2, r26
    2250:	b0 93 b3 01 	sts	0x01B3, r27
	LS_u32Counter++ ;
    2254:	80 91 d4 01 	lds	r24, 0x01D4
    2258:	90 91 d5 01 	lds	r25, 0x01D5
    225c:	a0 91 d6 01 	lds	r26, 0x01D6
    2260:	b0 91 d7 01 	lds	r27, 0x01D7
    2264:	01 96       	adiw	r24, 0x01	; 1
    2266:	a1 1d       	adc	r26, r1
    2268:	b1 1d       	adc	r27, r1
    226a:	80 93 d4 01 	sts	0x01D4, r24
    226e:	90 93 d5 01 	sts	0x01D5, r25
    2272:	a0 93 d6 01 	sts	0x01D6, r26
    2276:	b0 93 d7 01 	sts	0x01D7, r27
	DDRC = DDRC+1 ; ;
    227a:	a4 e3       	ldi	r26, 0x34	; 52
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e4 e3       	ldi	r30, 0x34	; 52
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	8f 5f       	subi	r24, 0xFF	; 255
    2286:	8c 93       	st	X, r24
	if(LS_u32Counter == G_u32Timer1IntervalCount)
    2288:	20 91 d4 01 	lds	r18, 0x01D4
    228c:	30 91 d5 01 	lds	r19, 0x01D5
    2290:	40 91 d6 01 	lds	r20, 0x01D6
    2294:	50 91 d7 01 	lds	r21, 0x01D7
    2298:	80 91 ac 01 	lds	r24, 0x01AC
    229c:	90 91 ad 01 	lds	r25, 0x01AD
    22a0:	a0 91 ae 01 	lds	r26, 0x01AE
    22a4:	b0 91 af 01 	lds	r27, 0x01AF
    22a8:	28 17       	cp	r18, r24
    22aa:	39 07       	cpc	r19, r25
    22ac:	4a 07       	cpc	r20, r26
    22ae:	5b 07       	cpc	r21, r27
    22b0:	99 f4       	brne	.+38     	; 0x22d8 <__vector_9+0xd6>
	{
		if(Timer1_Overflow_CallBack != NULL)
    22b2:	80 91 e2 01 	lds	r24, 0x01E2
    22b6:	90 91 e3 01 	lds	r25, 0x01E3
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	69 f0       	breq	.+26     	; 0x22d8 <__vector_9+0xd6>
		{
			Timer1_Overflow_CallBack();
    22be:	e0 91 e2 01 	lds	r30, 0x01E2
    22c2:	f0 91 e3 01 	lds	r31, 0x01E3
    22c6:	09 95       	icall
			LS_u32Counter = 0;
    22c8:	10 92 d4 01 	sts	0x01D4, r1
    22cc:	10 92 d5 01 	sts	0x01D5, r1
    22d0:	10 92 d6 01 	sts	0x01D6, r1
    22d4:	10 92 d7 01 	sts	0x01D7, r1
		}
	}
}
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	ff 91       	pop	r31
    22de:	ef 91       	pop	r30
    22e0:	bf 91       	pop	r27
    22e2:	af 91       	pop	r26
    22e4:	9f 91       	pop	r25
    22e6:	8f 91       	pop	r24
    22e8:	7f 91       	pop	r23
    22ea:	6f 91       	pop	r22
    22ec:	5f 91       	pop	r21
    22ee:	4f 91       	pop	r20
    22f0:	3f 91       	pop	r19
    22f2:	2f 91       	pop	r18
    22f4:	0f 90       	pop	r0
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	0f 90       	pop	r0
    22fa:	1f 90       	pop	r1
    22fc:	18 95       	reti

000022fe <__vector_7>:

/*ISR of Timer1 compare match A*/
void __vector_7(void)__attribute__((signal))__attribute__((interrupt));
void __vector_7(void)
{
    22fe:	78 94       	sei
    2300:	1f 92       	push	r1
    2302:	0f 92       	push	r0
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	0f 92       	push	r0
    2308:	11 24       	eor	r1, r1
    230a:	2f 93       	push	r18
    230c:	3f 93       	push	r19
    230e:	4f 93       	push	r20
    2310:	5f 93       	push	r21
    2312:	6f 93       	push	r22
    2314:	7f 93       	push	r23
    2316:	8f 93       	push	r24
    2318:	9f 93       	push	r25
    231a:	af 93       	push	r26
    231c:	bf 93       	push	r27
    231e:	ef 93       	push	r30
    2320:	ff 93       	push	r31
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    232a:	80 91 d8 01 	lds	r24, 0x01D8
    232e:	90 91 d9 01 	lds	r25, 0x01D9
    2332:	a0 91 da 01 	lds	r26, 0x01DA
    2336:	b0 91 db 01 	lds	r27, 0x01DB
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	a1 1d       	adc	r26, r1
    233e:	b1 1d       	adc	r27, r1
    2340:	80 93 d8 01 	sts	0x01D8, r24
    2344:	90 93 d9 01 	sts	0x01D9, r25
    2348:	a0 93 da 01 	sts	0x01DA, r26
    234c:	b0 93 db 01 	sts	0x01DB, r27

	if(LS_u32Counter == G_u32Timer1IntervalCtcACount)
    2350:	20 91 d8 01 	lds	r18, 0x01D8
    2354:	30 91 d9 01 	lds	r19, 0x01D9
    2358:	40 91 da 01 	lds	r20, 0x01DA
    235c:	50 91 db 01 	lds	r21, 0x01DB
    2360:	80 91 a4 01 	lds	r24, 0x01A4
    2364:	90 91 a5 01 	lds	r25, 0x01A5
    2368:	a0 91 a6 01 	lds	r26, 0x01A6
    236c:	b0 91 a7 01 	lds	r27, 0x01A7
    2370:	28 17       	cp	r18, r24
    2372:	39 07       	cpc	r19, r25
    2374:	4a 07       	cpc	r20, r26
    2376:	5b 07       	cpc	r21, r27
    2378:	99 f4       	brne	.+38     	; 0x23a0 <__vector_7+0xa2>
	{
		if(Timer1_CTC_A_CallBack != NULL)
    237a:	80 91 ea 01 	lds	r24, 0x01EA
    237e:	90 91 eb 01 	lds	r25, 0x01EB
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f0       	breq	.+26     	; 0x23a0 <__vector_7+0xa2>
		{
			Timer1_CTC_A_CallBack();
    2386:	e0 91 ea 01 	lds	r30, 0x01EA
    238a:	f0 91 eb 01 	lds	r31, 0x01EB
    238e:	09 95       	icall
			LS_u32Counter = 0;
    2390:	10 92 d8 01 	sts	0x01D8, r1
    2394:	10 92 d9 01 	sts	0x01D9, r1
    2398:	10 92 da 01 	sts	0x01DA, r1
    239c:	10 92 db 01 	sts	0x01DB, r1
		}
	}
}
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	ff 91       	pop	r31
    23a6:	ef 91       	pop	r30
    23a8:	bf 91       	pop	r27
    23aa:	af 91       	pop	r26
    23ac:	9f 91       	pop	r25
    23ae:	8f 91       	pop	r24
    23b0:	7f 91       	pop	r23
    23b2:	6f 91       	pop	r22
    23b4:	5f 91       	pop	r21
    23b6:	4f 91       	pop	r20
    23b8:	3f 91       	pop	r19
    23ba:	2f 91       	pop	r18
    23bc:	0f 90       	pop	r0
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	0f 90       	pop	r0
    23c2:	1f 90       	pop	r1
    23c4:	18 95       	reti

000023c6 <__vector_8>:

/*ISR of Timer1 compare match B*/
void __vector_8(void)__attribute__((signal))__attribute__((interrupt));
void __vector_8(void)
{
    23c6:	78 94       	sei
    23c8:	1f 92       	push	r1
    23ca:	0f 92       	push	r0
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	0f 92       	push	r0
    23d0:	11 24       	eor	r1, r1
    23d2:	2f 93       	push	r18
    23d4:	3f 93       	push	r19
    23d6:	4f 93       	push	r20
    23d8:	5f 93       	push	r21
    23da:	6f 93       	push	r22
    23dc:	7f 93       	push	r23
    23de:	8f 93       	push	r24
    23e0:	9f 93       	push	r25
    23e2:	af 93       	push	r26
    23e4:	bf 93       	push	r27
    23e6:	ef 93       	push	r30
    23e8:	ff 93       	push	r31
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;

	LS_u32Counter++ ;
    23f2:	80 91 dc 01 	lds	r24, 0x01DC
    23f6:	90 91 dd 01 	lds	r25, 0x01DD
    23fa:	a0 91 de 01 	lds	r26, 0x01DE
    23fe:	b0 91 df 01 	lds	r27, 0x01DF
    2402:	01 96       	adiw	r24, 0x01	; 1
    2404:	a1 1d       	adc	r26, r1
    2406:	b1 1d       	adc	r27, r1
    2408:	80 93 dc 01 	sts	0x01DC, r24
    240c:	90 93 dd 01 	sts	0x01DD, r25
    2410:	a0 93 de 01 	sts	0x01DE, r26
    2414:	b0 93 df 01 	sts	0x01DF, r27

	if(LS_u32Counter == G_u32Timer1IntervalCtcBCount)
    2418:	20 91 dc 01 	lds	r18, 0x01DC
    241c:	30 91 dd 01 	lds	r19, 0x01DD
    2420:	40 91 de 01 	lds	r20, 0x01DE
    2424:	50 91 df 01 	lds	r21, 0x01DF
    2428:	80 91 a8 01 	lds	r24, 0x01A8
    242c:	90 91 a9 01 	lds	r25, 0x01A9
    2430:	a0 91 aa 01 	lds	r26, 0x01AA
    2434:	b0 91 ab 01 	lds	r27, 0x01AB
    2438:	28 17       	cp	r18, r24
    243a:	39 07       	cpc	r19, r25
    243c:	4a 07       	cpc	r20, r26
    243e:	5b 07       	cpc	r21, r27
    2440:	99 f4       	brne	.+38     	; 0x2468 <__vector_8+0xa2>
	{
		if(Timer1_CTC_B_CallBack != NULL)
    2442:	80 91 ec 01 	lds	r24, 0x01EC
    2446:	90 91 ed 01 	lds	r25, 0x01ED
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f0       	breq	.+26     	; 0x2468 <__vector_8+0xa2>
		{
			Timer1_CTC_B_CallBack();
    244e:	e0 91 ec 01 	lds	r30, 0x01EC
    2452:	f0 91 ed 01 	lds	r31, 0x01ED
    2456:	09 95       	icall
			LS_u32Counter = 0;
    2458:	10 92 dc 01 	sts	0x01DC, r1
    245c:	10 92 dd 01 	sts	0x01DD, r1
    2460:	10 92 de 01 	sts	0x01DE, r1
    2464:	10 92 df 01 	sts	0x01DF, r1
		}
	}
}
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	ff 91       	pop	r31
    246e:	ef 91       	pop	r30
    2470:	bf 91       	pop	r27
    2472:	af 91       	pop	r26
    2474:	9f 91       	pop	r25
    2476:	8f 91       	pop	r24
    2478:	7f 91       	pop	r23
    247a:	6f 91       	pop	r22
    247c:	5f 91       	pop	r21
    247e:	4f 91       	pop	r20
    2480:	3f 91       	pop	r19
    2482:	2f 91       	pop	r18
    2484:	0f 90       	pop	r0
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	0f 90       	pop	r0
    248a:	1f 90       	pop	r1
    248c:	18 95       	reti

0000248e <MSPI_voidInit>:

#define F_CPU 8000000UL /*frequancy of mc*/
#include <util/delay.h>

void MSPI_voidInit(void)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	2e 97       	sbiw	r28, 0x0e	; 14
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
	#if    SPI_MODE == SPI_MASTER
	          /*Set SS as output pins for master*/
	          MDIO_voidSetPinDir(DIO_PORTB,DIO_PIN4,DIO_HIGH);
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	64 e0       	ldi	r22, 0x04	; 4
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
			  /*Set MOSI as output pins for master*/
	          MDIO_voidSetPinDir(DIO_PORTB,DIO_PIN5,DIO_HIGH);
    24ac:	82 e0       	ldi	r24, 0x02	; 2
    24ae:	65 e0       	ldi	r22, 0x05	; 5
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
			  /*Set SCK  as output pins for master*/
	          MDIO_voidSetPinDir(DIO_PORTB,DIO_PIN7,DIO_HIGH);
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	67 e0       	ldi	r22, 0x07	; 7
    24ba:	41 e0       	ldi	r20, 0x01	; 1
    24bc:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
			  /*Enable Master mode*/
	          SET_BIT(SPCR,MSTR);
    24c0:	ad e2       	ldi	r26, 0x2D	; 45
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	ed e2       	ldi	r30, 0x2D	; 45
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 61       	ori	r24, 0x10	; 16
    24cc:	8c 93       	st	X, r24
			  #if    SPI_CLOCK_RATE == PRESCALLER_4 /*fosc/4*/
                       	CLR_BIT(SPCR,SPR0);
                       	CLR_BIT(SPCR,SPR1);
                       	CLR_BIT(SPSR,SPI2X);
			  #elif  SPI_CLOCK_RATE == PRESCALLER_16 /*fosc/16*/
			           	SET_BIT(SPCR,SPR0);
    24ce:	ad e2       	ldi	r26, 0x2D	; 45
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	ed e2       	ldi	r30, 0x2D	; 45
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	81 60       	ori	r24, 0x01	; 1
    24da:	8c 93       	st	X, r24
                       	CLR_BIT(SPCR,SPR1);
    24dc:	ad e2       	ldi	r26, 0x2D	; 45
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	ed e2       	ldi	r30, 0x2D	; 45
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	8d 7f       	andi	r24, 0xFD	; 253
    24e8:	8c 93       	st	X, r24
                       	CLR_BIT(SPSR,SPI2X);
    24ea:	ae e2       	ldi	r26, 0x2E	; 46
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	ee e2       	ldi	r30, 0x2E	; 46
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	8e 7f       	andi	r24, 0xFE	; 254
    24f6:	8c 93       	st	X, r24
                       	SET_BIT(SPSR,SPI2X);
			  #else 
				  #error "select correct option of SPI_CLOCK_RATE"
			  #endif
			  /*Enable SPI*/
			  SET_BIT(SPCR,SPE);
    24f8:	ad e2       	ldi	r26, 0x2D	; 45
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	ed e2       	ldi	r30, 0x2D	; 45
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	80 64       	ori	r24, 0x40	; 64
    2504:	8c 93       	st	X, r24
			  /*set SS to high*/
	          MDIO_voidSetPinVal(DIO_PORTB,DIO_PIN4);
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	64 e0       	ldi	r22, 0x04	; 4
    250a:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a6 e9       	ldi	r26, 0x96	; 150
    2514:	b3 e4       	ldi	r27, 0x43	; 67
    2516:	8b 87       	std	Y+11, r24	; 0x0b
    2518:	9c 87       	std	Y+12, r25	; 0x0c
    251a:	ad 87       	std	Y+13, r26	; 0x0d
    251c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2520:	7c 85       	ldd	r23, Y+12	; 0x0c
    2522:	8d 85       	ldd	r24, Y+13	; 0x0d
    2524:	9e 85       	ldd	r25, Y+14	; 0x0e
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a ef       	ldi	r20, 0xFA	; 250
    252c:	54 e4       	ldi	r21, 0x44	; 68
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8f 83       	std	Y+7, r24	; 0x07
    2538:	98 87       	std	Y+8, r25	; 0x08
    253a:	a9 87       	std	Y+9, r26	; 0x09
    253c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253e:	6f 81       	ldd	r22, Y+7	; 0x07
    2540:	78 85       	ldd	r23, Y+8	; 0x08
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <MSPI_voidInit+0xd2>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
    255e:	3f c0       	rjmp	.+126    	; 0x25de <MSPI_voidInit+0x150>
	else if (__tmp > 65535)
    2560:	6f 81       	ldd	r22, Y+7	; 0x07
    2562:	78 85       	ldd	r23, Y+8	; 0x08
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	9a 85       	ldd	r25, Y+10	; 0x0a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <MSPI_voidInit+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	6b 85       	ldd	r22, Y+11	; 0x0b
    257a:	7c 85       	ldd	r23, Y+12	; 0x0c
    257c:	8d 85       	ldd	r24, Y+13	; 0x0d
    257e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <MSPI_voidInit+0x132>
    25a2:	88 ec       	ldi	r24, 0xC8	; 200
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	8b 83       	std	Y+3, r24	; 0x03
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <MSPI_voidInit+0x120>
    25b2:	9c 83       	std	Y+4, r25	; 0x04
    25b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	8d 81       	ldd	r24, Y+5	; 0x05
    25b8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <MSPI_voidInit+0x114>
    25c8:	14 c0       	rjmp	.+40     	; 0x25f2 <MSPI_voidInit+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9e 83       	std	Y+6, r25	; 0x06
    25dc:	8d 83       	std	Y+5, r24	; 0x05
    25de:	8d 81       	ldd	r24, Y+5	; 0x05
    25e0:	9e 81       	ldd	r25, Y+6	; 0x06
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <MSPI_voidInit+0x15c>
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 83       	std	Y+1, r24	; 0x01
			  /*Set MISO as output*/
	          MDIO_voidSetPinDir(DIO_PORTB , DIO_PIN6 , DIO_HIGH);  
	#else 
		#error "select correct option of SPI_MODE"
	#endif
}
    25f2:	2e 96       	adiw	r28, 0x0e	; 14
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <MSPI_voidMasterTransmitChar>:

void MSPI_voidMasterTransmitChar(u8 A_u8Data)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	0f 92       	push	r0
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	89 83       	std	Y+1, r24	; 0x01
	
	/*Clear SS to send data to slave*/
	MDIO_voidClrPinVal(DIO_PORTB,DIO_PIN4);
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	64 e0       	ldi	r22, 0x04	; 4
    2614:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	/*Put data on SPDR*/
	SPDR=A_u8Data;
    2618:	ef e2       	ldi	r30, 0x2F	; 47
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	80 83       	st	Z, r24
	/*Wait until data is received in SPI register*/
	while(READ_BIT(SPSR,SPIF)==0);
    2620:	ee e2       	ldi	r30, 0x2E	; 46
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	88 1f       	adc	r24, r24
    2628:	88 27       	eor	r24, r24
    262a:	88 1f       	adc	r24, r24
    262c:	88 2f       	mov	r24, r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	90 70       	andi	r25, 0x00	; 0
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	a9 f3       	breq	.-22     	; 0x2620 <MSPI_voidMasterTransmitChar+0x1c>
}
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <MSPI_voidMasterTransmitString>:

void MSPI_voidMasterTransmitString(u8* A_pu8Str)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <MSPI_voidMasterTransmitString+0x6>
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	0a c0       	rjmp	.+20     	; 0x2662 <MSPI_voidMasterTransmitString+0x24>
	while(*A_pu8Str != '\0')
	{
		MSPI_voidMasterTransmitChar(*A_pu8Str);
    264e:	e9 81       	ldd	r30, Y+1	; 0x01
    2650:	fa 81       	ldd	r31, Y+2	; 0x02
    2652:	80 81       	ld	r24, Z
    2654:	0e 94 02 13 	call	0x2604	; 0x2604 <MSPI_voidMasterTransmitChar>
		A_pu8Str++ ;
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	9a 81       	ldd	r25, Y+2	; 0x02
    265c:	01 96       	adiw	r24, 0x01	; 1
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
	while(READ_BIT(SPSR,SPIF)==0);
}

void MSPI_voidMasterTransmitString(u8* A_pu8Str)
{
	while(*A_pu8Str != '\0')
    2662:	e9 81       	ldd	r30, Y+1	; 0x01
    2664:	fa 81       	ldd	r31, Y+2	; 0x02
    2666:	80 81       	ld	r24, Z
    2668:	88 23       	and	r24, r24
    266a:	89 f7       	brne	.-30     	; 0x264e <MSPI_voidMasterTransmitString+0x10>
	{
		MSPI_voidMasterTransmitChar(*A_pu8Str);
		A_pu8Str++ ;
	}
	MSPI_voidMasterTransmitChar('\n');
    266c:	8a e0       	ldi	r24, 0x0A	; 10
    266e:	0e 94 02 13 	call	0x2604	; 0x2604 <MSPI_voidMasterTransmitChar>
}
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <MSPI_SlaveReceivechar>:

u8 MSPI_SlaveReceivechar(void)
{
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
	/*Put dummy data on SPDR*/
	/*Wait until data is received in SPI register*/
	while(READ_BIT(SPSR,SPIF)==0);
    2684:	ee e2       	ldi	r30, 0x2E	; 46
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	88 1f       	adc	r24, r24
    268c:	88 27       	eor	r24, r24
    268e:	88 1f       	adc	r24, r24
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	90 70       	andi	r25, 0x00	; 0
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	a9 f3       	breq	.-22     	; 0x2684 <MSPI_SlaveReceivechar+0x8>
	/*read the received data*/
	return SPDR ;
    269a:	ef e2       	ldi	r30, 0x2F	; 47
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
}
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <MSPI_voidReceiveString>:

void MSPI_voidReceiveString(u8 A_u8Str[])
{
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <MSPI_voidReceiveString+0xa>
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <MSPI_voidReceiveString+0xc>
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <MSPI_voidReceiveString+0xe>
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
	u32 L_u32Index = 0 ;
    26bc:	19 82       	std	Y+1, r1	; 0x01
    26be:	1a 82       	std	Y+2, r1	; 0x02
    26c0:	1b 82       	std	Y+3, r1	; 0x03
    26c2:	1c 82       	std	Y+4, r1	; 0x04
	while (1)
	{
		A_u8Str[L_u32Index]=MSPI_SlaveReceivechar();
    26c4:	29 81       	ldd	r18, Y+1	; 0x01
    26c6:	3a 81       	ldd	r19, Y+2	; 0x02
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	8c 01       	movw	r16, r24
    26ce:	02 0f       	add	r16, r18
    26d0:	13 1f       	adc	r17, r19
    26d2:	0e 94 3e 13 	call	0x267c	; 0x267c <MSPI_SlaveReceivechar>
    26d6:	f8 01       	movw	r30, r16
    26d8:	80 83       	st	Z, r24
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
    26da:	29 81       	ldd	r18, Y+1	; 0x01
    26dc:	3a 81       	ldd	r19, Y+2	; 0x02
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	fc 01       	movw	r30, r24
    26e4:	e2 0f       	add	r30, r18
    26e6:	f3 1f       	adc	r31, r19
    26e8:	80 81       	ld	r24, Z
    26ea:	8a 30       	cpi	r24, 0x0A	; 10
    26ec:	51 f0       	breq	.+20     	; 0x2702 <MSPI_voidReceiveString+0x5c>
    26ee:	29 81       	ldd	r18, Y+1	; 0x01
    26f0:	3a 81       	ldd	r19, Y+2	; 0x02
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	fc 01       	movw	r30, r24
    26f8:	e2 0f       	add	r30, r18
    26fa:	f3 1f       	adc	r31, r19
    26fc:	80 81       	ld	r24, Z
    26fe:	8d 30       	cpi	r24, 0x0D	; 13
    2700:	99 f4       	brne	.+38     	; 0x2728 <MSPI_voidReceiveString+0x82>
		{
			A_u8Str[L_u32Index]='\0';
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	2d 81       	ldd	r18, Y+5	; 0x05
    2708:	3e 81       	ldd	r19, Y+6	; 0x06
    270a:	f9 01       	movw	r30, r18
    270c:	e8 0f       	add	r30, r24
    270e:	f9 1f       	adc	r31, r25
    2710:	10 82       	st	Z, r1
			break;
		}
		L_u32Index ++ ;
	}
}
    2712:	26 96       	adiw	r28, 0x06	; 6
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	08 95       	ret
		if(A_u8Str[L_u32Index] == '\n' || A_u8Str[L_u32Index]=='\r' )
		{
			A_u8Str[L_u32Index]='\0';
			break;
		}
		L_u32Index ++ ;
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	ab 81       	ldd	r26, Y+3	; 0x03
    272e:	bc 81       	ldd	r27, Y+4	; 0x04
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	a1 1d       	adc	r26, r1
    2734:	b1 1d       	adc	r27, r1
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	9a 83       	std	Y+2, r25	; 0x02
    273a:	ab 83       	std	Y+3, r26	; 0x03
    273c:	bc 83       	std	Y+4, r27	; 0x04
    273e:	c2 cf       	rjmp	.-124    	; 0x26c4 <MSPI_voidReceiveString+0x1e>

00002740 <MTWI_voidMasterInt>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include <math.h>

void MTWI_voidMasterInt (u32 A_u32Scl)
{
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <MTWI_voidMasterInt+0xa>
    274a:	00 d0       	rcall	.+0      	; 0x274c <MTWI_voidMasterInt+0xc>
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	69 83       	std	Y+1, r22	; 0x01
    2752:	7a 83       	std	Y+2, r23	; 0x02
    2754:	8b 83       	std	Y+3, r24	; 0x03
    2756:	9c 83       	std	Y+4, r25	; 0x04
	#if   PRESCALAR == 1
	      TWSR = 0 ;  /*TWPS0 = 0 , TWPS1 = 0*/
          #define POWER_VAL  0
	#elif PRESCALAR == 4
	      TWSR = 1 ;  /*TWPS0 = 0 , TWPS1 = 1*/
    2758:	e1 e2       	ldi	r30, 0x21	; 33
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	80 83       	st	Z, r24
	      TWSR = 3 ;  /*TWPS0 = 1 , TWPS1 = 1*/
          #define POWER_VAL  3
	#else
		#error "select correct options of PRESCALAR"
	#endif
	TWBR= (u8) (((F_CPU/A_u32Scl)-16) / (2*pow ((f64)4.0,POWER_VAL)));
    2760:	00 e2       	ldi	r16, 0x20	; 32
    2762:	10 e0       	ldi	r17, 0x00	; 0
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	92 e1       	ldi	r25, 0x12	; 18
    2768:	aa e7       	ldi	r26, 0x7A	; 122
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	29 81       	ldd	r18, Y+1	; 0x01
    276e:	3a 81       	ldd	r19, Y+2	; 0x02
    2770:	4b 81       	ldd	r20, Y+3	; 0x03
    2772:	5c 81       	ldd	r21, Y+4	; 0x04
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <__udivmodsi4>
    277c:	da 01       	movw	r26, r20
    277e:	c9 01       	movw	r24, r18
    2780:	40 97       	sbiw	r24, 0x10	; 16
    2782:	a1 09       	sbc	r26, r1
    2784:	b1 09       	sbc	r27, r1
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	51 e4       	ldi	r21, 0x41	; 65
    279e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	f8 01       	movw	r30, r16
    27b4:	80 83       	st	Z, r24
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	08 95       	ret

000027c8 <MTWI_voidMasterSendStartCondition>:

void MTWI_voidMasterSendStartCondition (void)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	2e 97       	sbiw	r28, 0x0e	; 14
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a6 e9       	ldi	r26, 0x96	; 150
    27e2:	b3 e4       	ldi	r27, 0x43	; 67
    27e4:	8b 87       	std	Y+11, r24	; 0x0b
    27e6:	9c 87       	std	Y+12, r25	; 0x0c
    27e8:	ad 87       	std	Y+13, r26	; 0x0d
    27ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	4a ef       	ldi	r20, 0xFA	; 250
    27fa:	54 e4       	ldi	r21, 0x44	; 68
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	8f 83       	std	Y+7, r24	; 0x07
    2806:	98 87       	std	Y+8, r25	; 0x08
    2808:	a9 87       	std	Y+9, r26	; 0x09
    280a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    280c:	6f 81       	ldd	r22, Y+7	; 0x07
    280e:	78 85       	ldd	r23, Y+8	; 0x08
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e8       	ldi	r20, 0x80	; 128
    281a:	5f e3       	ldi	r21, 0x3F	; 63
    281c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2820:	88 23       	and	r24, r24
    2822:	2c f4       	brge	.+10     	; 0x282e <MTWI_voidMasterSendStartCondition+0x66>
		__ticks = 1;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	8d 83       	std	Y+5, r24	; 0x05
    282c:	3f c0       	rjmp	.+126    	; 0x28ac <MTWI_voidMasterSendStartCondition+0xe4>
	else if (__tmp > 65535)
    282e:	6f 81       	ldd	r22, Y+7	; 0x07
    2830:	78 85       	ldd	r23, Y+8	; 0x08
    2832:	89 85       	ldd	r24, Y+9	; 0x09
    2834:	9a 85       	ldd	r25, Y+10	; 0x0a
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	3f ef       	ldi	r19, 0xFF	; 255
    283a:	4f e7       	ldi	r20, 0x7F	; 127
    283c:	57 e4       	ldi	r21, 0x47	; 71
    283e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2842:	18 16       	cp	r1, r24
    2844:	4c f5       	brge	.+82     	; 0x2898 <MTWI_voidMasterSendStartCondition+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2846:	6b 85       	ldd	r22, Y+11	; 0x0b
    2848:	7c 85       	ldd	r23, Y+12	; 0x0c
    284a:	8d 85       	ldd	r24, Y+13	; 0x0d
    284c:	9e 85       	ldd	r25, Y+14	; 0x0e
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e2       	ldi	r20, 0x20	; 32
    2854:	51 e4       	ldi	r21, 0x41	; 65
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
    286e:	0f c0       	rjmp	.+30     	; 0x288e <MTWI_voidMasterSendStartCondition+0xc6>
    2870:	88 ec       	ldi	r24, 0xC8	; 200
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9c 83       	std	Y+4, r25	; 0x04
    2876:	8b 83       	std	Y+3, r24	; 0x03
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <MTWI_voidMasterSendStartCondition+0xb4>
    2880:	9c 83       	std	Y+4, r25	; 0x04
    2882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	69 f7       	brne	.-38     	; 0x2870 <MTWI_voidMasterSendStartCondition+0xa8>
    2896:	14 c0       	rjmp	.+40     	; 0x28c0 <MTWI_voidMasterSendStartCondition+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2898:	6f 81       	ldd	r22, Y+7	; 0x07
    289a:	78 85       	ldd	r23, Y+8	; 0x08
    289c:	89 85       	ldd	r24, Y+9	; 0x09
    289e:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9e 83       	std	Y+6, r25	; 0x06
    28aa:	8d 83       	std	Y+5, r24	; 0x05
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <MTWI_voidMasterSendStartCondition+0xf0>
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
	/*wait to finish initializing and ending last operation*/
	_delay_ms (300) ;
	/*set enable bit*/
	/*set enable start condition*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    28c0:	e6 e5       	ldi	r30, 0x56	; 86
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	84 ea       	ldi	r24, 0xA4	; 164
    28c6:	80 83       	st	Z, r24
	/*wait to finish */
	while(READ_BIT(TWCR,TWINT)==0);
    28c8:	e6 e5       	ldi	r30, 0x56	; 86
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	88 1f       	adc	r24, r24
    28d0:	88 27       	eor	r24, r24
    28d2:	88 1f       	adc	r24, r24
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	90 70       	andi	r25, 0x00	; 0
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	a9 f3       	breq	.-22     	; 0x28c8 <MTWI_voidMasterSendStartCondition+0x100>
	/*start condition has been transmitted */
	while ((TWSR & 0XF8) != START_CONDITION_HAS_BEEN_TRANSMITTED);
    28de:	e1 e2       	ldi	r30, 0x21	; 33
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	88 7f       	andi	r24, 0xF8	; 248
    28ea:	90 70       	andi	r25, 0x00	; 0
    28ec:	88 30       	cpi	r24, 0x08	; 8
    28ee:	91 05       	cpc	r25, r1
    28f0:	b1 f7       	brne	.-20     	; 0x28de <MTWI_voidMasterSendStartCondition+0x116>
}
    28f2:	2e 96       	adiw	r28, 0x0e	; 14
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <MTWI_voidMasterSendRepetedStartCondition>:

void MTWI_voidMasterSendRepetedStartCondition (void)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	2e 97       	sbiw	r28, 0x0e	; 14
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a6 e9       	ldi	r26, 0x96	; 150
    291e:	b3 e4       	ldi	r27, 0x43	; 67
    2920:	8b 87       	std	Y+11, r24	; 0x0b
    2922:	9c 87       	std	Y+12, r25	; 0x0c
    2924:	ad 87       	std	Y+13, r26	; 0x0d
    2926:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	6b 85       	ldd	r22, Y+11	; 0x0b
    292a:	7c 85       	ldd	r23, Y+12	; 0x0c
    292c:	8d 85       	ldd	r24, Y+13	; 0x0d
    292e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	4a ef       	ldi	r20, 0xFA	; 250
    2936:	54 e4       	ldi	r21, 0x44	; 68
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	8f 83       	std	Y+7, r24	; 0x07
    2942:	98 87       	std	Y+8, r25	; 0x08
    2944:	a9 87       	std	Y+9, r26	; 0x09
    2946:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2948:	6f 81       	ldd	r22, Y+7	; 0x07
    294a:	78 85       	ldd	r23, Y+8	; 0x08
    294c:	89 85       	ldd	r24, Y+9	; 0x09
    294e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e8       	ldi	r20, 0x80	; 128
    2956:	5f e3       	ldi	r21, 0x3F	; 63
    2958:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    295c:	88 23       	and	r24, r24
    295e:	2c f4       	brge	.+10     	; 0x296a <MTWI_voidMasterSendRepetedStartCondition+0x66>
		__ticks = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
    2968:	3f c0       	rjmp	.+126    	; 0x29e8 <MTWI_voidMasterSendRepetedStartCondition+0xe4>
	else if (__tmp > 65535)
    296a:	6f 81       	ldd	r22, Y+7	; 0x07
    296c:	78 85       	ldd	r23, Y+8	; 0x08
    296e:	89 85       	ldd	r24, Y+9	; 0x09
    2970:	9a 85       	ldd	r25, Y+10	; 0x0a
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	3f ef       	ldi	r19, 0xFF	; 255
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	57 e4       	ldi	r21, 0x47	; 71
    297a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	4c f5       	brge	.+82     	; 0x29d4 <MTWI_voidMasterSendRepetedStartCondition+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2982:	6b 85       	ldd	r22, Y+11	; 0x0b
    2984:	7c 85       	ldd	r23, Y+12	; 0x0c
    2986:	8d 85       	ldd	r24, Y+13	; 0x0d
    2988:	9e 85       	ldd	r25, Y+14	; 0x0e
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e2       	ldi	r20, 0x20	; 32
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <MTWI_voidMasterSendRepetedStartCondition+0xc6>
    29ac:	88 ec       	ldi	r24, 0xC8	; 200
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9c 83       	std	Y+4, r25	; 0x04
    29b2:	8b 83       	std	Y+3, r24	; 0x03
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	9c 81       	ldd	r25, Y+4	; 0x04
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <MTWI_voidMasterSendRepetedStartCondition+0xb4>
    29bc:	9c 83       	std	Y+4, r25	; 0x04
    29be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c0:	8d 81       	ldd	r24, Y+5	; 0x05
    29c2:	9e 81       	ldd	r25, Y+6	; 0x06
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	9e 83       	std	Y+6, r25	; 0x06
    29c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	9e 81       	ldd	r25, Y+6	; 0x06
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	69 f7       	brne	.-38     	; 0x29ac <MTWI_voidMasterSendRepetedStartCondition+0xa8>
    29d2:	14 c0       	rjmp	.+40     	; 0x29fc <MTWI_voidMasterSendRepetedStartCondition+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d4:	6f 81       	ldd	r22, Y+7	; 0x07
    29d6:	78 85       	ldd	r23, Y+8	; 0x08
    29d8:	89 85       	ldd	r24, Y+9	; 0x09
    29da:	9a 85       	ldd	r25, Y+10	; 0x0a
    29dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
    29e8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ea:	9e 81       	ldd	r25, Y+6	; 0x06
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	9a 81       	ldd	r25, Y+2	; 0x02
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <MTWI_voidMasterSendRepetedStartCondition+0xf0>
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
	/*wait to finish initializing and ending last operation*/
	_delay_ms (300) ;
	/*set enable bit*/
	/*set enable start condition*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    29fc:	e6 e5       	ldi	r30, 0x56	; 86
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	84 ea       	ldi	r24, 0xA4	; 164
    2a02:	80 83       	st	Z, r24
	/*wait to finish */
	while(READ_BIT(TWCR,TWINT)==0);
    2a04:	e6 e5       	ldi	r30, 0x56	; 86
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	88 1f       	adc	r24, r24
    2a0c:	88 27       	eor	r24, r24
    2a0e:	88 1f       	adc	r24, r24
    2a10:	88 2f       	mov	r24, r24
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	90 70       	andi	r25, 0x00	; 0
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	a9 f3       	breq	.-22     	; 0x2a04 <MTWI_voidMasterSendRepetedStartCondition+0x100>
	/*start condition has been transmitted */
	while ((TWSR & 0XF8) != REPETED_START_CONDITION_HAS_BEEN_TRANSMITTED);
    2a1a:	e1 e2       	ldi	r30, 0x21	; 33
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	88 2f       	mov	r24, r24
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	88 7f       	andi	r24, 0xF8	; 248
    2a26:	90 70       	andi	r25, 0x00	; 0
    2a28:	80 31       	cpi	r24, 0x10	; 16
    2a2a:	91 05       	cpc	r25, r1
    2a2c:	b1 f7       	brne	.-20     	; 0x2a1a <MTWI_voidMasterSendRepetedStartCondition+0x116>
}
    2a2e:	2e 96       	adiw	r28, 0x0e	; 14
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <MTWI_voidMasterSendAddress>:

void MTWI_voidMasterSendAddress (u8 A_u8Address)
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	0f 92       	push	r0
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	89 83       	std	Y+1, r24	; 0x01
	/*store address in data register*/
	TWDR=A_u8Address;
    2a4c:	e3 e2       	ldi	r30, 0x23	; 35
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	80 83       	st	Z, r24
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    2a54:	e6 e5       	ldi	r30, 0x56	; 86
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	84 e8       	ldi	r24, 0x84	; 132
    2a5a:	80 83       	st	Z, r24
	/* wait to finish */
	while(READ_BIT(TWCR,TWINT)==0);
    2a5c:	e6 e5       	ldi	r30, 0x56	; 86
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	88 1f       	adc	r24, r24
    2a64:	88 27       	eor	r24, r24
    2a66:	88 1f       	adc	r24, r24
    2a68:	88 2f       	mov	r24, r24
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	90 70       	andi	r25, 0x00	; 0
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	a9 f3       	breq	.-22     	; 0x2a5c <MTWI_voidMasterSendAddress+0x1c>
	/* SLA+write has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != SLAVE_ADDRESS_HAS_BEEN_TRANSMITTED);
    2a72:	e1 e2       	ldi	r30, 0x21	; 33
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	88 7f       	andi	r24, 0xF8	; 248
    2a7e:	90 70       	andi	r25, 0x00	; 0
    2a80:	88 31       	cpi	r24, 0x18	; 24
    2a82:	91 05       	cpc	r25, r1
    2a84:	b1 f7       	brne	.-20     	; 0x2a72 <MTWI_voidMasterSendAddress+0x32>
}
    2a86:	0f 90       	pop	r0
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <MTWI_voidMasterSendAddressToRead>:

void MTWI_voidMasterSendAddressToRead (u8 A_u8Address)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	0f 92       	push	r0
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	89 83       	std	Y+1, r24	; 0x01
	/*store address in data register*/
	TWDR=A_u8Address;
    2a9a:	e3 e2       	ldi	r30, 0x23	; 35
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	80 83       	st	Z, r24
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    2aa2:	e6 e5       	ldi	r30, 0x56	; 86
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	84 e8       	ldi	r24, 0x84	; 132
    2aa8:	80 83       	st	Z, r24
	/* wait to finish */
	while(READ_BIT(TWCR,TWINT)==0);
    2aaa:	e6 e5       	ldi	r30, 0x56	; 86
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	88 27       	eor	r24, r24
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	90 70       	andi	r25, 0x00	; 0
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	a9 f3       	breq	.-22     	; 0x2aaa <MTWI_voidMasterSendAddressToRead+0x1c>
	/* SLA+write has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != SLAVE_ADDRESS_AND_READ_HAS_BEEN_TRANSMITTED);
    2ac0:	e1 e2       	ldi	r30, 0x21	; 33
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	88 2f       	mov	r24, r24
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	88 7f       	andi	r24, 0xF8	; 248
    2acc:	90 70       	andi	r25, 0x00	; 0
    2ace:	80 34       	cpi	r24, 0x40	; 64
    2ad0:	91 05       	cpc	r25, r1
    2ad2:	b1 f7       	brne	.-20     	; 0x2ac0 <MTWI_voidMasterSendAddressToRead+0x32>
}
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <MTWI_voidMasterSendData>:
void MTWI_voidMasterSendData (u8 A_u8Data)
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	0f 92       	push	r0
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	89 83       	std	Y+1, r24	; 0x01
	/*store data in data register*/
	TWDR=A_u8Data;
    2ae8:	e3 e2       	ldi	r30, 0x23	; 35
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	80 83       	st	Z, r24
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    2af0:	e6 e5       	ldi	r30, 0x56	; 86
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	84 e8       	ldi	r24, 0x84	; 132
    2af6:	80 83       	st	Z, r24
	/* wait to finish */
	while(READ_BIT(TWCR,TWINT)==0);
    2af8:	e6 e5       	ldi	r30, 0x56	; 86
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	88 1f       	adc	r24, r24
    2b00:	88 27       	eor	r24, r24
    2b02:	88 1f       	adc	r24, r24
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	90 70       	andi	r25, 0x00	; 0
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	a9 f3       	breq	.-22     	; 0x2af8 <MTWI_voidMasterSendData+0x1c>
	/* data has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != DATA_AND_ACK_HAS_BEEN_TRANSMITTED);
    2b0e:	e1 e2       	ldi	r30, 0x21	; 33
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	88 7f       	andi	r24, 0xF8	; 248
    2b1a:	90 70       	andi	r25, 0x00	; 0
    2b1c:	88 32       	cpi	r24, 0x28	; 40
    2b1e:	91 05       	cpc	r25, r1
    2b20:	b1 f7       	brne	.-20     	; 0x2b0e <MTWI_voidMasterSendData+0x32>
}
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <MTWI_voidMasterReadData>:

u8 MTWI_voidMasterReadData (void)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    2b32:	e6 e5       	ldi	r30, 0x56	; 86
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	84 e8       	ldi	r24, 0x84	; 132
    2b38:	80 83       	st	Z, r24
	/* wait to finish */
	while(READ_BIT(TWCR,TWINT)==0);
    2b3a:	e6 e5       	ldi	r30, 0x56	; 86
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	88 1f       	adc	r24, r24
    2b42:	88 27       	eor	r24, r24
    2b44:	88 1f       	adc	r24, r24
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	90 70       	andi	r25, 0x00	; 0
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	a9 f3       	breq	.-22     	; 0x2b3a <MTWI_voidMasterReadData+0x10>
	/* data has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != DATA_READ_AND_ACK_HAS_BEEN_TRANSMITTED);
    2b50:	e1 e2       	ldi	r30, 0x21	; 33
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	88 7f       	andi	r24, 0xF8	; 248
    2b5c:	90 70       	andi	r25, 0x00	; 0
    2b5e:	80 35       	cpi	r24, 0x50	; 80
    2b60:	91 05       	cpc	r25, r1
    2b62:	b1 f7       	brne	.-20     	; 0x2b50 <MTWI_voidMasterReadData+0x26>
	return TWDR ;
    2b64:	e3 e2       	ldi	r30, 0x23	; 35
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
}
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <MTWI_voidMasterReadDataWithNACK>:

u8 MTWI_voidMasterReadDataWithNACK (void)
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    2b78:	e6 e5       	ldi	r30, 0x56	; 86
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	84 e8       	ldi	r24, 0x84	; 132
    2b7e:	80 83       	st	Z, r24
	/* wait to finish */
	while(READ_BIT(TWCR,TWINT)==0);
    2b80:	e6 e5       	ldi	r30, 0x56	; 86
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	88 1f       	adc	r24, r24
    2b88:	88 27       	eor	r24, r24
    2b8a:	88 1f       	adc	r24, r24
    2b8c:	88 2f       	mov	r24, r24
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	90 70       	andi	r25, 0x00	; 0
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	a9 f3       	breq	.-22     	; 0x2b80 <MTWI_voidMasterReadDataWithNACK+0x10>
	/* data has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != DATA_READ_AND_NACK_HAS_BEEN_TRANSMITTED);
    2b96:	e1 e2       	ldi	r30, 0x21	; 33
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	88 2f       	mov	r24, r24
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	88 7f       	andi	r24, 0xF8	; 248
    2ba2:	90 70       	andi	r25, 0x00	; 0
    2ba4:	88 35       	cpi	r24, 0x58	; 88
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	b1 f7       	brne	.-20     	; 0x2b96 <MTWI_voidMasterReadDataWithNACK+0x26>
	return TWDR ;
    2baa:	e3 e2       	ldi	r30, 0x23	; 35
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
}
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	08 95       	ret

00002bb6 <MTWI_voidMasterSendStopCondition>:

void MTWI_voidMasterSendStopCondition (void)
{
    2bb6:	df 93       	push	r29
    2bb8:	cf 93       	push	r28
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set enable stop condition*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2bbe:	e6 e5       	ldi	r30, 0x56	; 86
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	84 e9       	ldi	r24, 0x94	; 148
    2bc4:	80 83       	st	Z, r24
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <MTWI_voidSlaveSetAddress>:

void MTWI_voidSlaveSetAddress (u8 A_u8Address)
{
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	0f 92       	push	r0
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	89 83       	std	Y+1, r24	; 0x01
	/*store address in address register*/
	TWAR=A_u8Address;
    2bd8:	e2 e2       	ldi	r30, 0x22	; 34
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	80 83       	st	Z, r24
}
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <MTWI_voidSlaveReadData>:

u8 MTWI_voidSlaveReadData (void)
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set enable Ack*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    2bf0:	e6 e5       	ldi	r30, 0x56	; 86
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	84 ec       	ldi	r24, 0xC4	; 196
    2bf6:	80 83       	st	Z, r24
	/*wait to finish*/
	while(READ_BIT(TWCR,TWINT)==0);
    2bf8:	e6 e5       	ldi	r30, 0x56	; 86
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	88 1f       	adc	r24, r24
    2c00:	88 27       	eor	r24, r24
    2c02:	88 1f       	adc	r24, r24
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	90 70       	andi	r25, 0x00	; 0
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	a9 f3       	breq	.-22     	; 0x2bf8 <MTWI_voidSlaveReadData+0x10>
	/* own SLA+W has been received and ACK has been returned */
	while ((TWSR & 0XF8) != SLAVE_ADDRESS_HAS_BEEN_RESEVED);
    2c0e:	e1 e2       	ldi	r30, 0x21	; 33
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	88 7f       	andi	r24, 0xF8	; 248
    2c1a:	90 70       	andi	r25, 0x00	; 0
    2c1c:	80 36       	cpi	r24, 0x60	; 96
    2c1e:	91 05       	cpc	r25, r1
    2c20:	b1 f7       	brne	.-20     	; 0x2c0e <MTWI_voidSlaveReadData+0x26>
    /*set enable bit*/
	/*set enable Ack*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    2c22:	e6 e5       	ldi	r30, 0x56	; 86
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	84 ec       	ldi	r24, 0xC4	; 196
    2c28:	80 83       	st	Z, r24
	/*wait to finish*/
	while(READ_BIT(TWCR,TWINT)==0);
    2c2a:	e6 e5       	ldi	r30, 0x56	; 86
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	88 1f       	adc	r24, r24
    2c32:	88 27       	eor	r24, r24
    2c34:	88 1f       	adc	r24, r24
    2c36:	88 2f       	mov	r24, r24
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	90 70       	andi	r25, 0x00	; 0
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	a9 f3       	breq	.-22     	; 0x2c2a <MTWI_voidSlaveReadData+0x42>
	/*previously addressed with own SLA+W : data has been received : ACK has been returned*/
	while ((TWSR & 0XF8) != DATA_AND_ACK_HAS_BEEN_RESEVED);
    2c40:	e1 e2       	ldi	r30, 0x21	; 33
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	88 2f       	mov	r24, r24
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	88 7f       	andi	r24, 0xF8	; 248
    2c4c:	90 70       	andi	r25, 0x00	; 0
    2c4e:	80 38       	cpi	r24, 0x80	; 128
    2c50:	91 05       	cpc	r25, r1
    2c52:	b1 f7       	brne	.-20     	; 0x2c40 <MTWI_voidSlaveReadData+0x58>
	/*return data*/
	return TWDR ;
    2c54:	e3 e2       	ldi	r30, 0x23	; 35
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
}
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <MEXTI_voidInit>:
static void (*INT0_CallBack)(void) ; /**pointer to function to set call back of INT0_ISR*/
static void (*INT1_CallBack)(void) ; /**pointer to function to set call back of INT1_ISR*/
static void (*INT2_CallBack)(void) ; /**pointer to function to set call back of INT2_ISR*/

void MEXTI_voidInit (void) 
{
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
	/** Enable global interrupt flag */
	    SET_BIT(SREG, I_BIT);
    2c68:	af e5       	ldi	r26, 0x5F	; 95
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	ef e5       	ldi	r30, 0x5F	; 95
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	80 68       	ori	r24, 0x80	; 128
    2c74:	8c 93       	st	X, r24
	#elif EXTI2 == DISABLE
	    /** disable PIE of INT2 */
	    CLR_BIT(GICR, INT2);
	
	#endif
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <MINT0_voidSetCallback>:

void MINT0_voidSetCallback( void (*A_fptr)(void)  )
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <MINT0_voidSetCallback+0x6>
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	89 83       	std	Y+1, r24	; 0x01
	INT0_CallBack = A_fptr;
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8e:	90 93 ef 01 	sts	0x01EF, r25
    2c92:	80 93 ee 01 	sts	0x01EE, r24
}
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <MINT1_voidSetCallback>:

void MINT1_voidSetCallback( void (*A_fptr)(void)  )
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <MINT1_voidSetCallback+0x6>
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	9a 83       	std	Y+2, r25	; 0x02
    2cac:	89 83       	std	Y+1, r24	; 0x01
	INT1_CallBack = A_fptr;
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb2:	90 93 f1 01 	sts	0x01F1, r25
    2cb6:	80 93 f0 01 	sts	0x01F0, r24
}
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <MINT2_voidSetCallback>:

void MINT2_voidSetCallback( void (*A_fptr)(void)  )
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <MINT2_voidSetCallback+0x6>
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	9a 83       	std	Y+2, r25	; 0x02
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	INT2_CallBack = A_fptr;
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	90 93 f3 01 	sts	0x01F3, r25
    2cda:	80 93 f2 01 	sts	0x01F2, r24
}
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <__vector_1>:

/**ISR of INT0*/
void __vector_1(void)__attribute__((signal))__attribute__((interrupt));
void __vector_1(void)
{
    2ce8:	78 94       	sei
    2cea:	1f 92       	push	r1
    2cec:	0f 92       	push	r0
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	0f 92       	push	r0
    2cf2:	11 24       	eor	r1, r1
    2cf4:	2f 93       	push	r18
    2cf6:	3f 93       	push	r19
    2cf8:	4f 93       	push	r20
    2cfa:	5f 93       	push	r21
    2cfc:	6f 93       	push	r22
    2cfe:	7f 93       	push	r23
    2d00:	8f 93       	push	r24
    2d02:	9f 93       	push	r25
    2d04:	af 93       	push	r26
    2d06:	bf 93       	push	r27
    2d08:	ef 93       	push	r30
    2d0a:	ff 93       	push	r31
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
	if (INT0_CallBack != 0)
    2d14:	80 91 ee 01 	lds	r24, 0x01EE
    2d18:	90 91 ef 01 	lds	r25, 0x01EF
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	29 f0       	breq	.+10     	; 0x2d2a <__vector_1+0x42>
	{
		INT0_CallBack () ;
    2d20:	e0 91 ee 01 	lds	r30, 0x01EE
    2d24:	f0 91 ef 01 	lds	r31, 0x01EF
    2d28:	09 95       	icall
	}
}
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	ff 91       	pop	r31
    2d30:	ef 91       	pop	r30
    2d32:	bf 91       	pop	r27
    2d34:	af 91       	pop	r26
    2d36:	9f 91       	pop	r25
    2d38:	8f 91       	pop	r24
    2d3a:	7f 91       	pop	r23
    2d3c:	6f 91       	pop	r22
    2d3e:	5f 91       	pop	r21
    2d40:	4f 91       	pop	r20
    2d42:	3f 91       	pop	r19
    2d44:	2f 91       	pop	r18
    2d46:	0f 90       	pop	r0
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	0f 90       	pop	r0
    2d4c:	1f 90       	pop	r1
    2d4e:	18 95       	reti

00002d50 <__vector_2>:

/**ISR of INT1*/
void __vector_2(void)__attribute__((signal))__attribute__((interrupt));
void __vector_2(void)
{
    2d50:	78 94       	sei
    2d52:	1f 92       	push	r1
    2d54:	0f 92       	push	r0
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	0f 92       	push	r0
    2d5a:	11 24       	eor	r1, r1
    2d5c:	2f 93       	push	r18
    2d5e:	3f 93       	push	r19
    2d60:	4f 93       	push	r20
    2d62:	5f 93       	push	r21
    2d64:	6f 93       	push	r22
    2d66:	7f 93       	push	r23
    2d68:	8f 93       	push	r24
    2d6a:	9f 93       	push	r25
    2d6c:	af 93       	push	r26
    2d6e:	bf 93       	push	r27
    2d70:	ef 93       	push	r30
    2d72:	ff 93       	push	r31
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
	if (INT1_CallBack != 0)
    2d7c:	80 91 f0 01 	lds	r24, 0x01F0
    2d80:	90 91 f1 01 	lds	r25, 0x01F1
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	29 f0       	breq	.+10     	; 0x2d92 <__vector_2+0x42>
	{
		INT1_CallBack () ;
    2d88:	e0 91 f0 01 	lds	r30, 0x01F0
    2d8c:	f0 91 f1 01 	lds	r31, 0x01F1
    2d90:	09 95       	icall
	}
}
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	ff 91       	pop	r31
    2d98:	ef 91       	pop	r30
    2d9a:	bf 91       	pop	r27
    2d9c:	af 91       	pop	r26
    2d9e:	9f 91       	pop	r25
    2da0:	8f 91       	pop	r24
    2da2:	7f 91       	pop	r23
    2da4:	6f 91       	pop	r22
    2da6:	5f 91       	pop	r21
    2da8:	4f 91       	pop	r20
    2daa:	3f 91       	pop	r19
    2dac:	2f 91       	pop	r18
    2dae:	0f 90       	pop	r0
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	0f 90       	pop	r0
    2db4:	1f 90       	pop	r1
    2db6:	18 95       	reti

00002db8 <__vector_3>:

/**ISR of INT2*/
void __vector_3(void)__attribute__((signal))__attribute__((interrupt));
void __vector_3(void)
{
    2db8:	78 94       	sei
    2dba:	1f 92       	push	r1
    2dbc:	0f 92       	push	r0
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	0f 92       	push	r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	2f 93       	push	r18
    2dc6:	3f 93       	push	r19
    2dc8:	4f 93       	push	r20
    2dca:	5f 93       	push	r21
    2dcc:	6f 93       	push	r22
    2dce:	7f 93       	push	r23
    2dd0:	8f 93       	push	r24
    2dd2:	9f 93       	push	r25
    2dd4:	af 93       	push	r26
    2dd6:	bf 93       	push	r27
    2dd8:	ef 93       	push	r30
    2dda:	ff 93       	push	r31
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
	if (INT2_CallBack != 0)
    2de4:	80 91 f2 01 	lds	r24, 0x01F2
    2de8:	90 91 f3 01 	lds	r25, 0x01F3
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	29 f0       	breq	.+10     	; 0x2dfa <__vector_3+0x42>
	{
		INT2_CallBack () ;
    2df0:	e0 91 f2 01 	lds	r30, 0x01F2
    2df4:	f0 91 f3 01 	lds	r31, 0x01F3
    2df8:	09 95       	icall
	}
}
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	ff 91       	pop	r31
    2e00:	ef 91       	pop	r30
    2e02:	bf 91       	pop	r27
    2e04:	af 91       	pop	r26
    2e06:	9f 91       	pop	r25
    2e08:	8f 91       	pop	r24
    2e0a:	7f 91       	pop	r23
    2e0c:	6f 91       	pop	r22
    2e0e:	5f 91       	pop	r21
    2e10:	4f 91       	pop	r20
    2e12:	3f 91       	pop	r19
    2e14:	2f 91       	pop	r18
    2e16:	0f 90       	pop	r0
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	0f 90       	pop	r0
    2e1c:	1f 90       	pop	r1
    2e1e:	18 95       	reti

00002e20 <EEPROM_writeByte>:
 *      Author: Mahmoud Osman
 */

#include "EEPROM.h"
#include "../../LIB/BIT_MATH.h"
void EEPROM_writeByte(u16 location_10bit,u8 data){
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <EEPROM_writeByte+0x6>
    2e26:	0f 92       	push	r0
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	9a 83       	std	Y+2, r25	; 0x02
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	6b 83       	std	Y+3, r22	; 0x03
	//wait until the EEPROM to become ready
	while(READ_BIT(EECR_REG,1)==1);
    2e32:	ec e3       	ldi	r30, 0x3C	; 60
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	88 2f       	mov	r24, r24
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	82 70       	andi	r24, 0x02	; 2
    2e3e:	90 70       	andi	r25, 0x00	; 0
    2e40:	95 95       	asr	r25
    2e42:	87 95       	ror	r24
    2e44:	81 30       	cpi	r24, 0x01	; 1
    2e46:	91 05       	cpc	r25, r1
    2e48:	a1 f3       	breq	.-24     	; 0x2e32 <EEPROM_writeByte+0x12>
	//write address (10 bits)
	EEARL_REG = location_10bit;
    2e4a:	ee e3       	ldi	r30, 0x3E	; 62
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	80 83       	st	Z, r24
	EEARH_REG = (location_10bit>>8) & 0x03;
    2e52:	ef e3       	ldi	r30, 0x3F	; 63
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5a:	89 2f       	mov	r24, r25
    2e5c:	99 27       	eor	r25, r25
    2e5e:	83 70       	andi	r24, 0x03	; 3
    2e60:	80 83       	st	Z, r24

	//write data to register
	EEDR_REG = data;
    2e62:	ed e3       	ldi	r30, 0x3D	; 61
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	80 83       	st	Z, r24

	//set EEMWE
	asm("SBI 0X1C , 2");
    2e6a:	e2 9a       	sbi	0x1c, 2	; 28
	//set EEWE within 4 clks
	asm("SBI 0X1C , 1");
    2e6c:	e1 9a       	sbi	0x1c, 1	; 28
}
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <EEPROM_readByte>:

u8 EEPROM_readByte(u16 location_10bit){
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <EEPROM_readByte+0x6>
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	89 83       	std	Y+1, r24	; 0x01
	//wait until the EEPROM to become ready
	while(READ_BIT(EECR_REG,1)==1);
    2e88:	ec e3       	ldi	r30, 0x3C	; 60
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	82 70       	andi	r24, 0x02	; 2
    2e94:	90 70       	andi	r25, 0x00	; 0
    2e96:	95 95       	asr	r25
    2e98:	87 95       	ror	r24
    2e9a:	81 30       	cpi	r24, 0x01	; 1
    2e9c:	91 05       	cpc	r25, r1
    2e9e:	a1 f3       	breq	.-24     	; 0x2e88 <EEPROM_readByte+0xe>

	//write address (10 bits)
	EEARL_REG = location_10bit;
    2ea0:	ee e3       	ldi	r30, 0x3E	; 62
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	80 83       	st	Z, r24
	EEARH_REG = (location_10bit>>8) & 0x03;
    2ea8:	ef e3       	ldi	r30, 0x3F	; 63
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb0:	89 2f       	mov	r24, r25
    2eb2:	99 27       	eor	r25, r25
    2eb4:	83 70       	andi	r24, 0x03	; 3
    2eb6:	80 83       	st	Z, r24

	//set the EEPROM Read Enable
	SET_BIT(EECR_REG,0);
    2eb8:	ac e3       	ldi	r26, 0x3C	; 60
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	ec e3       	ldi	r30, 0x3C	; 60
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	81 60       	ori	r24, 0x01	; 1
    2ec4:	8c 93       	st	X, r24


	//return Data (8 bits)
	return (u8)EEDR_REG;
    2ec6:	ed e3       	ldi	r30, 0x3D	; 61
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
}
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <DIO_PinMode>:
 *  Author: PC
 */ 
#include "registers.h"
#include "../../../LIB2/LIB/STD_TYPES.h"
#include "DIO.h"
void DIO_PinMode(uint8 Pin_No ,uint8 Mode ){
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <DIO_PinMode+0x6>
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <DIO_PinMode+0x8>
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <DIO_PinMode+0xa>
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	8b 83       	std	Y+3, r24	; 0x03
    2ee6:	6c 83       	std	Y+4, r22	; 0x04
	uint8 port=Pin_No/10;
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	9a e0       	ldi	r25, 0x0A	; 10
    2eec:	69 2f       	mov	r22, r25
    2eee:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <__udivmodqi4>
    2ef2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Pin=Pin_No%10;
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	9a e0       	ldi	r25, 0x0A	; 10
    2ef8:	69 2f       	mov	r22, r25
    2efa:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <__udivmodqi4>
    2efe:	89 2f       	mov	r24, r25
    2f00:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	28 2f       	mov	r18, r24
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	3e 83       	std	Y+6, r19	; 0x06
    2f0a:	2d 83       	std	Y+5, r18	; 0x05
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f10:	81 30       	cpi	r24, 0x01	; 1
    2f12:	91 05       	cpc	r25, r1
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <DIO_PinMode+0x42>
    2f16:	47 c0       	rjmp	.+142    	; 0x2fa6 <DIO_PinMode+0xd0>
    2f18:	2d 81       	ldd	r18, Y+5	; 0x05
    2f1a:	3e 81       	ldd	r19, Y+6	; 0x06
    2f1c:	22 30       	cpi	r18, 0x02	; 2
    2f1e:	31 05       	cpc	r19, r1
    2f20:	2c f4       	brge	.+10     	; 0x2f2c <DIO_PinMode+0x56>
    2f22:	8d 81       	ldd	r24, Y+5	; 0x05
    2f24:	9e 81       	ldd	r25, Y+6	; 0x06
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	71 f0       	breq	.+28     	; 0x2f46 <DIO_PinMode+0x70>
    2f2a:	cb c0       	rjmp	.+406    	; 0x30c2 <DIO_PinMode+0x1ec>
    2f2c:	2d 81       	ldd	r18, Y+5	; 0x05
    2f2e:	3e 81       	ldd	r19, Y+6	; 0x06
    2f30:	22 30       	cpi	r18, 0x02	; 2
    2f32:	31 05       	cpc	r19, r1
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <DIO_PinMode+0x62>
    2f36:	67 c0       	rjmp	.+206    	; 0x3006 <DIO_PinMode+0x130>
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	83 30       	cpi	r24, 0x03	; 3
    2f3e:	91 05       	cpc	r25, r1
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <DIO_PinMode+0x6e>
    2f42:	91 c0       	rjmp	.+290    	; 0x3066 <DIO_PinMode+0x190>
    2f44:	be c0       	rjmp	.+380    	; 0x30c2 <DIO_PinMode+0x1ec>
		
		case 0:
			///PORTA
		
		if(Mode==OUTPUT)
    2f46:	8c 81       	ldd	r24, Y+4	; 0x04
    2f48:	81 30       	cpi	r24, 0x01	; 1
    2f4a:	a1 f4       	brne	.+40     	; 0x2f74 <DIO_PinMode+0x9e>
		{
			SET_BIT(DDRA,Pin);
    2f4c:	aa e3       	ldi	r26, 0x3A	; 58
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	ea e3       	ldi	r30, 0x3A	; 58
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	48 2f       	mov	r20, r24
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	02 2e       	mov	r0, r18
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <DIO_PinMode+0x94>
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	0a 94       	dec	r0
    2f6c:	e2 f7       	brpl	.-8      	; 0x2f66 <DIO_PinMode+0x90>
    2f6e:	84 2b       	or	r24, r20
    2f70:	8c 93       	st	X, r24
    2f72:	a7 c0       	rjmp	.+334    	; 0x30c2 <DIO_PinMode+0x1ec>
		}
		else if(Mode==INPUT){
    2f74:	8c 81       	ldd	r24, Y+4	; 0x04
    2f76:	88 23       	and	r24, r24
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <DIO_PinMode+0xa6>
    2f7a:	a3 c0       	rjmp	.+326    	; 0x30c2 <DIO_PinMode+0x1ec>
			CLR_BIT(DDRA,Pin);
    2f7c:	aa e3       	ldi	r26, 0x3A	; 58
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	ea e3       	ldi	r30, 0x3A	; 58
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	48 2f       	mov	r20, r24
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	02 2e       	mov	r0, r18
    2f94:	02 c0       	rjmp	.+4      	; 0x2f9a <DIO_PinMode+0xc4>
    2f96:	88 0f       	add	r24, r24
    2f98:	99 1f       	adc	r25, r25
    2f9a:	0a 94       	dec	r0
    2f9c:	e2 f7       	brpl	.-8      	; 0x2f96 <DIO_PinMode+0xc0>
    2f9e:	80 95       	com	r24
    2fa0:	84 23       	and	r24, r20
    2fa2:	8c 93       	st	X, r24
    2fa4:	8e c0       	rjmp	.+284    	; 0x30c2 <DIO_PinMode+0x1ec>
		}
		
		break;
		case 1:
			///PORTB
		if(Mode==OUTPUT)
    2fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa8:	81 30       	cpi	r24, 0x01	; 1
    2faa:	a1 f4       	brne	.+40     	; 0x2fd4 <DIO_PinMode+0xfe>
		{
			SET_BIT(DDRB,Pin);
    2fac:	a7 e3       	ldi	r26, 0x37	; 55
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e7 e3       	ldi	r30, 0x37	; 55
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	48 2f       	mov	r20, r24
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	28 2f       	mov	r18, r24
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	02 2e       	mov	r0, r18
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <DIO_PinMode+0xf4>
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	0a 94       	dec	r0
    2fcc:	e2 f7       	brpl	.-8      	; 0x2fc6 <DIO_PinMode+0xf0>
    2fce:	84 2b       	or	r24, r20
    2fd0:	8c 93       	st	X, r24
    2fd2:	77 c0       	rjmp	.+238    	; 0x30c2 <DIO_PinMode+0x1ec>
		}
		else if(Mode==INPUT){
    2fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd6:	88 23       	and	r24, r24
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <DIO_PinMode+0x106>
    2fda:	73 c0       	rjmp	.+230    	; 0x30c2 <DIO_PinMode+0x1ec>
			CLR_BIT(DDRB,Pin);
    2fdc:	a7 e3       	ldi	r26, 0x37	; 55
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e7 e3       	ldi	r30, 0x37	; 55
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	48 2f       	mov	r20, r24
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	02 2e       	mov	r0, r18
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <DIO_PinMode+0x124>
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	0a 94       	dec	r0
    2ffc:	e2 f7       	brpl	.-8      	; 0x2ff6 <DIO_PinMode+0x120>
    2ffe:	80 95       	com	r24
    3000:	84 23       	and	r24, r20
    3002:	8c 93       	st	X, r24
    3004:	5e c0       	rjmp	.+188    	; 0x30c2 <DIO_PinMode+0x1ec>
		}
		
		break;
		case 2:
		if(Mode==OUTPUT)
    3006:	8c 81       	ldd	r24, Y+4	; 0x04
    3008:	81 30       	cpi	r24, 0x01	; 1
    300a:	a1 f4       	brne	.+40     	; 0x3034 <DIO_PinMode+0x15e>
		{
			SET_BIT(DDRC,Pin);
    300c:	a4 e3       	ldi	r26, 0x34	; 52
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	e4 e3       	ldi	r30, 0x34	; 52
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	48 2f       	mov	r20, r24
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	02 2e       	mov	r0, r18
    3024:	02 c0       	rjmp	.+4      	; 0x302a <DIO_PinMode+0x154>
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	0a 94       	dec	r0
    302c:	e2 f7       	brpl	.-8      	; 0x3026 <DIO_PinMode+0x150>
    302e:	84 2b       	or	r24, r20
    3030:	8c 93       	st	X, r24
    3032:	47 c0       	rjmp	.+142    	; 0x30c2 <DIO_PinMode+0x1ec>
		}
		else if(Mode==INPUT){
    3034:	8c 81       	ldd	r24, Y+4	; 0x04
    3036:	88 23       	and	r24, r24
    3038:	09 f0       	breq	.+2      	; 0x303c <DIO_PinMode+0x166>
    303a:	43 c0       	rjmp	.+134    	; 0x30c2 <DIO_PinMode+0x1ec>
			CLR_BIT(DDRC,Pin);
    303c:	a4 e3       	ldi	r26, 0x34	; 52
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e4 e3       	ldi	r30, 0x34	; 52
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	48 2f       	mov	r20, r24
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	02 2e       	mov	r0, r18
    3054:	02 c0       	rjmp	.+4      	; 0x305a <DIO_PinMode+0x184>
    3056:	88 0f       	add	r24, r24
    3058:	99 1f       	adc	r25, r25
    305a:	0a 94       	dec	r0
    305c:	e2 f7       	brpl	.-8      	; 0x3056 <DIO_PinMode+0x180>
    305e:	80 95       	com	r24
    3060:	84 23       	and	r24, r20
    3062:	8c 93       	st	X, r24
    3064:	2e c0       	rjmp	.+92     	; 0x30c2 <DIO_PinMode+0x1ec>
		}
		
		break;
		case 3:
		if(Mode==OUTPUT)
    3066:	8c 81       	ldd	r24, Y+4	; 0x04
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	a1 f4       	brne	.+40     	; 0x3094 <DIO_PinMode+0x1be>
		{
			SET_BIT(DDRD,Pin);
    306c:	a1 e3       	ldi	r26, 0x31	; 49
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	e1 e3       	ldi	r30, 0x31	; 49
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	48 2f       	mov	r20, r24
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	02 2e       	mov	r0, r18
    3084:	02 c0       	rjmp	.+4      	; 0x308a <DIO_PinMode+0x1b4>
    3086:	88 0f       	add	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	0a 94       	dec	r0
    308c:	e2 f7       	brpl	.-8      	; 0x3086 <DIO_PinMode+0x1b0>
    308e:	84 2b       	or	r24, r20
    3090:	8c 93       	st	X, r24
    3092:	17 c0       	rjmp	.+46     	; 0x30c2 <DIO_PinMode+0x1ec>
		}
		else if(Mode==INPUT){
    3094:	8c 81       	ldd	r24, Y+4	; 0x04
    3096:	88 23       	and	r24, r24
    3098:	a1 f4       	brne	.+40     	; 0x30c2 <DIO_PinMode+0x1ec>
			CLR_BIT(DDRD,Pin);
    309a:	a1 e3       	ldi	r26, 0x31	; 49
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e1 e3       	ldi	r30, 0x31	; 49
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	48 2f       	mov	r20, r24
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	02 2e       	mov	r0, r18
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <DIO_PinMode+0x1e2>
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	0a 94       	dec	r0
    30ba:	e2 f7       	brpl	.-8      	; 0x30b4 <DIO_PinMode+0x1de>
    30bc:	80 95       	com	r24
    30be:	84 23       	and	r24, r20
    30c0:	8c 93       	st	X, r24
		}
		break;
	
}
}
    30c2:	26 96       	adiw	r28, 0x06	; 6
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	cf 91       	pop	r28
    30d0:	df 91       	pop	r29
    30d2:	08 95       	ret

000030d4 <DIO_digitalWrite>:

void DIO_digitalWrite(uint8 Pin_No ,uint8 State){
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	00 d0       	rcall	.+0      	; 0x30da <DIO_digitalWrite+0x6>
    30da:	00 d0       	rcall	.+0      	; 0x30dc <DIO_digitalWrite+0x8>
    30dc:	00 d0       	rcall	.+0      	; 0x30de <DIO_digitalWrite+0xa>
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	8b 83       	std	Y+3, r24	; 0x03
    30e4:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8 port=Pin_No/10;
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	9a e0       	ldi	r25, 0x0A	; 10
    30ea:	69 2f       	mov	r22, r25
    30ec:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <__udivmodqi4>
    30f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Pin=Pin_No%10;
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	9a e0       	ldi	r25, 0x0A	; 10
    30f6:	69 2f       	mov	r22, r25
    30f8:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <__udivmodqi4>
    30fc:	89 2f       	mov	r24, r25
    30fe:	89 83       	std	Y+1, r24	; 0x01
	switch(port){
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	3e 83       	std	Y+6, r19	; 0x06
    3108:	2d 83       	std	Y+5, r18	; 0x05
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
    310c:	9e 81       	ldd	r25, Y+6	; 0x06
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	91 05       	cpc	r25, r1
    3112:	09 f4       	brne	.+2      	; 0x3116 <DIO_digitalWrite+0x42>
    3114:	47 c0       	rjmp	.+142    	; 0x31a4 <DIO_digitalWrite+0xd0>
    3116:	2d 81       	ldd	r18, Y+5	; 0x05
    3118:	3e 81       	ldd	r19, Y+6	; 0x06
    311a:	22 30       	cpi	r18, 0x02	; 2
    311c:	31 05       	cpc	r19, r1
    311e:	2c f4       	brge	.+10     	; 0x312a <DIO_digitalWrite+0x56>
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	00 97       	sbiw	r24, 0x00	; 0
    3126:	71 f0       	breq	.+28     	; 0x3144 <DIO_digitalWrite+0x70>
    3128:	cb c0       	rjmp	.+406    	; 0x32c0 <DIO_digitalWrite+0x1ec>
    312a:	2d 81       	ldd	r18, Y+5	; 0x05
    312c:	3e 81       	ldd	r19, Y+6	; 0x06
    312e:	22 30       	cpi	r18, 0x02	; 2
    3130:	31 05       	cpc	r19, r1
    3132:	09 f4       	brne	.+2      	; 0x3136 <DIO_digitalWrite+0x62>
    3134:	67 c0       	rjmp	.+206    	; 0x3204 <DIO_digitalWrite+0x130>
    3136:	8d 81       	ldd	r24, Y+5	; 0x05
    3138:	9e 81       	ldd	r25, Y+6	; 0x06
    313a:	83 30       	cpi	r24, 0x03	; 3
    313c:	91 05       	cpc	r25, r1
    313e:	09 f4       	brne	.+2      	; 0x3142 <DIO_digitalWrite+0x6e>
    3140:	91 c0       	rjmp	.+290    	; 0x3264 <DIO_digitalWrite+0x190>
    3142:	be c0       	rjmp	.+380    	; 0x32c0 <DIO_digitalWrite+0x1ec>
		
		case 0:
		
		if(State==HIGH)
    3144:	8c 81       	ldd	r24, Y+4	; 0x04
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	a1 f4       	brne	.+40     	; 0x3172 <DIO_digitalWrite+0x9e>
		{
			SET_BIT(PORTA,Pin);
    314a:	ab e3       	ldi	r26, 0x3B	; 59
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	eb e3       	ldi	r30, 0x3B	; 59
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	48 2f       	mov	r20, r24
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	02 2e       	mov	r0, r18
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <DIO_digitalWrite+0x94>
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	0a 94       	dec	r0
    316a:	e2 f7       	brpl	.-8      	; 0x3164 <DIO_digitalWrite+0x90>
    316c:	84 2b       	or	r24, r20
    316e:	8c 93       	st	X, r24
    3170:	a7 c0       	rjmp	.+334    	; 0x32c0 <DIO_digitalWrite+0x1ec>
		}
		else if(State==LOW){
    3172:	8c 81       	ldd	r24, Y+4	; 0x04
    3174:	88 23       	and	r24, r24
    3176:	09 f0       	breq	.+2      	; 0x317a <DIO_digitalWrite+0xa6>
    3178:	a3 c0       	rjmp	.+326    	; 0x32c0 <DIO_digitalWrite+0x1ec>
			CLR_BIT(PORTA,Pin);
    317a:	ab e3       	ldi	r26, 0x3B	; 59
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	eb e3       	ldi	r30, 0x3B	; 59
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	48 2f       	mov	r20, r24
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	28 2f       	mov	r18, r24
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	02 2e       	mov	r0, r18
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <DIO_digitalWrite+0xc4>
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	0a 94       	dec	r0
    319a:	e2 f7       	brpl	.-8      	; 0x3194 <DIO_digitalWrite+0xc0>
    319c:	80 95       	com	r24
    319e:	84 23       	and	r24, r20
    31a0:	8c 93       	st	X, r24
    31a2:	8e c0       	rjmp	.+284    	; 0x32c0 <DIO_digitalWrite+0x1ec>
		}
		
		break;
		case 1:
		if(State==HIGH)
    31a4:	8c 81       	ldd	r24, Y+4	; 0x04
    31a6:	81 30       	cpi	r24, 0x01	; 1
    31a8:	a1 f4       	brne	.+40     	; 0x31d2 <DIO_digitalWrite+0xfe>
		{
			SET_BIT(PORTB,Pin);
    31aa:	a8 e3       	ldi	r26, 0x38	; 56
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e8 e3       	ldi	r30, 0x38	; 56
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	48 2f       	mov	r20, r24
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	02 2e       	mov	r0, r18
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <DIO_digitalWrite+0xf4>
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	0a 94       	dec	r0
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <DIO_digitalWrite+0xf0>
    31cc:	84 2b       	or	r24, r20
    31ce:	8c 93       	st	X, r24
    31d0:	77 c0       	rjmp	.+238    	; 0x32c0 <DIO_digitalWrite+0x1ec>
		}
		else if(State==LOW){
    31d2:	8c 81       	ldd	r24, Y+4	; 0x04
    31d4:	88 23       	and	r24, r24
    31d6:	09 f0       	breq	.+2      	; 0x31da <DIO_digitalWrite+0x106>
    31d8:	73 c0       	rjmp	.+230    	; 0x32c0 <DIO_digitalWrite+0x1ec>
			CLR_BIT(PORTB,Pin);
    31da:	a8 e3       	ldi	r26, 0x38	; 56
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e8 e3       	ldi	r30, 0x38	; 56
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	48 2f       	mov	r20, r24
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	28 2f       	mov	r18, r24
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	02 2e       	mov	r0, r18
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <DIO_digitalWrite+0x124>
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	0a 94       	dec	r0
    31fa:	e2 f7       	brpl	.-8      	; 0x31f4 <DIO_digitalWrite+0x120>
    31fc:	80 95       	com	r24
    31fe:	84 23       	and	r24, r20
    3200:	8c 93       	st	X, r24
    3202:	5e c0       	rjmp	.+188    	; 0x32c0 <DIO_digitalWrite+0x1ec>
		}
		
		break;
		case 2:
		if(State==HIGH)
    3204:	8c 81       	ldd	r24, Y+4	; 0x04
    3206:	81 30       	cpi	r24, 0x01	; 1
    3208:	a1 f4       	brne	.+40     	; 0x3232 <DIO_digitalWrite+0x15e>
		{
			SET_BIT(PORTC,Pin);
    320a:	a5 e3       	ldi	r26, 0x35	; 53
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	e5 e3       	ldi	r30, 0x35	; 53
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	48 2f       	mov	r20, r24
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	28 2f       	mov	r18, r24
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	02 2e       	mov	r0, r18
    3222:	02 c0       	rjmp	.+4      	; 0x3228 <DIO_digitalWrite+0x154>
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	0a 94       	dec	r0
    322a:	e2 f7       	brpl	.-8      	; 0x3224 <DIO_digitalWrite+0x150>
    322c:	84 2b       	or	r24, r20
    322e:	8c 93       	st	X, r24
    3230:	47 c0       	rjmp	.+142    	; 0x32c0 <DIO_digitalWrite+0x1ec>
		}
		else if(State==LOW){
    3232:	8c 81       	ldd	r24, Y+4	; 0x04
    3234:	88 23       	and	r24, r24
    3236:	09 f0       	breq	.+2      	; 0x323a <DIO_digitalWrite+0x166>
    3238:	43 c0       	rjmp	.+134    	; 0x32c0 <DIO_digitalWrite+0x1ec>
			CLR_BIT(PORTC,Pin);
    323a:	a5 e3       	ldi	r26, 0x35	; 53
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e5 e3       	ldi	r30, 0x35	; 53
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	48 2f       	mov	r20, r24
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	28 2f       	mov	r18, r24
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	02 2e       	mov	r0, r18
    3252:	02 c0       	rjmp	.+4      	; 0x3258 <DIO_digitalWrite+0x184>
    3254:	88 0f       	add	r24, r24
    3256:	99 1f       	adc	r25, r25
    3258:	0a 94       	dec	r0
    325a:	e2 f7       	brpl	.-8      	; 0x3254 <DIO_digitalWrite+0x180>
    325c:	80 95       	com	r24
    325e:	84 23       	and	r24, r20
    3260:	8c 93       	st	X, r24
    3262:	2e c0       	rjmp	.+92     	; 0x32c0 <DIO_digitalWrite+0x1ec>
		}
		
		break;
		case 3:
		if(State==HIGH)
    3264:	8c 81       	ldd	r24, Y+4	; 0x04
    3266:	81 30       	cpi	r24, 0x01	; 1
    3268:	a1 f4       	brne	.+40     	; 0x3292 <DIO_digitalWrite+0x1be>
		{
			SET_BIT(PORTD,Pin);
    326a:	a2 e3       	ldi	r26, 0x32	; 50
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	e2 e3       	ldi	r30, 0x32	; 50
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	48 2f       	mov	r20, r24
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	28 2f       	mov	r18, r24
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	02 2e       	mov	r0, r18
    3282:	02 c0       	rjmp	.+4      	; 0x3288 <DIO_digitalWrite+0x1b4>
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	0a 94       	dec	r0
    328a:	e2 f7       	brpl	.-8      	; 0x3284 <DIO_digitalWrite+0x1b0>
    328c:	84 2b       	or	r24, r20
    328e:	8c 93       	st	X, r24
    3290:	17 c0       	rjmp	.+46     	; 0x32c0 <DIO_digitalWrite+0x1ec>
		}
		else if(State==LOW){
    3292:	8c 81       	ldd	r24, Y+4	; 0x04
    3294:	88 23       	and	r24, r24
    3296:	a1 f4       	brne	.+40     	; 0x32c0 <DIO_digitalWrite+0x1ec>
			CLR_BIT(PORTD,Pin);
    3298:	a2 e3       	ldi	r26, 0x32	; 50
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e2 e3       	ldi	r30, 0x32	; 50
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	48 2f       	mov	r20, r24
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	02 2e       	mov	r0, r18
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <DIO_digitalWrite+0x1e2>
    32b2:	88 0f       	add	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	0a 94       	dec	r0
    32b8:	e2 f7       	brpl	.-8      	; 0x32b2 <DIO_digitalWrite+0x1de>
    32ba:	80 95       	com	r24
    32bc:	84 23       	and	r24, r20
    32be:	8c 93       	st	X, r24
			
		}
		break;
	}

}
    32c0:	26 96       	adiw	r28, 0x06	; 6
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	08 95       	ret

000032d2 <DIO_digitalRead>:

uint8 DIO_digitalRead(uint8 Pin_No ){
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	27 97       	sbiw	r28, 0x07	; 7
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8 Pin=Pin_No/10;
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	9a e0       	ldi	r25, 0x0A	; 10
    32ec:	69 2f       	mov	r22, r25
    32ee:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <__udivmodqi4>
    32f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Pin_number=Pin_No%10;
    32f4:	8b 81       	ldd	r24, Y+3	; 0x03
    32f6:	9a e0       	ldi	r25, 0x0A	; 10
    32f8:	69 2f       	mov	r22, r25
    32fa:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <__udivmodqi4>
    32fe:	89 2f       	mov	r24, r25
    3300:	89 83       	std	Y+1, r24	; 0x01
	switch(Pin){
    3302:	8a 81       	ldd	r24, Y+2	; 0x02
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	3e 83       	std	Y+6, r19	; 0x06
    330a:	2d 83       	std	Y+5, r18	; 0x05
    330c:	4d 81       	ldd	r20, Y+5	; 0x05
    330e:	5e 81       	ldd	r21, Y+6	; 0x06
    3310:	41 30       	cpi	r20, 0x01	; 1
    3312:	51 05       	cpc	r21, r1
    3314:	49 f1       	breq	.+82     	; 0x3368 <DIO_digitalRead+0x96>
    3316:	8d 81       	ldd	r24, Y+5	; 0x05
    3318:	9e 81       	ldd	r25, Y+6	; 0x06
    331a:	82 30       	cpi	r24, 0x02	; 2
    331c:	91 05       	cpc	r25, r1
    331e:	34 f4       	brge	.+12     	; 0x332c <DIO_digitalRead+0x5a>
    3320:	2d 81       	ldd	r18, Y+5	; 0x05
    3322:	3e 81       	ldd	r19, Y+6	; 0x06
    3324:	21 15       	cp	r18, r1
    3326:	31 05       	cpc	r19, r1
    3328:	61 f0       	breq	.+24     	; 0x3342 <DIO_digitalRead+0x70>
    332a:	57 c0       	rjmp	.+174    	; 0x33da <DIO_digitalRead+0x108>
    332c:	4d 81       	ldd	r20, Y+5	; 0x05
    332e:	5e 81       	ldd	r21, Y+6	; 0x06
    3330:	42 30       	cpi	r20, 0x02	; 2
    3332:	51 05       	cpc	r21, r1
    3334:	61 f1       	breq	.+88     	; 0x338e <DIO_digitalRead+0xbc>
    3336:	8d 81       	ldd	r24, Y+5	; 0x05
    3338:	9e 81       	ldd	r25, Y+6	; 0x06
    333a:	83 30       	cpi	r24, 0x03	; 3
    333c:	91 05       	cpc	r25, r1
    333e:	d1 f1       	breq	.+116    	; 0x33b4 <DIO_digitalRead+0xe2>
    3340:	4c c0       	rjmp	.+152    	; 0x33da <DIO_digitalRead+0x108>
		
		case 0:
		return GET_BIT(PINA,Pin_number);
    3342:	e9 e3       	ldi	r30, 0x39	; 57
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	80 81       	ld	r24, Z
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	88 2f       	mov	r24, r24
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	a9 01       	movw	r20, r18
    3354:	02 c0       	rjmp	.+4      	; 0x335a <DIO_digitalRead+0x88>
    3356:	55 95       	asr	r21
    3358:	47 95       	ror	r20
    335a:	8a 95       	dec	r24
    335c:	e2 f7       	brpl	.-8      	; 0x3356 <DIO_digitalRead+0x84>
    335e:	ca 01       	movw	r24, r20
    3360:	58 2f       	mov	r21, r24
    3362:	51 70       	andi	r21, 0x01	; 1
    3364:	5c 83       	std	Y+4, r21	; 0x04
    3366:	3a c0       	rjmp	.+116    	; 0x33dc <DIO_digitalRead+0x10a>
		break;
		case 1:
		
		return GET_BIT(PINB,Pin_number);
    3368:	e6 e3       	ldi	r30, 0x36	; 54
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	88 2f       	mov	r24, r24
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	a9 01       	movw	r20, r18
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <DIO_digitalRead+0xae>
    337c:	55 95       	asr	r21
    337e:	47 95       	ror	r20
    3380:	8a 95       	dec	r24
    3382:	e2 f7       	brpl	.-8      	; 0x337c <DIO_digitalRead+0xaa>
    3384:	ca 01       	movw	r24, r20
    3386:	58 2f       	mov	r21, r24
    3388:	51 70       	andi	r21, 0x01	; 1
    338a:	5c 83       	std	Y+4, r21	; 0x04
    338c:	27 c0       	rjmp	.+78     	; 0x33dc <DIO_digitalRead+0x10a>
		
		break;
		case 2:
		return GET_BIT(PINC,Pin_number);
    338e:	e3 e3       	ldi	r30, 0x33	; 51
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	80 81       	ld	r24, Z
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	88 2f       	mov	r24, r24
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	a9 01       	movw	r20, r18
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <DIO_digitalRead+0xd4>
    33a2:	55 95       	asr	r21
    33a4:	47 95       	ror	r20
    33a6:	8a 95       	dec	r24
    33a8:	e2 f7       	brpl	.-8      	; 0x33a2 <DIO_digitalRead+0xd0>
    33aa:	ca 01       	movw	r24, r20
    33ac:	58 2f       	mov	r21, r24
    33ae:	51 70       	andi	r21, 0x01	; 1
    33b0:	5c 83       	std	Y+4, r21	; 0x04
    33b2:	14 c0       	rjmp	.+40     	; 0x33dc <DIO_digitalRead+0x10a>
		break;
		case 3:
		return GET_BIT(PIND,Pin_number);
    33b4:	e0 e3       	ldi	r30, 0x30	; 48
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	88 2f       	mov	r24, r24
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	a9 01       	movw	r20, r18
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <DIO_digitalRead+0xfa>
    33c8:	55 95       	asr	r21
    33ca:	47 95       	ror	r20
    33cc:	8a 95       	dec	r24
    33ce:	e2 f7       	brpl	.-8      	; 0x33c8 <DIO_digitalRead+0xf6>
    33d0:	ca 01       	movw	r24, r20
    33d2:	58 2f       	mov	r21, r24
    33d4:	51 70       	andi	r21, 0x01	; 1
    33d6:	5c 83       	std	Y+4, r21	; 0x04
    33d8:	01 c0       	rjmp	.+2      	; 0x33dc <DIO_digitalRead+0x10a>
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <DIO_digitalRead+0x10e>
		break;
	}

}
    33dc:	8c 81       	ldd	r24, Y+4	; 0x04
    33de:	8f 83       	std	Y+7, r24	; 0x07
    33e0:	8f 81       	ldd	r24, Y+7	; 0x07
    33e2:	27 96       	adiw	r28, 0x07	; 7
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	cf 91       	pop	r28
    33f0:	df 91       	pop	r29
    33f2:	08 95       	ret

000033f4 <MDIO_voidSetPinDir>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "DIO_int.h"

void MDIO_voidSetPinDir (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDir)
{
    33f4:	df 93       	push	r29
    33f6:	cf 93       	push	r28
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <MDIO_voidSetPinDir+0x6>
    33fa:	00 d0       	rcall	.+0      	; 0x33fc <MDIO_voidSetPinDir+0x8>
    33fc:	0f 92       	push	r0
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	89 83       	std	Y+1, r24	; 0x01
    3404:	6a 83       	std	Y+2, r22	; 0x02
    3406:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortNo)
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	28 2f       	mov	r18, r24
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	3d 83       	std	Y+5, r19	; 0x05
    3410:	2c 83       	std	Y+4, r18	; 0x04
    3412:	6c 81       	ldd	r22, Y+4	; 0x04
    3414:	7d 81       	ldd	r23, Y+5	; 0x05
    3416:	62 30       	cpi	r22, 0x02	; 2
    3418:	71 05       	cpc	r23, r1
    341a:	d1 f1       	breq	.+116    	; 0x3490 <MDIO_voidSetPinDir+0x9c>
    341c:	8c 81       	ldd	r24, Y+4	; 0x04
    341e:	9d 81       	ldd	r25, Y+5	; 0x05
    3420:	83 30       	cpi	r24, 0x03	; 3
    3422:	91 05       	cpc	r25, r1
    3424:	34 f4       	brge	.+12     	; 0x3432 <MDIO_voidSetPinDir+0x3e>
    3426:	2c 81       	ldd	r18, Y+4	; 0x04
    3428:	3d 81       	ldd	r19, Y+5	; 0x05
    342a:	21 30       	cpi	r18, 0x01	; 1
    342c:	31 05       	cpc	r19, r1
    342e:	71 f0       	breq	.+28     	; 0x344c <MDIO_voidSetPinDir+0x58>
    3430:	94 c0       	rjmp	.+296    	; 0x355a <MDIO_voidSetPinDir+0x166>
    3432:	6c 81       	ldd	r22, Y+4	; 0x04
    3434:	7d 81       	ldd	r23, Y+5	; 0x05
    3436:	63 30       	cpi	r22, 0x03	; 3
    3438:	71 05       	cpc	r23, r1
    343a:	09 f4       	brne	.+2      	; 0x343e <MDIO_voidSetPinDir+0x4a>
    343c:	4b c0       	rjmp	.+150    	; 0x34d4 <MDIO_voidSetPinDir+0xe0>
    343e:	8c 81       	ldd	r24, Y+4	; 0x04
    3440:	9d 81       	ldd	r25, Y+5	; 0x05
    3442:	84 30       	cpi	r24, 0x04	; 4
    3444:	91 05       	cpc	r25, r1
    3446:	09 f4       	brne	.+2      	; 0x344a <MDIO_voidSetPinDir+0x56>
    3448:	67 c0       	rjmp	.+206    	; 0x3518 <MDIO_voidSetPinDir+0x124>
    344a:	87 c0       	rjmp	.+270    	; 0x355a <MDIO_voidSetPinDir+0x166>
	    {
	    case DIO_PORTA : WRT_BIT(DDRA , A_u8PinNo , A_u8PinDir) ; break ;
    344c:	aa e3       	ldi	r26, 0x3A	; 58
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	ea e3       	ldi	r30, 0x3A	; 58
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	48 2f       	mov	r20, r24
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	28 2f       	mov	r18, r24
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <MDIO_voidSetPinDir+0x74>
    3464:	88 0f       	add	r24, r24
    3466:	99 1f       	adc	r25, r25
    3468:	2a 95       	dec	r18
    346a:	e2 f7       	brpl	.-8      	; 0x3464 <MDIO_voidSetPinDir+0x70>
    346c:	80 95       	com	r24
    346e:	48 23       	and	r20, r24
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	28 2f       	mov	r18, r24
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	8a 81       	ldd	r24, Y+2	; 0x02
    3478:	88 2f       	mov	r24, r24
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	b9 01       	movw	r22, r18
    347e:	02 c0       	rjmp	.+4      	; 0x3484 <MDIO_voidSetPinDir+0x90>
    3480:	66 0f       	add	r22, r22
    3482:	77 1f       	adc	r23, r23
    3484:	8a 95       	dec	r24
    3486:	e2 f7       	brpl	.-8      	; 0x3480 <MDIO_voidSetPinDir+0x8c>
    3488:	cb 01       	movw	r24, r22
    348a:	84 2b       	or	r24, r20
    348c:	8c 93       	st	X, r24
    348e:	65 c0       	rjmp	.+202    	; 0x355a <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTB : WRT_BIT(DDRB , A_u8PinNo , A_u8PinDir) ; break ;
    3490:	a7 e3       	ldi	r26, 0x37	; 55
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	e7 e3       	ldi	r30, 0x37	; 55
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	80 81       	ld	r24, Z
    349a:	48 2f       	mov	r20, r24
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	28 2f       	mov	r18, r24
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	02 c0       	rjmp	.+4      	; 0x34ac <MDIO_voidSetPinDir+0xb8>
    34a8:	88 0f       	add	r24, r24
    34aa:	99 1f       	adc	r25, r25
    34ac:	2a 95       	dec	r18
    34ae:	e2 f7       	brpl	.-8      	; 0x34a8 <MDIO_voidSetPinDir+0xb4>
    34b0:	80 95       	com	r24
    34b2:	48 23       	and	r20, r24
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	88 2f       	mov	r24, r24
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	b9 01       	movw	r22, r18
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <MDIO_voidSetPinDir+0xd4>
    34c4:	66 0f       	add	r22, r22
    34c6:	77 1f       	adc	r23, r23
    34c8:	8a 95       	dec	r24
    34ca:	e2 f7       	brpl	.-8      	; 0x34c4 <MDIO_voidSetPinDir+0xd0>
    34cc:	cb 01       	movw	r24, r22
    34ce:	84 2b       	or	r24, r20
    34d0:	8c 93       	st	X, r24
    34d2:	43 c0       	rjmp	.+134    	; 0x355a <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTC : WRT_BIT(DDRC , A_u8PinNo , A_u8PinDir) ; break ;
    34d4:	a4 e3       	ldi	r26, 0x34	; 52
    34d6:	b0 e0       	ldi	r27, 0x00	; 0
    34d8:	e4 e3       	ldi	r30, 0x34	; 52
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	80 81       	ld	r24, Z
    34de:	48 2f       	mov	r20, r24
    34e0:	8a 81       	ldd	r24, Y+2	; 0x02
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	02 c0       	rjmp	.+4      	; 0x34f0 <MDIO_voidSetPinDir+0xfc>
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	2a 95       	dec	r18
    34f2:	e2 f7       	brpl	.-8      	; 0x34ec <MDIO_voidSetPinDir+0xf8>
    34f4:	80 95       	com	r24
    34f6:	48 23       	and	r20, r24
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	28 2f       	mov	r18, r24
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	88 2f       	mov	r24, r24
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	b9 01       	movw	r22, r18
    3506:	02 c0       	rjmp	.+4      	; 0x350c <MDIO_voidSetPinDir+0x118>
    3508:	66 0f       	add	r22, r22
    350a:	77 1f       	adc	r23, r23
    350c:	8a 95       	dec	r24
    350e:	e2 f7       	brpl	.-8      	; 0x3508 <MDIO_voidSetPinDir+0x114>
    3510:	cb 01       	movw	r24, r22
    3512:	84 2b       	or	r24, r20
    3514:	8c 93       	st	X, r24
    3516:	21 c0       	rjmp	.+66     	; 0x355a <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTD : WRT_BIT(DDRD , A_u8PinNo , A_u8PinDir) ; break ;
    3518:	a1 e3       	ldi	r26, 0x31	; 49
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	e1 e3       	ldi	r30, 0x31	; 49
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	48 2f       	mov	r20, r24
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	28 2f       	mov	r18, r24
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <MDIO_voidSetPinDir+0x140>
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	2a 95       	dec	r18
    3536:	e2 f7       	brpl	.-8      	; 0x3530 <MDIO_voidSetPinDir+0x13c>
    3538:	80 95       	com	r24
    353a:	48 23       	and	r20, r24
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	8a 81       	ldd	r24, Y+2	; 0x02
    3544:	88 2f       	mov	r24, r24
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	b9 01       	movw	r22, r18
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <MDIO_voidSetPinDir+0x15c>
    354c:	66 0f       	add	r22, r22
    354e:	77 1f       	adc	r23, r23
    3550:	8a 95       	dec	r24
    3552:	e2 f7       	brpl	.-8      	; 0x354c <MDIO_voidSetPinDir+0x158>
    3554:	cb 01       	movw	r24, r22
    3556:	84 2b       	or	r24, r20
    3558:	8c 93       	st	X, r24
	    default : /**Error*/ break ;
	    }
}
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	08 95       	ret

0000356a <MDIO_voidSetPinVal>:

void MDIO_voidSetPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    356a:	df 93       	push	r29
    356c:	cf 93       	push	r28
    356e:	00 d0       	rcall	.+0      	; 0x3570 <MDIO_voidSetPinVal+0x6>
    3570:	00 d0       	rcall	.+0      	; 0x3572 <MDIO_voidSetPinVal+0x8>
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
    3576:	89 83       	std	Y+1, r24	; 0x01
    3578:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	3c 83       	std	Y+4, r19	; 0x04
    3582:	2b 83       	std	Y+3, r18	; 0x03
    3584:	8b 81       	ldd	r24, Y+3	; 0x03
    3586:	9c 81       	ldd	r25, Y+4	; 0x04
    3588:	82 30       	cpi	r24, 0x02	; 2
    358a:	91 05       	cpc	r25, r1
    358c:	51 f1       	breq	.+84     	; 0x35e2 <MDIO_voidSetPinVal+0x78>
    358e:	2b 81       	ldd	r18, Y+3	; 0x03
    3590:	3c 81       	ldd	r19, Y+4	; 0x04
    3592:	23 30       	cpi	r18, 0x03	; 3
    3594:	31 05       	cpc	r19, r1
    3596:	34 f4       	brge	.+12     	; 0x35a4 <MDIO_voidSetPinVal+0x3a>
    3598:	8b 81       	ldd	r24, Y+3	; 0x03
    359a:	9c 81       	ldd	r25, Y+4	; 0x04
    359c:	81 30       	cpi	r24, 0x01	; 1
    359e:	91 05       	cpc	r25, r1
    35a0:	61 f0       	breq	.+24     	; 0x35ba <MDIO_voidSetPinVal+0x50>
    35a2:	5a c0       	rjmp	.+180    	; 0x3658 <MDIO_voidSetPinVal+0xee>
    35a4:	2b 81       	ldd	r18, Y+3	; 0x03
    35a6:	3c 81       	ldd	r19, Y+4	; 0x04
    35a8:	23 30       	cpi	r18, 0x03	; 3
    35aa:	31 05       	cpc	r19, r1
    35ac:	71 f1       	breq	.+92     	; 0x360a <MDIO_voidSetPinVal+0xa0>
    35ae:	8b 81       	ldd	r24, Y+3	; 0x03
    35b0:	9c 81       	ldd	r25, Y+4	; 0x04
    35b2:	84 30       	cpi	r24, 0x04	; 4
    35b4:	91 05       	cpc	r25, r1
    35b6:	e9 f1       	breq	.+122    	; 0x3632 <MDIO_voidSetPinVal+0xc8>
    35b8:	4f c0       	rjmp	.+158    	; 0x3658 <MDIO_voidSetPinVal+0xee>
		{
		case DIO_PORTA : SET_BIT(PORTA , A_u8PinNo ) ; break ;
    35ba:	ab e3       	ldi	r26, 0x3B	; 59
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	eb e3       	ldi	r30, 0x3B	; 59
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	48 2f       	mov	r20, r24
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	28 2f       	mov	r18, r24
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	02 2e       	mov	r0, r18
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <MDIO_voidSetPinVal+0x6e>
    35d4:	88 0f       	add	r24, r24
    35d6:	99 1f       	adc	r25, r25
    35d8:	0a 94       	dec	r0
    35da:	e2 f7       	brpl	.-8      	; 0x35d4 <MDIO_voidSetPinVal+0x6a>
    35dc:	84 2b       	or	r24, r20
    35de:	8c 93       	st	X, r24
    35e0:	3b c0       	rjmp	.+118    	; 0x3658 <MDIO_voidSetPinVal+0xee>
		case DIO_PORTB : SET_BIT(PORTB , A_u8PinNo ) ; break ;
    35e2:	a8 e3       	ldi	r26, 0x38	; 56
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	e8 e3       	ldi	r30, 0x38	; 56
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	48 2f       	mov	r20, r24
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	02 2e       	mov	r0, r18
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <MDIO_voidSetPinVal+0x96>
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	0a 94       	dec	r0
    3602:	e2 f7       	brpl	.-8      	; 0x35fc <MDIO_voidSetPinVal+0x92>
    3604:	84 2b       	or	r24, r20
    3606:	8c 93       	st	X, r24
    3608:	27 c0       	rjmp	.+78     	; 0x3658 <MDIO_voidSetPinVal+0xee>
		case DIO_PORTC : SET_BIT(PORTC , A_u8PinNo ) ; break ;
    360a:	a5 e3       	ldi	r26, 0x35	; 53
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	e5 e3       	ldi	r30, 0x35	; 53
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	48 2f       	mov	r20, r24
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	28 2f       	mov	r18, r24
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	02 2e       	mov	r0, r18
    3622:	02 c0       	rjmp	.+4      	; 0x3628 <MDIO_voidSetPinVal+0xbe>
    3624:	88 0f       	add	r24, r24
    3626:	99 1f       	adc	r25, r25
    3628:	0a 94       	dec	r0
    362a:	e2 f7       	brpl	.-8      	; 0x3624 <MDIO_voidSetPinVal+0xba>
    362c:	84 2b       	or	r24, r20
    362e:	8c 93       	st	X, r24
    3630:	13 c0       	rjmp	.+38     	; 0x3658 <MDIO_voidSetPinVal+0xee>
		case DIO_PORTD : SET_BIT(PORTD , A_u8PinNo ) ; break ;
    3632:	a2 e3       	ldi	r26, 0x32	; 50
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	e2 e3       	ldi	r30, 0x32	; 50
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	48 2f       	mov	r20, r24
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	28 2f       	mov	r18, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	02 2e       	mov	r0, r18
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <MDIO_voidSetPinVal+0xe6>
    364c:	88 0f       	add	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	0a 94       	dec	r0
    3652:	e2 f7       	brpl	.-8      	; 0x364c <MDIO_voidSetPinVal+0xe2>
    3654:	84 2b       	or	r24, r20
    3656:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	08 95       	ret

00003666 <MDIO_u8GetPinVal>:

u8   MDIO_u8GetPinVal   (u8 A_u8PortNo , u8 A_u8PinNo)
{
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	00 d0       	rcall	.+0      	; 0x366c <MDIO_u8GetPinVal+0x6>
    366c:	00 d0       	rcall	.+0      	; 0x366e <MDIO_u8GetPinVal+0x8>
    366e:	0f 92       	push	r0
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	8a 83       	std	Y+2, r24	; 0x02
    3676:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
    3678:	8a 81       	ldd	r24, Y+2	; 0x02
    367a:	28 2f       	mov	r18, r24
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	3d 83       	std	Y+5, r19	; 0x05
    3680:	2c 83       	std	Y+4, r18	; 0x04
    3682:	4c 81       	ldd	r20, Y+4	; 0x04
    3684:	5d 81       	ldd	r21, Y+5	; 0x05
    3686:	42 30       	cpi	r20, 0x02	; 2
    3688:	51 05       	cpc	r21, r1
    368a:	b1 f1       	breq	.+108    	; 0x36f8 <MDIO_u8GetPinVal+0x92>
    368c:	8c 81       	ldd	r24, Y+4	; 0x04
    368e:	9d 81       	ldd	r25, Y+5	; 0x05
    3690:	83 30       	cpi	r24, 0x03	; 3
    3692:	91 05       	cpc	r25, r1
    3694:	34 f4       	brge	.+12     	; 0x36a2 <MDIO_u8GetPinVal+0x3c>
    3696:	2c 81       	ldd	r18, Y+4	; 0x04
    3698:	3d 81       	ldd	r19, Y+5	; 0x05
    369a:	21 30       	cpi	r18, 0x01	; 1
    369c:	31 05       	cpc	r19, r1
    369e:	71 f0       	breq	.+28     	; 0x36bc <MDIO_u8GetPinVal+0x56>
    36a0:	84 c0       	rjmp	.+264    	; 0x37aa <MDIO_u8GetPinVal+0x144>
    36a2:	4c 81       	ldd	r20, Y+4	; 0x04
    36a4:	5d 81       	ldd	r21, Y+5	; 0x05
    36a6:	43 30       	cpi	r20, 0x03	; 3
    36a8:	51 05       	cpc	r21, r1
    36aa:	09 f4       	brne	.+2      	; 0x36ae <MDIO_u8GetPinVal+0x48>
    36ac:	43 c0       	rjmp	.+134    	; 0x3734 <MDIO_u8GetPinVal+0xce>
    36ae:	8c 81       	ldd	r24, Y+4	; 0x04
    36b0:	9d 81       	ldd	r25, Y+5	; 0x05
    36b2:	84 30       	cpi	r24, 0x04	; 4
    36b4:	91 05       	cpc	r25, r1
    36b6:	09 f4       	brne	.+2      	; 0x36ba <MDIO_u8GetPinVal+0x54>
    36b8:	5b c0       	rjmp	.+182    	; 0x3770 <MDIO_u8GetPinVal+0x10a>
    36ba:	77 c0       	rjmp	.+238    	; 0x37aa <MDIO_u8GetPinVal+0x144>
		{
		case DIO_PORTA : L_u8PinVal = READ_BIT(PINA , A_u8PinNo) ; break ;
    36bc:	e9 e3       	ldi	r30, 0x39	; 57
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	48 2f       	mov	r20, r24
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	28 2f       	mov	r18, r24
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	02 c0       	rjmp	.+4      	; 0x36d6 <MDIO_u8GetPinVal+0x70>
    36d2:	88 0f       	add	r24, r24
    36d4:	99 1f       	adc	r25, r25
    36d6:	2a 95       	dec	r18
    36d8:	e2 f7       	brpl	.-8      	; 0x36d2 <MDIO_u8GetPinVal+0x6c>
    36da:	9a 01       	movw	r18, r20
    36dc:	28 23       	and	r18, r24
    36de:	39 23       	and	r19, r25
    36e0:	8b 81       	ldd	r24, Y+3	; 0x03
    36e2:	88 2f       	mov	r24, r24
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	a9 01       	movw	r20, r18
    36e8:	02 c0       	rjmp	.+4      	; 0x36ee <MDIO_u8GetPinVal+0x88>
    36ea:	55 95       	asr	r21
    36ec:	47 95       	ror	r20
    36ee:	8a 95       	dec	r24
    36f0:	e2 f7       	brpl	.-8      	; 0x36ea <MDIO_u8GetPinVal+0x84>
    36f2:	ca 01       	movw	r24, r20
    36f4:	89 83       	std	Y+1, r24	; 0x01
    36f6:	59 c0       	rjmp	.+178    	; 0x37aa <MDIO_u8GetPinVal+0x144>
		case DIO_PORTB : L_u8PinVal = READ_BIT(PINB , A_u8PinNo) ; break ;
    36f8:	e6 e3       	ldi	r30, 0x36	; 54
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	48 2f       	mov	r20, r24
    3700:	50 e0       	ldi	r21, 0x00	; 0
    3702:	8b 81       	ldd	r24, Y+3	; 0x03
    3704:	28 2f       	mov	r18, r24
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	02 c0       	rjmp	.+4      	; 0x3712 <MDIO_u8GetPinVal+0xac>
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	2a 95       	dec	r18
    3714:	e2 f7       	brpl	.-8      	; 0x370e <MDIO_u8GetPinVal+0xa8>
    3716:	9a 01       	movw	r18, r20
    3718:	28 23       	and	r18, r24
    371a:	39 23       	and	r19, r25
    371c:	8b 81       	ldd	r24, Y+3	; 0x03
    371e:	88 2f       	mov	r24, r24
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	a9 01       	movw	r20, r18
    3724:	02 c0       	rjmp	.+4      	; 0x372a <MDIO_u8GetPinVal+0xc4>
    3726:	55 95       	asr	r21
    3728:	47 95       	ror	r20
    372a:	8a 95       	dec	r24
    372c:	e2 f7       	brpl	.-8      	; 0x3726 <MDIO_u8GetPinVal+0xc0>
    372e:	ca 01       	movw	r24, r20
    3730:	89 83       	std	Y+1, r24	; 0x01
    3732:	3b c0       	rjmp	.+118    	; 0x37aa <MDIO_u8GetPinVal+0x144>
		case DIO_PORTC : L_u8PinVal = READ_BIT(PINC , A_u8PinNo) ; break ;
    3734:	e3 e3       	ldi	r30, 0x33	; 51
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	80 81       	ld	r24, Z
    373a:	48 2f       	mov	r20, r24
    373c:	50 e0       	ldi	r21, 0x00	; 0
    373e:	8b 81       	ldd	r24, Y+3	; 0x03
    3740:	28 2f       	mov	r18, r24
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	02 c0       	rjmp	.+4      	; 0x374e <MDIO_u8GetPinVal+0xe8>
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	2a 95       	dec	r18
    3750:	e2 f7       	brpl	.-8      	; 0x374a <MDIO_u8GetPinVal+0xe4>
    3752:	9a 01       	movw	r18, r20
    3754:	28 23       	and	r18, r24
    3756:	39 23       	and	r19, r25
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	88 2f       	mov	r24, r24
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	a9 01       	movw	r20, r18
    3760:	02 c0       	rjmp	.+4      	; 0x3766 <MDIO_u8GetPinVal+0x100>
    3762:	55 95       	asr	r21
    3764:	47 95       	ror	r20
    3766:	8a 95       	dec	r24
    3768:	e2 f7       	brpl	.-8      	; 0x3762 <MDIO_u8GetPinVal+0xfc>
    376a:	ca 01       	movw	r24, r20
    376c:	89 83       	std	Y+1, r24	; 0x01
    376e:	1d c0       	rjmp	.+58     	; 0x37aa <MDIO_u8GetPinVal+0x144>
		case DIO_PORTD : L_u8PinVal = READ_BIT(PIND , A_u8PinNo) ; break ;
    3770:	e0 e3       	ldi	r30, 0x30	; 48
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	48 2f       	mov	r20, r24
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	28 2f       	mov	r18, r24
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	02 c0       	rjmp	.+4      	; 0x378a <MDIO_u8GetPinVal+0x124>
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	2a 95       	dec	r18
    378c:	e2 f7       	brpl	.-8      	; 0x3786 <MDIO_u8GetPinVal+0x120>
    378e:	9a 01       	movw	r18, r20
    3790:	28 23       	and	r18, r24
    3792:	39 23       	and	r19, r25
    3794:	8b 81       	ldd	r24, Y+3	; 0x03
    3796:	88 2f       	mov	r24, r24
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	a9 01       	movw	r20, r18
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <MDIO_u8GetPinVal+0x13c>
    379e:	55 95       	asr	r21
    37a0:	47 95       	ror	r20
    37a2:	8a 95       	dec	r24
    37a4:	e2 f7       	brpl	.-8      	; 0x379e <MDIO_u8GetPinVal+0x138>
    37a6:	ca 01       	movw	r24, r20
    37a8:	89 83       	std	Y+1, r24	; 0x01
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	0f 90       	pop	r0
    37b4:	0f 90       	pop	r0
    37b6:	cf 91       	pop	r28
    37b8:	df 91       	pop	r29
    37ba:	08 95       	ret

000037bc <MDIO_voidSetPortVal>:

void MDIO_voidSetPortVal (u8 A_u8PortNo , u8 A_u8PortVal)
{
    37bc:	df 93       	push	r29
    37be:	cf 93       	push	r28
    37c0:	00 d0       	rcall	.+0      	; 0x37c2 <MDIO_voidSetPortVal+0x6>
    37c2:	00 d0       	rcall	.+0      	; 0x37c4 <MDIO_voidSetPortVal+0x8>
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	28 2f       	mov	r18, r24
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	3c 83       	std	Y+4, r19	; 0x04
    37d4:	2b 83       	std	Y+3, r18	; 0x03
    37d6:	8b 81       	ldd	r24, Y+3	; 0x03
    37d8:	9c 81       	ldd	r25, Y+4	; 0x04
    37da:	82 30       	cpi	r24, 0x02	; 2
    37dc:	91 05       	cpc	r25, r1
    37de:	d9 f0       	breq	.+54     	; 0x3816 <MDIO_voidSetPortVal+0x5a>
    37e0:	2b 81       	ldd	r18, Y+3	; 0x03
    37e2:	3c 81       	ldd	r19, Y+4	; 0x04
    37e4:	23 30       	cpi	r18, 0x03	; 3
    37e6:	31 05       	cpc	r19, r1
    37e8:	34 f4       	brge	.+12     	; 0x37f6 <MDIO_voidSetPortVal+0x3a>
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	9c 81       	ldd	r25, Y+4	; 0x04
    37ee:	81 30       	cpi	r24, 0x01	; 1
    37f0:	91 05       	cpc	r25, r1
    37f2:	61 f0       	breq	.+24     	; 0x380c <MDIO_voidSetPortVal+0x50>
    37f4:	1e c0       	rjmp	.+60     	; 0x3832 <MDIO_voidSetPortVal+0x76>
    37f6:	2b 81       	ldd	r18, Y+3	; 0x03
    37f8:	3c 81       	ldd	r19, Y+4	; 0x04
    37fa:	23 30       	cpi	r18, 0x03	; 3
    37fc:	31 05       	cpc	r19, r1
    37fe:	81 f0       	breq	.+32     	; 0x3820 <MDIO_voidSetPortVal+0x64>
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	9c 81       	ldd	r25, Y+4	; 0x04
    3804:	84 30       	cpi	r24, 0x04	; 4
    3806:	91 05       	cpc	r25, r1
    3808:	81 f0       	breq	.+32     	; 0x382a <MDIO_voidSetPortVal+0x6e>
    380a:	13 c0       	rjmp	.+38     	; 0x3832 <MDIO_voidSetPortVal+0x76>
		{
		case DIO_PORTA : PORTA = A_u8PortVal  ; break ;
    380c:	eb e3       	ldi	r30, 0x3B	; 59
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	8a 81       	ldd	r24, Y+2	; 0x02
    3812:	80 83       	st	Z, r24
    3814:	0e c0       	rjmp	.+28     	; 0x3832 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTB : PORTB = A_u8PortVal  ; break ;
    3816:	e8 e3       	ldi	r30, 0x38	; 56
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	8a 81       	ldd	r24, Y+2	; 0x02
    381c:	80 83       	st	Z, r24
    381e:	09 c0       	rjmp	.+18     	; 0x3832 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTC : PORTC = A_u8PortVal  ; break ;
    3820:	e5 e3       	ldi	r30, 0x35	; 53
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	8a 81       	ldd	r24, Y+2	; 0x02
    3826:	80 83       	st	Z, r24
    3828:	04 c0       	rjmp	.+8      	; 0x3832 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTD : PORTD = A_u8PortVal  ; break ;
    382a:	e2 e3       	ldi	r30, 0x32	; 50
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	8a 81       	ldd	r24, Y+2	; 0x02
    3830:	80 83       	st	Z, r24
		default : /**Error*/ break ;
		}
}
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <MDIO_voidSetPortDir>:

void MDIO_voidSetPortDir (u8 A_u8PortNo , u8 A_u8PortVal)
{
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	00 d0       	rcall	.+0      	; 0x3846 <MDIO_voidSetPortDir+0x6>
    3846:	00 d0       	rcall	.+0      	; 0x3848 <MDIO_voidSetPortDir+0x8>
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    384c:	89 83       	std	Y+1, r24	; 0x01
    384e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	28 2f       	mov	r18, r24
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	3c 83       	std	Y+4, r19	; 0x04
    3858:	2b 83       	std	Y+3, r18	; 0x03
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	82 30       	cpi	r24, 0x02	; 2
    3860:	91 05       	cpc	r25, r1
    3862:	d9 f0       	breq	.+54     	; 0x389a <MDIO_voidSetPortDir+0x5a>
    3864:	2b 81       	ldd	r18, Y+3	; 0x03
    3866:	3c 81       	ldd	r19, Y+4	; 0x04
    3868:	23 30       	cpi	r18, 0x03	; 3
    386a:	31 05       	cpc	r19, r1
    386c:	34 f4       	brge	.+12     	; 0x387a <MDIO_voidSetPortDir+0x3a>
    386e:	8b 81       	ldd	r24, Y+3	; 0x03
    3870:	9c 81       	ldd	r25, Y+4	; 0x04
    3872:	81 30       	cpi	r24, 0x01	; 1
    3874:	91 05       	cpc	r25, r1
    3876:	61 f0       	breq	.+24     	; 0x3890 <MDIO_voidSetPortDir+0x50>
    3878:	1e c0       	rjmp	.+60     	; 0x38b6 <MDIO_voidSetPortDir+0x76>
    387a:	2b 81       	ldd	r18, Y+3	; 0x03
    387c:	3c 81       	ldd	r19, Y+4	; 0x04
    387e:	23 30       	cpi	r18, 0x03	; 3
    3880:	31 05       	cpc	r19, r1
    3882:	81 f0       	breq	.+32     	; 0x38a4 <MDIO_voidSetPortDir+0x64>
    3884:	8b 81       	ldd	r24, Y+3	; 0x03
    3886:	9c 81       	ldd	r25, Y+4	; 0x04
    3888:	84 30       	cpi	r24, 0x04	; 4
    388a:	91 05       	cpc	r25, r1
    388c:	81 f0       	breq	.+32     	; 0x38ae <MDIO_voidSetPortDir+0x6e>
    388e:	13 c0       	rjmp	.+38     	; 0x38b6 <MDIO_voidSetPortDir+0x76>
		{
		case DIO_PORTA : DDRA = A_u8PortVal  ; break ;
    3890:	ea e3       	ldi	r30, 0x3A	; 58
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	8a 81       	ldd	r24, Y+2	; 0x02
    3896:	80 83       	st	Z, r24
    3898:	0e c0       	rjmp	.+28     	; 0x38b6 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTB : DDRB = A_u8PortVal  ; break ;
    389a:	e7 e3       	ldi	r30, 0x37	; 55
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	80 83       	st	Z, r24
    38a2:	09 c0       	rjmp	.+18     	; 0x38b6 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTC : DDRC = A_u8PortVal  ; break ;
    38a4:	e4 e3       	ldi	r30, 0x34	; 52
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	8a 81       	ldd	r24, Y+2	; 0x02
    38aa:	80 83       	st	Z, r24
    38ac:	04 c0       	rjmp	.+8      	; 0x38b6 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTD : DDRD = A_u8PortVal  ; break ;
    38ae:	e1 e3       	ldi	r30, 0x31	; 49
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	80 83       	st	Z, r24
		default : /**Error*/ break ;
		}
}
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	cf 91       	pop	r28
    38c0:	df 91       	pop	r29
    38c2:	08 95       	ret

000038c4 <MDIO_u8GetPortVal>:

u8   MDIO_u8GetPortVal   (u8 A_u8PortNo)
{
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	00 d0       	rcall	.+0      	; 0x38ca <MDIO_u8GetPortVal+0x6>
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <MDIO_u8GetPortVal+0x8>
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
    38d2:	8a 81       	ldd	r24, Y+2	; 0x02
    38d4:	28 2f       	mov	r18, r24
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	3c 83       	std	Y+4, r19	; 0x04
    38da:	2b 83       	std	Y+3, r18	; 0x03
    38dc:	8b 81       	ldd	r24, Y+3	; 0x03
    38de:	9c 81       	ldd	r25, Y+4	; 0x04
    38e0:	82 30       	cpi	r24, 0x02	; 2
    38e2:	91 05       	cpc	r25, r1
    38e4:	d9 f0       	breq	.+54     	; 0x391c <MDIO_u8GetPortVal+0x58>
    38e6:	2b 81       	ldd	r18, Y+3	; 0x03
    38e8:	3c 81       	ldd	r19, Y+4	; 0x04
    38ea:	23 30       	cpi	r18, 0x03	; 3
    38ec:	31 05       	cpc	r19, r1
    38ee:	34 f4       	brge	.+12     	; 0x38fc <MDIO_u8GetPortVal+0x38>
    38f0:	8b 81       	ldd	r24, Y+3	; 0x03
    38f2:	9c 81       	ldd	r25, Y+4	; 0x04
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	91 05       	cpc	r25, r1
    38f8:	61 f0       	breq	.+24     	; 0x3912 <MDIO_u8GetPortVal+0x4e>
    38fa:	1e c0       	rjmp	.+60     	; 0x3938 <MDIO_u8GetPortVal+0x74>
    38fc:	2b 81       	ldd	r18, Y+3	; 0x03
    38fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3900:	23 30       	cpi	r18, 0x03	; 3
    3902:	31 05       	cpc	r19, r1
    3904:	81 f0       	breq	.+32     	; 0x3926 <MDIO_u8GetPortVal+0x62>
    3906:	8b 81       	ldd	r24, Y+3	; 0x03
    3908:	9c 81       	ldd	r25, Y+4	; 0x04
    390a:	84 30       	cpi	r24, 0x04	; 4
    390c:	91 05       	cpc	r25, r1
    390e:	81 f0       	breq	.+32     	; 0x3930 <MDIO_u8GetPortVal+0x6c>
    3910:	13 c0       	rjmp	.+38     	; 0x3938 <MDIO_u8GetPortVal+0x74>
		{
		case DIO_PORTA : L_u8PinVal = PINA ; break ;
    3912:	e9 e3       	ldi	r30, 0x39	; 57
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	89 83       	std	Y+1, r24	; 0x01
    391a:	0e c0       	rjmp	.+28     	; 0x3938 <MDIO_u8GetPortVal+0x74>
		case DIO_PORTB : L_u8PinVal = PINB ; break ;
    391c:	e6 e3       	ldi	r30, 0x36	; 54
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	89 83       	std	Y+1, r24	; 0x01
    3924:	09 c0       	rjmp	.+18     	; 0x3938 <MDIO_u8GetPortVal+0x74>
		case DIO_PORTC : L_u8PinVal = PINC ; break ;
    3926:	e3 e3       	ldi	r30, 0x33	; 51
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	80 81       	ld	r24, Z
    392c:	89 83       	std	Y+1, r24	; 0x01
    392e:	04 c0       	rjmp	.+8      	; 0x3938 <MDIO_u8GetPortVal+0x74>
		case DIO_PORTD : L_u8PinVal = PIND ; break ;
    3930:	e0 e3       	ldi	r30, 0x30	; 48
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	89 83       	std	Y+1, r24	; 0x01
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
    3938:	89 81       	ldd	r24, Y+1	; 0x01
}
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	08 95       	ret

00003948 <MDIO_voidClrPinVal>:

void MDIO_voidClrPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    3948:	df 93       	push	r29
    394a:	cf 93       	push	r28
    394c:	00 d0       	rcall	.+0      	; 0x394e <MDIO_voidClrPinVal+0x6>
    394e:	00 d0       	rcall	.+0      	; 0x3950 <MDIO_voidClrPinVal+0x8>
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	89 83       	std	Y+1, r24	; 0x01
    3956:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	28 2f       	mov	r18, r24
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	3c 83       	std	Y+4, r19	; 0x04
    3960:	2b 83       	std	Y+3, r18	; 0x03
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	9c 81       	ldd	r25, Y+4	; 0x04
    3966:	82 30       	cpi	r24, 0x02	; 2
    3968:	91 05       	cpc	r25, r1
    396a:	61 f1       	breq	.+88     	; 0x39c4 <MDIO_voidClrPinVal+0x7c>
    396c:	2b 81       	ldd	r18, Y+3	; 0x03
    396e:	3c 81       	ldd	r19, Y+4	; 0x04
    3970:	23 30       	cpi	r18, 0x03	; 3
    3972:	31 05       	cpc	r19, r1
    3974:	34 f4       	brge	.+12     	; 0x3982 <MDIO_voidClrPinVal+0x3a>
    3976:	8b 81       	ldd	r24, Y+3	; 0x03
    3978:	9c 81       	ldd	r25, Y+4	; 0x04
    397a:	81 30       	cpi	r24, 0x01	; 1
    397c:	91 05       	cpc	r25, r1
    397e:	69 f0       	breq	.+26     	; 0x399a <MDIO_voidClrPinVal+0x52>
    3980:	5f c0       	rjmp	.+190    	; 0x3a40 <MDIO_voidClrPinVal+0xf8>
    3982:	2b 81       	ldd	r18, Y+3	; 0x03
    3984:	3c 81       	ldd	r19, Y+4	; 0x04
    3986:	23 30       	cpi	r18, 0x03	; 3
    3988:	31 05       	cpc	r19, r1
    398a:	89 f1       	breq	.+98     	; 0x39ee <MDIO_voidClrPinVal+0xa6>
    398c:	8b 81       	ldd	r24, Y+3	; 0x03
    398e:	9c 81       	ldd	r25, Y+4	; 0x04
    3990:	84 30       	cpi	r24, 0x04	; 4
    3992:	91 05       	cpc	r25, r1
    3994:	09 f4       	brne	.+2      	; 0x3998 <MDIO_voidClrPinVal+0x50>
    3996:	40 c0       	rjmp	.+128    	; 0x3a18 <MDIO_voidClrPinVal+0xd0>
    3998:	53 c0       	rjmp	.+166    	; 0x3a40 <MDIO_voidClrPinVal+0xf8>
		{
		case DIO_PORTA : CLR_BIT(PORTA , A_u8PinNo) ; break ;
    399a:	ab e3       	ldi	r26, 0x3B	; 59
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	eb e3       	ldi	r30, 0x3B	; 59
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	48 2f       	mov	r20, r24
    39a6:	8a 81       	ldd	r24, Y+2	; 0x02
    39a8:	28 2f       	mov	r18, r24
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	02 2e       	mov	r0, r18
    39b2:	02 c0       	rjmp	.+4      	; 0x39b8 <MDIO_voidClrPinVal+0x70>
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	0a 94       	dec	r0
    39ba:	e2 f7       	brpl	.-8      	; 0x39b4 <MDIO_voidClrPinVal+0x6c>
    39bc:	80 95       	com	r24
    39be:	84 23       	and	r24, r20
    39c0:	8c 93       	st	X, r24
    39c2:	3e c0       	rjmp	.+124    	; 0x3a40 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTB : CLR_BIT(PORTB , A_u8PinNo) ; break ;
    39c4:	a8 e3       	ldi	r26, 0x38	; 56
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	e8 e3       	ldi	r30, 0x38	; 56
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	48 2f       	mov	r20, r24
    39d0:	8a 81       	ldd	r24, Y+2	; 0x02
    39d2:	28 2f       	mov	r18, r24
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	02 2e       	mov	r0, r18
    39dc:	02 c0       	rjmp	.+4      	; 0x39e2 <MDIO_voidClrPinVal+0x9a>
    39de:	88 0f       	add	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	0a 94       	dec	r0
    39e4:	e2 f7       	brpl	.-8      	; 0x39de <MDIO_voidClrPinVal+0x96>
    39e6:	80 95       	com	r24
    39e8:	84 23       	and	r24, r20
    39ea:	8c 93       	st	X, r24
    39ec:	29 c0       	rjmp	.+82     	; 0x3a40 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTC : CLR_BIT(PORTC , A_u8PinNo) ; break ;
    39ee:	a5 e3       	ldi	r26, 0x35	; 53
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	e5 e3       	ldi	r30, 0x35	; 53
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	48 2f       	mov	r20, r24
    39fa:	8a 81       	ldd	r24, Y+2	; 0x02
    39fc:	28 2f       	mov	r18, r24
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	02 2e       	mov	r0, r18
    3a06:	02 c0       	rjmp	.+4      	; 0x3a0c <MDIO_voidClrPinVal+0xc4>
    3a08:	88 0f       	add	r24, r24
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	0a 94       	dec	r0
    3a0e:	e2 f7       	brpl	.-8      	; 0x3a08 <MDIO_voidClrPinVal+0xc0>
    3a10:	80 95       	com	r24
    3a12:	84 23       	and	r24, r20
    3a14:	8c 93       	st	X, r24
    3a16:	14 c0       	rjmp	.+40     	; 0x3a40 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTD : CLR_BIT(PORTD , A_u8PinNo) ; break ;
    3a18:	a2 e3       	ldi	r26, 0x32	; 50
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	e2 e3       	ldi	r30, 0x32	; 50
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 81       	ld	r24, Z
    3a22:	48 2f       	mov	r20, r24
    3a24:	8a 81       	ldd	r24, Y+2	; 0x02
    3a26:	28 2f       	mov	r18, r24
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	02 2e       	mov	r0, r18
    3a30:	02 c0       	rjmp	.+4      	; 0x3a36 <MDIO_voidClrPinVal+0xee>
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	0a 94       	dec	r0
    3a38:	e2 f7       	brpl	.-8      	; 0x3a32 <MDIO_voidClrPinVal+0xea>
    3a3a:	80 95       	com	r24
    3a3c:	84 23       	and	r24, r20
    3a3e:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	0f 90       	pop	r0
    3a48:	cf 91       	pop	r28
    3a4a:	df 91       	pop	r29
    3a4c:	08 95       	ret

00003a4e <MDIO_voidClrPort>:

void MDIO_voidClrPort (u8 A_u8PortNo)
{
    3a4e:	df 93       	push	r29
    3a50:	cf 93       	push	r28
    3a52:	00 d0       	rcall	.+0      	; 0x3a54 <MDIO_voidClrPort+0x6>
    3a54:	0f 92       	push	r0
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	28 2f       	mov	r18, r24
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	3b 83       	std	Y+3, r19	; 0x03
    3a64:	2a 83       	std	Y+2, r18	; 0x02
    3a66:	8a 81       	ldd	r24, Y+2	; 0x02
    3a68:	9b 81       	ldd	r25, Y+3	; 0x03
    3a6a:	82 30       	cpi	r24, 0x02	; 2
    3a6c:	91 05       	cpc	r25, r1
    3a6e:	d1 f0       	breq	.+52     	; 0x3aa4 <MDIO_voidClrPort+0x56>
    3a70:	2a 81       	ldd	r18, Y+2	; 0x02
    3a72:	3b 81       	ldd	r19, Y+3	; 0x03
    3a74:	23 30       	cpi	r18, 0x03	; 3
    3a76:	31 05       	cpc	r19, r1
    3a78:	34 f4       	brge	.+12     	; 0x3a86 <MDIO_voidClrPort+0x38>
    3a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7e:	81 30       	cpi	r24, 0x01	; 1
    3a80:	91 05       	cpc	r25, r1
    3a82:	61 f0       	breq	.+24     	; 0x3a9c <MDIO_voidClrPort+0x4e>
    3a84:	1a c0       	rjmp	.+52     	; 0x3aba <MDIO_voidClrPort+0x6c>
    3a86:	2a 81       	ldd	r18, Y+2	; 0x02
    3a88:	3b 81       	ldd	r19, Y+3	; 0x03
    3a8a:	23 30       	cpi	r18, 0x03	; 3
    3a8c:	31 05       	cpc	r19, r1
    3a8e:	71 f0       	breq	.+28     	; 0x3aac <MDIO_voidClrPort+0x5e>
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
    3a92:	9b 81       	ldd	r25, Y+3	; 0x03
    3a94:	84 30       	cpi	r24, 0x04	; 4
    3a96:	91 05       	cpc	r25, r1
    3a98:	69 f0       	breq	.+26     	; 0x3ab4 <MDIO_voidClrPort+0x66>
    3a9a:	0f c0       	rjmp	.+30     	; 0x3aba <MDIO_voidClrPort+0x6c>
		{
		case DIO_PORTA : PORTA = ALL_PINS_ZERO ; break ;
    3a9c:	eb e3       	ldi	r30, 0x3B	; 59
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	10 82       	st	Z, r1
    3aa2:	0b c0       	rjmp	.+22     	; 0x3aba <MDIO_voidClrPort+0x6c>
		case DIO_PORTB : PORTB = ALL_PINS_ZERO ; break ;
    3aa4:	e8 e3       	ldi	r30, 0x38	; 56
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	10 82       	st	Z, r1
    3aaa:	07 c0       	rjmp	.+14     	; 0x3aba <MDIO_voidClrPort+0x6c>
		case DIO_PORTC : PORTC = ALL_PINS_ZERO ; break ;
    3aac:	e5 e3       	ldi	r30, 0x35	; 53
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	10 82       	st	Z, r1
    3ab2:	03 c0       	rjmp	.+6      	; 0x3aba <MDIO_voidClrPort+0x6c>
		case DIO_PORTD : PORTD = ALL_PINS_ZERO ; break ;
    3ab4:	e2 e3       	ldi	r30, 0x32	; 50
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	10 82       	st	Z, r1
		default : /**Error*/ break ;
		}
}
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	08 95       	ret

00003ac6 <MDIO_voidTogPinVal>:

void MDIO_voidTogPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    3ac6:	df 93       	push	r29
    3ac8:	cf 93       	push	r28
    3aca:	00 d0       	rcall	.+0      	; 0x3acc <MDIO_voidTogPinVal+0x6>
    3acc:	00 d0       	rcall	.+0      	; 0x3ace <MDIO_voidTogPinVal+0x8>
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	89 83       	std	Y+1, r24	; 0x01
    3ad4:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
    3ad8:	28 2f       	mov	r18, r24
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	3c 83       	std	Y+4, r19	; 0x04
    3ade:	2b 83       	std	Y+3, r18	; 0x03
    3ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae4:	82 30       	cpi	r24, 0x02	; 2
    3ae6:	91 05       	cpc	r25, r1
    3ae8:	51 f1       	breq	.+84     	; 0x3b3e <MDIO_voidTogPinVal+0x78>
    3aea:	2b 81       	ldd	r18, Y+3	; 0x03
    3aec:	3c 81       	ldd	r19, Y+4	; 0x04
    3aee:	23 30       	cpi	r18, 0x03	; 3
    3af0:	31 05       	cpc	r19, r1
    3af2:	34 f4       	brge	.+12     	; 0x3b00 <MDIO_voidTogPinVal+0x3a>
    3af4:	8b 81       	ldd	r24, Y+3	; 0x03
    3af6:	9c 81       	ldd	r25, Y+4	; 0x04
    3af8:	81 30       	cpi	r24, 0x01	; 1
    3afa:	91 05       	cpc	r25, r1
    3afc:	61 f0       	breq	.+24     	; 0x3b16 <MDIO_voidTogPinVal+0x50>
    3afe:	5a c0       	rjmp	.+180    	; 0x3bb4 <MDIO_voidTogPinVal+0xee>
    3b00:	2b 81       	ldd	r18, Y+3	; 0x03
    3b02:	3c 81       	ldd	r19, Y+4	; 0x04
    3b04:	23 30       	cpi	r18, 0x03	; 3
    3b06:	31 05       	cpc	r19, r1
    3b08:	71 f1       	breq	.+92     	; 0x3b66 <MDIO_voidTogPinVal+0xa0>
    3b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b0e:	84 30       	cpi	r24, 0x04	; 4
    3b10:	91 05       	cpc	r25, r1
    3b12:	e9 f1       	breq	.+122    	; 0x3b8e <MDIO_voidTogPinVal+0xc8>
    3b14:	4f c0       	rjmp	.+158    	; 0x3bb4 <MDIO_voidTogPinVal+0xee>
		{
		case DIO_PORTA : TOG_BIT(PORTA , A_u8PinNo) ; break ;
    3b16:	ab e3       	ldi	r26, 0x3B	; 59
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	eb e3       	ldi	r30, 0x3B	; 59
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	80 81       	ld	r24, Z
    3b20:	48 2f       	mov	r20, r24
    3b22:	8a 81       	ldd	r24, Y+2	; 0x02
    3b24:	28 2f       	mov	r18, r24
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	02 2e       	mov	r0, r18
    3b2e:	02 c0       	rjmp	.+4      	; 0x3b34 <MDIO_voidTogPinVal+0x6e>
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	0a 94       	dec	r0
    3b36:	e2 f7       	brpl	.-8      	; 0x3b30 <MDIO_voidTogPinVal+0x6a>
    3b38:	84 27       	eor	r24, r20
    3b3a:	8c 93       	st	X, r24
    3b3c:	3b c0       	rjmp	.+118    	; 0x3bb4 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTB : TOG_BIT(PORTB , A_u8PinNo) ; break ;
    3b3e:	a8 e3       	ldi	r26, 0x38	; 56
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e8 e3       	ldi	r30, 0x38	; 56
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	48 2f       	mov	r20, r24
    3b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4c:	28 2f       	mov	r18, r24
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	02 2e       	mov	r0, r18
    3b56:	02 c0       	rjmp	.+4      	; 0x3b5c <MDIO_voidTogPinVal+0x96>
    3b58:	88 0f       	add	r24, r24
    3b5a:	99 1f       	adc	r25, r25
    3b5c:	0a 94       	dec	r0
    3b5e:	e2 f7       	brpl	.-8      	; 0x3b58 <MDIO_voidTogPinVal+0x92>
    3b60:	84 27       	eor	r24, r20
    3b62:	8c 93       	st	X, r24
    3b64:	27 c0       	rjmp	.+78     	; 0x3bb4 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTC : TOG_BIT(PORTC , A_u8PinNo) ; break ;
    3b66:	a5 e3       	ldi	r26, 0x35	; 53
    3b68:	b0 e0       	ldi	r27, 0x00	; 0
    3b6a:	e5 e3       	ldi	r30, 0x35	; 53
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	80 81       	ld	r24, Z
    3b70:	48 2f       	mov	r20, r24
    3b72:	8a 81       	ldd	r24, Y+2	; 0x02
    3b74:	28 2f       	mov	r18, r24
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	02 2e       	mov	r0, r18
    3b7e:	02 c0       	rjmp	.+4      	; 0x3b84 <MDIO_voidTogPinVal+0xbe>
    3b80:	88 0f       	add	r24, r24
    3b82:	99 1f       	adc	r25, r25
    3b84:	0a 94       	dec	r0
    3b86:	e2 f7       	brpl	.-8      	; 0x3b80 <MDIO_voidTogPinVal+0xba>
    3b88:	84 27       	eor	r24, r20
    3b8a:	8c 93       	st	X, r24
    3b8c:	13 c0       	rjmp	.+38     	; 0x3bb4 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTD : TOG_BIT(PORTD , A_u8PinNo) ; break ;
    3b8e:	a2 e3       	ldi	r26, 0x32	; 50
    3b90:	b0 e0       	ldi	r27, 0x00	; 0
    3b92:	e2 e3       	ldi	r30, 0x32	; 50
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	80 81       	ld	r24, Z
    3b98:	48 2f       	mov	r20, r24
    3b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9c:	28 2f       	mov	r18, r24
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	02 2e       	mov	r0, r18
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <MDIO_voidTogPinVal+0xe6>
    3ba8:	88 0f       	add	r24, r24
    3baa:	99 1f       	adc	r25, r25
    3bac:	0a 94       	dec	r0
    3bae:	e2 f7       	brpl	.-8      	; 0x3ba8 <MDIO_voidTogPinVal+0xe2>
    3bb0:	84 27       	eor	r24, r20
    3bb2:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	cf 91       	pop	r28
    3bbe:	df 91       	pop	r29
    3bc0:	08 95       	ret

00003bc2 <MDIO_voidTogPort>:

void MDIO_voidTogPort (u8 A_u8PortNo)
{
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	00 d0       	rcall	.+0      	; 0x3bc8 <MDIO_voidTogPort+0x6>
    3bc8:	0f 92       	push	r0
    3bca:	cd b7       	in	r28, 0x3d	; 61
    3bcc:	de b7       	in	r29, 0x3e	; 62
    3bce:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	28 2f       	mov	r18, r24
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	3b 83       	std	Y+3, r19	; 0x03
    3bd8:	2a 83       	std	Y+2, r18	; 0x02
    3bda:	8a 81       	ldd	r24, Y+2	; 0x02
    3bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bde:	82 30       	cpi	r24, 0x02	; 2
    3be0:	91 05       	cpc	r25, r1
    3be2:	f1 f0       	breq	.+60     	; 0x3c20 <MDIO_voidTogPort+0x5e>
    3be4:	2a 81       	ldd	r18, Y+2	; 0x02
    3be6:	3b 81       	ldd	r19, Y+3	; 0x03
    3be8:	23 30       	cpi	r18, 0x03	; 3
    3bea:	31 05       	cpc	r19, r1
    3bec:	34 f4       	brge	.+12     	; 0x3bfa <MDIO_voidTogPort+0x38>
    3bee:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf2:	81 30       	cpi	r24, 0x01	; 1
    3bf4:	91 05       	cpc	r25, r1
    3bf6:	61 f0       	breq	.+24     	; 0x3c10 <MDIO_voidTogPort+0x4e>
    3bf8:	2a c0       	rjmp	.+84     	; 0x3c4e <MDIO_voidTogPort+0x8c>
    3bfa:	2a 81       	ldd	r18, Y+2	; 0x02
    3bfc:	3b 81       	ldd	r19, Y+3	; 0x03
    3bfe:	23 30       	cpi	r18, 0x03	; 3
    3c00:	31 05       	cpc	r19, r1
    3c02:	b1 f0       	breq	.+44     	; 0x3c30 <MDIO_voidTogPort+0x6e>
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	9b 81       	ldd	r25, Y+3	; 0x03
    3c08:	84 30       	cpi	r24, 0x04	; 4
    3c0a:	91 05       	cpc	r25, r1
    3c0c:	c9 f0       	breq	.+50     	; 0x3c40 <MDIO_voidTogPort+0x7e>
    3c0e:	1f c0       	rjmp	.+62     	; 0x3c4e <MDIO_voidTogPort+0x8c>
		{
		case DIO_PORTA : PORTA = ~PORTA ; break ;
    3c10:	ab e3       	ldi	r26, 0x3B	; 59
    3c12:	b0 e0       	ldi	r27, 0x00	; 0
    3c14:	eb e3       	ldi	r30, 0x3B	; 59
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	80 81       	ld	r24, Z
    3c1a:	80 95       	com	r24
    3c1c:	8c 93       	st	X, r24
    3c1e:	17 c0       	rjmp	.+46     	; 0x3c4e <MDIO_voidTogPort+0x8c>
		case DIO_PORTB : PORTB = ~PORTB ; break ;
    3c20:	a8 e3       	ldi	r26, 0x38	; 56
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	e8 e3       	ldi	r30, 0x38	; 56
    3c26:	f0 e0       	ldi	r31, 0x00	; 0
    3c28:	80 81       	ld	r24, Z
    3c2a:	80 95       	com	r24
    3c2c:	8c 93       	st	X, r24
    3c2e:	0f c0       	rjmp	.+30     	; 0x3c4e <MDIO_voidTogPort+0x8c>
		case DIO_PORTC : PORTC = ~PORTC ; break ;
    3c30:	a5 e3       	ldi	r26, 0x35	; 53
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	e5 e3       	ldi	r30, 0x35	; 53
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	80 81       	ld	r24, Z
    3c3a:	80 95       	com	r24
    3c3c:	8c 93       	st	X, r24
    3c3e:	07 c0       	rjmp	.+14     	; 0x3c4e <MDIO_voidTogPort+0x8c>
		case DIO_PORTD : PORTD = ~PORTD ; break ;
    3c40:	a2 e3       	ldi	r26, 0x32	; 50
    3c42:	b0 e0       	ldi	r27, 0x00	; 0
    3c44:	e2 e3       	ldi	r30, 0x32	; 50
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	80 81       	ld	r24, Z
    3c4a:	80 95       	com	r24
    3c4c:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	cf 91       	pop	r28
    3c56:	df 91       	pop	r29
    3c58:	08 95       	ret

00003c5a <MDIO_voidWriteLowNibble>:

void MDIO_voidWriteLowNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
    3c5a:	df 93       	push	r29
    3c5c:	cf 93       	push	r28
    3c5e:	00 d0       	rcall	.+0      	; 0x3c60 <MDIO_voidWriteLowNibble+0x6>
    3c60:	00 d0       	rcall	.+0      	; 0x3c62 <MDIO_voidWriteLowNibble+0x8>
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
    3c66:	89 83       	std	Y+1, r24	; 0x01
    3c68:	6a 83       	std	Y+2, r22	; 0x02
	A_u8PortVal = A_u8PortVal & LOW_NIBBLE_OUTPUT ;
    3c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6c:	8f 70       	andi	r24, 0x0F	; 15
    3c6e:	8a 83       	std	Y+2, r24	; 0x02
	switch (A_u8PortNo)
    3c70:	89 81       	ldd	r24, Y+1	; 0x01
    3c72:	28 2f       	mov	r18, r24
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	3c 83       	std	Y+4, r19	; 0x04
    3c78:	2b 83       	std	Y+3, r18	; 0x03
    3c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7e:	82 30       	cpi	r24, 0x02	; 2
    3c80:	91 05       	cpc	r25, r1
    3c82:	31 f1       	breq	.+76     	; 0x3cd0 <MDIO_voidWriteLowNibble+0x76>
    3c84:	2b 81       	ldd	r18, Y+3	; 0x03
    3c86:	3c 81       	ldd	r19, Y+4	; 0x04
    3c88:	23 30       	cpi	r18, 0x03	; 3
    3c8a:	31 05       	cpc	r19, r1
    3c8c:	34 f4       	brge	.+12     	; 0x3c9a <MDIO_voidWriteLowNibble+0x40>
    3c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c90:	9c 81       	ldd	r25, Y+4	; 0x04
    3c92:	81 30       	cpi	r24, 0x01	; 1
    3c94:	91 05       	cpc	r25, r1
    3c96:	61 f0       	breq	.+24     	; 0x3cb0 <MDIO_voidWriteLowNibble+0x56>
    3c98:	4a c0       	rjmp	.+148    	; 0x3d2e <MDIO_voidWriteLowNibble+0xd4>
    3c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c9e:	23 30       	cpi	r18, 0x03	; 3
    3ca0:	31 05       	cpc	r19, r1
    3ca2:	31 f1       	breq	.+76     	; 0x3cf0 <MDIO_voidWriteLowNibble+0x96>
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca8:	84 30       	cpi	r24, 0x04	; 4
    3caa:	91 05       	cpc	r25, r1
    3cac:	89 f1       	breq	.+98     	; 0x3d10 <MDIO_voidWriteLowNibble+0xb6>
    3cae:	3f c0       	rjmp	.+126    	; 0x3d2e <MDIO_voidWriteLowNibble+0xd4>
		{
		case DIO_PORTA : PORTA = PORTA & HIGH_NIBBLE_OUTPUT ;
    3cb0:	ab e3       	ldi	r26, 0x3B	; 59
    3cb2:	b0 e0       	ldi	r27, 0x00	; 0
    3cb4:	eb e3       	ldi	r30, 0x3B	; 59
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	80 81       	ld	r24, Z
    3cba:	80 7f       	andi	r24, 0xF0	; 240
    3cbc:	8c 93       	st	X, r24
						 PORTA = PORTA | A_u8PortVal        ;
    3cbe:	ab e3       	ldi	r26, 0x3B	; 59
    3cc0:	b0 e0       	ldi	r27, 0x00	; 0
    3cc2:	eb e3       	ldi	r30, 0x3B	; 59
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	90 81       	ld	r25, Z
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cca:	89 2b       	or	r24, r25
    3ccc:	8c 93       	st	X, r24
    3cce:	2f c0       	rjmp	.+94     	; 0x3d2e <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTB : PORTB = PORTB & HIGH_NIBBLE_OUTPUT ;
    3cd0:	a8 e3       	ldi	r26, 0x38	; 56
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	e8 e3       	ldi	r30, 0x38	; 56
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	80 81       	ld	r24, Z
    3cda:	80 7f       	andi	r24, 0xF0	; 240
    3cdc:	8c 93       	st	X, r24
						 PORTB = PORTB | A_u8PortVal        ;		
    3cde:	a8 e3       	ldi	r26, 0x38	; 56
    3ce0:	b0 e0       	ldi	r27, 0x00	; 0
    3ce2:	e8 e3       	ldi	r30, 0x38	; 56
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	90 81       	ld	r25, Z
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	89 2b       	or	r24, r25
    3cec:	8c 93       	st	X, r24
    3cee:	1f c0       	rjmp	.+62     	; 0x3d2e <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTC : PORTC = PORTC & HIGH_NIBBLE_OUTPUT ; 
    3cf0:	a5 e3       	ldi	r26, 0x35	; 53
    3cf2:	b0 e0       	ldi	r27, 0x00	; 0
    3cf4:	e5 e3       	ldi	r30, 0x35	; 53
    3cf6:	f0 e0       	ldi	r31, 0x00	; 0
    3cf8:	80 81       	ld	r24, Z
    3cfa:	80 7f       	andi	r24, 0xF0	; 240
    3cfc:	8c 93       	st	X, r24
						 PORTC = PORTC | A_u8PortVal        ;		
    3cfe:	a5 e3       	ldi	r26, 0x35	; 53
    3d00:	b0 e0       	ldi	r27, 0x00	; 0
    3d02:	e5 e3       	ldi	r30, 0x35	; 53
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	90 81       	ld	r25, Z
    3d08:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0a:	89 2b       	or	r24, r25
    3d0c:	8c 93       	st	X, r24
    3d0e:	0f c0       	rjmp	.+30     	; 0x3d2e <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTD : PORTD = PORTD & HIGH_NIBBLE_OUTPUT ;
    3d10:	a2 e3       	ldi	r26, 0x32	; 50
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	e2 e3       	ldi	r30, 0x32	; 50
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	80 81       	ld	r24, Z
    3d1a:	80 7f       	andi	r24, 0xF0	; 240
    3d1c:	8c 93       	st	X, r24
						 PORTD = PORTD | A_u8PortVal        ;		
    3d1e:	a2 e3       	ldi	r26, 0x32	; 50
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	e2 e3       	ldi	r30, 0x32	; 50
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	90 81       	ld	r25, Z
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	89 2b       	or	r24, r25
    3d2c:	8c 93       	st	X, r24
		                 break ;
		default : /**Error*/ break ;
		}
}
    3d2e:	0f 90       	pop	r0
    3d30:	0f 90       	pop	r0
    3d32:	0f 90       	pop	r0
    3d34:	0f 90       	pop	r0
    3d36:	cf 91       	pop	r28
    3d38:	df 91       	pop	r29
    3d3a:	08 95       	ret

00003d3c <MDIO_voidWriteHighNibble>:

void MDIO_voidWriteHighNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
    3d3c:	df 93       	push	r29
    3d3e:	cf 93       	push	r28
    3d40:	00 d0       	rcall	.+0      	; 0x3d42 <MDIO_voidWriteHighNibble+0x6>
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <MDIO_voidWriteHighNibble+0x8>
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
    3d48:	89 83       	std	Y+1, r24	; 0x01
    3d4a:	6a 83       	std	Y+2, r22	; 0x02
	A_u8PortVal = A_u8PortVal << FOUR_BITS ;
    3d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4e:	82 95       	swap	r24
    3d50:	80 7f       	andi	r24, 0xF0	; 240
    3d52:	8a 83       	std	Y+2, r24	; 0x02
	switch (A_u8PortNo)
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	28 2f       	mov	r18, r24
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	3c 83       	std	Y+4, r19	; 0x04
    3d5c:	2b 83       	std	Y+3, r18	; 0x03
    3d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d60:	9c 81       	ldd	r25, Y+4	; 0x04
    3d62:	82 30       	cpi	r24, 0x02	; 2
    3d64:	91 05       	cpc	r25, r1
    3d66:	31 f1       	breq	.+76     	; 0x3db4 <MDIO_voidWriteHighNibble+0x78>
    3d68:	2b 81       	ldd	r18, Y+3	; 0x03
    3d6a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d6c:	23 30       	cpi	r18, 0x03	; 3
    3d6e:	31 05       	cpc	r19, r1
    3d70:	34 f4       	brge	.+12     	; 0x3d7e <MDIO_voidWriteHighNibble+0x42>
    3d72:	8b 81       	ldd	r24, Y+3	; 0x03
    3d74:	9c 81       	ldd	r25, Y+4	; 0x04
    3d76:	81 30       	cpi	r24, 0x01	; 1
    3d78:	91 05       	cpc	r25, r1
    3d7a:	61 f0       	breq	.+24     	; 0x3d94 <MDIO_voidWriteHighNibble+0x58>
    3d7c:	4a c0       	rjmp	.+148    	; 0x3e12 <MDIO_voidWriteHighNibble+0xd6>
    3d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3d80:	3c 81       	ldd	r19, Y+4	; 0x04
    3d82:	23 30       	cpi	r18, 0x03	; 3
    3d84:	31 05       	cpc	r19, r1
    3d86:	31 f1       	breq	.+76     	; 0x3dd4 <MDIO_voidWriteHighNibble+0x98>
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8c:	84 30       	cpi	r24, 0x04	; 4
    3d8e:	91 05       	cpc	r25, r1
    3d90:	89 f1       	breq	.+98     	; 0x3df4 <MDIO_voidWriteHighNibble+0xb8>
    3d92:	3f c0       	rjmp	.+126    	; 0x3e12 <MDIO_voidWriteHighNibble+0xd6>
		{
		case DIO_PORTA : PORTA = PORTA & LOW_NIBBLE_OUTPUT ; 
    3d94:	ab e3       	ldi	r26, 0x3B	; 59
    3d96:	b0 e0       	ldi	r27, 0x00	; 0
    3d98:	eb e3       	ldi	r30, 0x3B	; 59
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	80 81       	ld	r24, Z
    3d9e:	8f 70       	andi	r24, 0x0F	; 15
    3da0:	8c 93       	st	X, r24
						 PORTA = PORTA | A_u8PortVal       ;
    3da2:	ab e3       	ldi	r26, 0x3B	; 59
    3da4:	b0 e0       	ldi	r27, 0x00	; 0
    3da6:	eb e3       	ldi	r30, 0x3B	; 59
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	90 81       	ld	r25, Z
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	89 2b       	or	r24, r25
    3db0:	8c 93       	st	X, r24
    3db2:	2f c0       	rjmp	.+94     	; 0x3e12 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;                      
		case DIO_PORTB : PORTB = PORTB & LOW_NIBBLE_OUTPUT ; 
    3db4:	a8 e3       	ldi	r26, 0x38	; 56
    3db6:	b0 e0       	ldi	r27, 0x00	; 0
    3db8:	e8 e3       	ldi	r30, 0x38	; 56
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	80 81       	ld	r24, Z
    3dbe:	8f 70       	andi	r24, 0x0F	; 15
    3dc0:	8c 93       	st	X, r24
						 PORTB = PORTB | A_u8PortVal       ;
    3dc2:	a8 e3       	ldi	r26, 0x38	; 56
    3dc4:	b0 e0       	ldi	r27, 0x00	; 0
    3dc6:	e8 e3       	ldi	r30, 0x38	; 56
    3dc8:	f0 e0       	ldi	r31, 0x00	; 0
    3dca:	90 81       	ld	r25, Z
    3dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dce:	89 2b       	or	r24, r25
    3dd0:	8c 93       	st	X, r24
    3dd2:	1f c0       	rjmp	.+62     	; 0x3e12 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;               
		case DIO_PORTC : PORTC = PORTC & LOW_NIBBLE_OUTPUT ; 
    3dd4:	a5 e3       	ldi	r26, 0x35	; 53
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	e5 e3       	ldi	r30, 0x35	; 53
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	80 81       	ld	r24, Z
    3dde:	8f 70       	andi	r24, 0x0F	; 15
    3de0:	8c 93       	st	X, r24
						 PORTC = PORTC | A_u8PortVal       ;
    3de2:	a5 e3       	ldi	r26, 0x35	; 53
    3de4:	b0 e0       	ldi	r27, 0x00	; 0
    3de6:	e5 e3       	ldi	r30, 0x35	; 53
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	90 81       	ld	r25, Z
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	89 2b       	or	r24, r25
    3df0:	8c 93       	st	X, r24
    3df2:	0f c0       	rjmp	.+30     	; 0x3e12 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;                        
		case DIO_PORTD : PORTD = PORTD & LOW_NIBBLE_OUTPUT ;
    3df4:	a2 e3       	ldi	r26, 0x32	; 50
    3df6:	b0 e0       	ldi	r27, 0x00	; 0
    3df8:	e2 e3       	ldi	r30, 0x32	; 50
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	8f 70       	andi	r24, 0x0F	; 15
    3e00:	8c 93       	st	X, r24
						 PORTD = PORTD | A_u8PortVal       ;
    3e02:	a2 e3       	ldi	r26, 0x32	; 50
    3e04:	b0 e0       	ldi	r27, 0x00	; 0
    3e06:	e2 e3       	ldi	r30, 0x32	; 50
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	90 81       	ld	r25, Z
    3e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0e:	89 2b       	or	r24, r25
    3e10:	8c 93       	st	X, r24
		                 break ;
		default : /**Error*/ break ;
		}
}
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	cf 91       	pop	r28
    3e1c:	df 91       	pop	r29
    3e1e:	08 95       	ret

00003e20 <MDIO_voidConnectPullup>:

void MDIO_voidConnectPullup(u8 A_u8PortNo ,u8 A_u8PinNo, u8 A_u8ConnectPullup)
{
    3e20:	df 93       	push	r29
    3e22:	cf 93       	push	r28
    3e24:	00 d0       	rcall	.+0      	; 0x3e26 <MDIO_voidConnectPullup+0x6>
    3e26:	00 d0       	rcall	.+0      	; 0x3e28 <MDIO_voidConnectPullup+0x8>
    3e28:	0f 92       	push	r0
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	89 83       	std	Y+1, r24	; 0x01
    3e30:	6a 83       	std	Y+2, r22	; 0x02
    3e32:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8ConnectPullup)
    3e34:	8b 81       	ldd	r24, Y+3	; 0x03
    3e36:	28 2f       	mov	r18, r24
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	3d 83       	std	Y+5, r19	; 0x05
    3e3c:	2c 83       	std	Y+4, r18	; 0x04
    3e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e40:	9d 81       	ldd	r25, Y+5	; 0x05
    3e42:	81 30       	cpi	r24, 0x01	; 1
    3e44:	91 05       	cpc	r25, r1
    3e46:	31 f0       	breq	.+12     	; 0x3e54 <MDIO_voidConnectPullup+0x34>
    3e48:	2c 81       	ldd	r18, Y+4	; 0x04
    3e4a:	3d 81       	ldd	r19, Y+5	; 0x05
    3e4c:	22 30       	cpi	r18, 0x02	; 2
    3e4e:	31 05       	cpc	r19, r1
    3e50:	31 f0       	breq	.+12     	; 0x3e5e <MDIO_voidConnectPullup+0x3e>
    3e52:	09 c0       	rjmp	.+18     	; 0x3e66 <MDIO_voidConnectPullup+0x46>
	{
	case ENABLE_PULLUP  : MDIO_voidSetPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    3e54:	89 81       	ldd	r24, Y+1	; 0x01
    3e56:	6a 81       	ldd	r22, Y+2	; 0x02
    3e58:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    3e5c:	04 c0       	rjmp	.+8      	; 0x3e66 <MDIO_voidConnectPullup+0x46>
	case DISABLE_PULLUP : MDIO_voidClrPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    3e5e:	89 81       	ldd	r24, Y+1	; 0x01
    3e60:	6a 81       	ldd	r22, Y+2	; 0x02
    3e62:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	default : /**Error*/ break ;
	}
}
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	cf 91       	pop	r28
    3e72:	df 91       	pop	r29
    3e74:	08 95       	ret

00003e76 <MADC_voidInt>:

/**pointer to function to set call back of ADC*/
void (*ADC_Callback) (void) ;

void MADC_voidInt (void)
{
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
	/**referance voltage selection*/
	#if   ADC_REF_VOLT == AREF          /**external ADC referance voltage (internal Vref turrned off)*/
	    CLR_BIT(ADMUX , REFS0) ;
	    CLR_BIT(ADMUX , REFS1) ;
	#elif ADC_REF_VOLT == AVCC          /**Vcc of ADC*/
	    SET_BIT(ADMUX , REFS0) ;
    3e7e:	a7 e2       	ldi	r26, 0x27	; 39
    3e80:	b0 e0       	ldi	r27, 0x00	; 0
    3e82:	e7 e2       	ldi	r30, 0x27	; 39
    3e84:	f0 e0       	ldi	r31, 0x00	; 0
    3e86:	80 81       	ld	r24, Z
    3e88:	80 64       	ori	r24, 0x40	; 64
    3e8a:	8c 93       	st	X, r24
	    CLR_BIT(ADMUX , REFS1) ;
    3e8c:	a7 e2       	ldi	r26, 0x27	; 39
    3e8e:	b0 e0       	ldi	r27, 0x00	; 0
    3e90:	e7 e2       	ldi	r30, 0x27	; 39
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	80 81       	ld	r24, Z
    3e96:	8f 77       	andi	r24, 0x7F	; 127
    3e98:	8c 93       	st	X, r24
	#else
		#error "Please select correct refence voltage"
	#endif
	
	/**set addjust result to right addjust*/
	CLR_BIT(ADMUX , ADLAR) ;
    3e9a:	a7 e2       	ldi	r26, 0x27	; 39
    3e9c:	b0 e0       	ldi	r27, 0x00	; 0
    3e9e:	e7 e2       	ldi	r30, 0x27	; 39
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	80 81       	ld	r24, Z
    3ea4:	8f 7d       	andi	r24, 0xDF	; 223
    3ea6:	8c 93       	st	X, r24
	
	/**set prescaller of ADC clk*/
	#if   ADC_PRESCALER == ADC_PS_2 /**clk = 4MHZ*/
	    SET_BIT(ADCSRA , ADPS0) ;
    3ea8:	a6 e2       	ldi	r26, 0x26	; 38
    3eaa:	b0 e0       	ldi	r27, 0x00	; 0
    3eac:	e6 e2       	ldi	r30, 0x26	; 38
    3eae:	f0 e0       	ldi	r31, 0x00	; 0
    3eb0:	80 81       	ld	r24, Z
    3eb2:	81 60       	ori	r24, 0x01	; 1
    3eb4:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA , ADPS1) ;
    3eb6:	a6 e2       	ldi	r26, 0x26	; 38
    3eb8:	b0 e0       	ldi	r27, 0x00	; 0
    3eba:	e6 e2       	ldi	r30, 0x26	; 38
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	80 81       	ld	r24, Z
    3ec0:	8d 7f       	andi	r24, 0xFD	; 253
    3ec2:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA , ADPS2) ;
    3ec4:	a6 e2       	ldi	r26, 0x26	; 38
    3ec6:	b0 e0       	ldi	r27, 0x00	; 0
    3ec8:	e6 e2       	ldi	r30, 0x26	; 38
    3eca:	f0 e0       	ldi	r31, 0x00	; 0
    3ecc:	80 81       	ld	r24, Z
    3ece:	8b 7f       	andi	r24, 0xFB	; 251
    3ed0:	8c 93       	st	X, r24
	#else 
		#error "select correct division factor"
	#endif
	
	/**Enable ADC peripheral*/
	SET_BIT(ADCSRA, ADEN);
    3ed2:	a6 e2       	ldi	r26, 0x26	; 38
    3ed4:	b0 e0       	ldi	r27, 0x00	; 0
    3ed6:	e6 e2       	ldi	r30, 0x26	; 38
    3ed8:	f0 e0       	ldi	r31, 0x00	; 0
    3eda:	80 81       	ld	r24, Z
    3edc:	80 68       	ori	r24, 0x80	; 128
    3ede:	8c 93       	st	X, r24
	
	/**ADC Interrupt Enable*/
    SET_BIT(ADCSRA, ADIE);
    3ee0:	a6 e2       	ldi	r26, 0x26	; 38
    3ee2:	b0 e0       	ldi	r27, 0x00	; 0
    3ee4:	e6 e2       	ldi	r30, 0x26	; 38
    3ee6:	f0 e0       	ldi	r31, 0x00	; 0
    3ee8:	80 81       	ld	r24, Z
    3eea:	88 60       	ori	r24, 0x08	; 8
    3eec:	8c 93       	st	X, r24
	
	/**Auto trigger Disable*/
	CLR_BIT(ADCSRA, ADATE);
    3eee:	a6 e2       	ldi	r26, 0x26	; 38
    3ef0:	b0 e0       	ldi	r27, 0x00	; 0
    3ef2:	e6 e2       	ldi	r30, 0x26	; 38
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	80 81       	ld	r24, Z
    3ef8:	8f 7d       	andi	r24, 0xDF	; 223
    3efa:	8c 93       	st	X, r24
	
	/**Enable global interrupt flag*/
	SET_BIT (SREG , I_BIT) ;
    3efc:	af e5       	ldi	r26, 0x5F	; 95
    3efe:	b0 e0       	ldi	r27, 0x00	; 0
    3f00:	ef e5       	ldi	r30, 0x5F	; 95
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	80 81       	ld	r24, Z
    3f06:	80 68       	ori	r24, 0x80	; 128
    3f08:	8c 93       	st	X, r24
}
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	08 95       	ret

00003f10 <MADC_voidStartConversion>:

void MADC_voidStartConversion(u8 A_u8ChannelNo)
{
    3f10:	df 93       	push	r29
    3f12:	cf 93       	push	r28
    3f14:	00 d0       	rcall	.+0      	; 0x3f16 <MADC_voidStartConversion+0x6>
    3f16:	0f 92       	push	r0
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8ChannelNo)
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	28 2f       	mov	r18, r24
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	3b 83       	std	Y+3, r19	; 0x03
    3f26:	2a 83       	std	Y+2, r18	; 0x02
    3f28:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f2c:	83 30       	cpi	r24, 0x03	; 3
    3f2e:	91 05       	cpc	r25, r1
    3f30:	09 f4       	brne	.+2      	; 0x3f34 <MADC_voidStartConversion+0x24>
    3f32:	9b c0       	rjmp	.+310    	; 0x406a <MADC_voidStartConversion+0x15a>
    3f34:	2a 81       	ldd	r18, Y+2	; 0x02
    3f36:	3b 81       	ldd	r19, Y+3	; 0x03
    3f38:	24 30       	cpi	r18, 0x04	; 4
    3f3a:	31 05       	cpc	r19, r1
    3f3c:	8c f4       	brge	.+34     	; 0x3f60 <MADC_voidStartConversion+0x50>
    3f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f40:	9b 81       	ldd	r25, Y+3	; 0x03
    3f42:	81 30       	cpi	r24, 0x01	; 1
    3f44:	91 05       	cpc	r25, r1
    3f46:	09 f4       	brne	.+2      	; 0x3f4a <MADC_voidStartConversion+0x3a>
    3f48:	48 c0       	rjmp	.+144    	; 0x3fda <MADC_voidStartConversion+0xca>
    3f4a:	2a 81       	ldd	r18, Y+2	; 0x02
    3f4c:	3b 81       	ldd	r19, Y+3	; 0x03
    3f4e:	22 30       	cpi	r18, 0x02	; 2
    3f50:	31 05       	cpc	r19, r1
    3f52:	0c f0       	brlt	.+2      	; 0x3f56 <MADC_voidStartConversion+0x46>
    3f54:	66 c0       	rjmp	.+204    	; 0x4022 <MADC_voidStartConversion+0x112>
    3f56:	8a 81       	ldd	r24, Y+2	; 0x02
    3f58:	9b 81       	ldd	r25, Y+3	; 0x03
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	d1 f0       	breq	.+52     	; 0x3f92 <MADC_voidStartConversion+0x82>
    3f5e:	38 c1       	rjmp	.+624    	; 0x41d0 <MADC_voidStartConversion+0x2c0>
    3f60:	2a 81       	ldd	r18, Y+2	; 0x02
    3f62:	3b 81       	ldd	r19, Y+3	; 0x03
    3f64:	25 30       	cpi	r18, 0x05	; 5
    3f66:	31 05       	cpc	r19, r1
    3f68:	09 f4       	brne	.+2      	; 0x3f6c <MADC_voidStartConversion+0x5c>
    3f6a:	c7 c0       	rjmp	.+398    	; 0x40fa <MADC_voidStartConversion+0x1ea>
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f70:	85 30       	cpi	r24, 0x05	; 5
    3f72:	91 05       	cpc	r25, r1
    3f74:	0c f4       	brge	.+2      	; 0x3f78 <MADC_voidStartConversion+0x68>
    3f76:	9d c0       	rjmp	.+314    	; 0x40b2 <MADC_voidStartConversion+0x1a2>
    3f78:	2a 81       	ldd	r18, Y+2	; 0x02
    3f7a:	3b 81       	ldd	r19, Y+3	; 0x03
    3f7c:	26 30       	cpi	r18, 0x06	; 6
    3f7e:	31 05       	cpc	r19, r1
    3f80:	09 f4       	brne	.+2      	; 0x3f84 <MADC_voidStartConversion+0x74>
    3f82:	df c0       	rjmp	.+446    	; 0x4142 <MADC_voidStartConversion+0x232>
    3f84:	8a 81       	ldd	r24, Y+2	; 0x02
    3f86:	9b 81       	ldd	r25, Y+3	; 0x03
    3f88:	87 30       	cpi	r24, 0x07	; 7
    3f8a:	91 05       	cpc	r25, r1
    3f8c:	09 f4       	brne	.+2      	; 0x3f90 <MADC_voidStartConversion+0x80>
    3f8e:	fd c0       	rjmp	.+506    	; 0x418a <MADC_voidStartConversion+0x27a>
    3f90:	1f c1       	rjmp	.+574    	; 0x41d0 <MADC_voidStartConversion+0x2c0>
	{
		case CHANNEL_0 :  CLR_BIT(ADMUX , MUX0) ;
    3f92:	a7 e2       	ldi	r26, 0x27	; 39
    3f94:	b0 e0       	ldi	r27, 0x00	; 0
    3f96:	e7 e2       	ldi	r30, 0x27	; 39
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	80 81       	ld	r24, Z
    3f9c:	8e 7f       	andi	r24, 0xFE	; 254
    3f9e:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    3fa0:	a7 e2       	ldi	r26, 0x27	; 39
    3fa2:	b0 e0       	ldi	r27, 0x00	; 0
    3fa4:	e7 e2       	ldi	r30, 0x27	; 39
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	80 81       	ld	r24, Z
    3faa:	8d 7f       	andi	r24, 0xFD	; 253
    3fac:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    3fae:	a7 e2       	ldi	r26, 0x27	; 39
    3fb0:	b0 e0       	ldi	r27, 0x00	; 0
    3fb2:	e7 e2       	ldi	r30, 0x27	; 39
    3fb4:	f0 e0       	ldi	r31, 0x00	; 0
    3fb6:	80 81       	ld	r24, Z
    3fb8:	8b 7f       	andi	r24, 0xFB	; 251
    3fba:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    3fbc:	a7 e2       	ldi	r26, 0x27	; 39
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	e7 e2       	ldi	r30, 0x27	; 39
    3fc2:	f0 e0       	ldi	r31, 0x00	; 0
    3fc4:	80 81       	ld	r24, Z
    3fc6:	87 7f       	andi	r24, 0xF7	; 247
    3fc8:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    3fca:	a7 e2       	ldi	r26, 0x27	; 39
    3fcc:	b0 e0       	ldi	r27, 0x00	; 0
    3fce:	e7 e2       	ldi	r30, 0x27	; 39
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	80 81       	ld	r24, Z
    3fd4:	8f 7e       	andi	r24, 0xEF	; 239
    3fd6:	8c 93       	st	X, r24
    3fd8:	fb c0       	rjmp	.+502    	; 0x41d0 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_1 :  SET_BIT(ADMUX , MUX0) ;
    3fda:	a7 e2       	ldi	r26, 0x27	; 39
    3fdc:	b0 e0       	ldi	r27, 0x00	; 0
    3fde:	e7 e2       	ldi	r30, 0x27	; 39
    3fe0:	f0 e0       	ldi	r31, 0x00	; 0
    3fe2:	80 81       	ld	r24, Z
    3fe4:	81 60       	ori	r24, 0x01	; 1
    3fe6:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    3fe8:	a7 e2       	ldi	r26, 0x27	; 39
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	e7 e2       	ldi	r30, 0x27	; 39
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	8d 7f       	andi	r24, 0xFD	; 253
    3ff4:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    3ff6:	a7 e2       	ldi	r26, 0x27	; 39
    3ff8:	b0 e0       	ldi	r27, 0x00	; 0
    3ffa:	e7 e2       	ldi	r30, 0x27	; 39
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	80 81       	ld	r24, Z
    4000:	8b 7f       	andi	r24, 0xFB	; 251
    4002:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    4004:	a7 e2       	ldi	r26, 0x27	; 39
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	e7 e2       	ldi	r30, 0x27	; 39
    400a:	f0 e0       	ldi	r31, 0x00	; 0
    400c:	80 81       	ld	r24, Z
    400e:	87 7f       	andi	r24, 0xF7	; 247
    4010:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    4012:	a7 e2       	ldi	r26, 0x27	; 39
    4014:	b0 e0       	ldi	r27, 0x00	; 0
    4016:	e7 e2       	ldi	r30, 0x27	; 39
    4018:	f0 e0       	ldi	r31, 0x00	; 0
    401a:	80 81       	ld	r24, Z
    401c:	8f 7e       	andi	r24, 0xEF	; 239
    401e:	8c 93       	st	X, r24
    4020:	d7 c0       	rjmp	.+430    	; 0x41d0 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_2 :  CLR_BIT(ADMUX , MUX0) ;
    4022:	a7 e2       	ldi	r26, 0x27	; 39
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	e7 e2       	ldi	r30, 0x27	; 39
    4028:	f0 e0       	ldi	r31, 0x00	; 0
    402a:	80 81       	ld	r24, Z
    402c:	8e 7f       	andi	r24, 0xFE	; 254
    402e:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    4030:	a7 e2       	ldi	r26, 0x27	; 39
    4032:	b0 e0       	ldi	r27, 0x00	; 0
    4034:	e7 e2       	ldi	r30, 0x27	; 39
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	80 81       	ld	r24, Z
    403a:	82 60       	ori	r24, 0x02	; 2
    403c:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    403e:	a7 e2       	ldi	r26, 0x27	; 39
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	e7 e2       	ldi	r30, 0x27	; 39
    4044:	f0 e0       	ldi	r31, 0x00	; 0
    4046:	80 81       	ld	r24, Z
    4048:	8b 7f       	andi	r24, 0xFB	; 251
    404a:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    404c:	a7 e2       	ldi	r26, 0x27	; 39
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	e7 e2       	ldi	r30, 0x27	; 39
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	87 7f       	andi	r24, 0xF7	; 247
    4058:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    405a:	a7 e2       	ldi	r26, 0x27	; 39
    405c:	b0 e0       	ldi	r27, 0x00	; 0
    405e:	e7 e2       	ldi	r30, 0x27	; 39
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	80 81       	ld	r24, Z
    4064:	8f 7e       	andi	r24, 0xEF	; 239
    4066:	8c 93       	st	X, r24
    4068:	b3 c0       	rjmp	.+358    	; 0x41d0 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_3 :  SET_BIT(ADMUX , MUX0) ;
    406a:	a7 e2       	ldi	r26, 0x27	; 39
    406c:	b0 e0       	ldi	r27, 0x00	; 0
    406e:	e7 e2       	ldi	r30, 0x27	; 39
    4070:	f0 e0       	ldi	r31, 0x00	; 0
    4072:	80 81       	ld	r24, Z
    4074:	81 60       	ori	r24, 0x01	; 1
    4076:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    4078:	a7 e2       	ldi	r26, 0x27	; 39
    407a:	b0 e0       	ldi	r27, 0x00	; 0
    407c:	e7 e2       	ldi	r30, 0x27	; 39
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	80 81       	ld	r24, Z
    4082:	82 60       	ori	r24, 0x02	; 2
    4084:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX2) ;
    4086:	a7 e2       	ldi	r26, 0x27	; 39
    4088:	b0 e0       	ldi	r27, 0x00	; 0
    408a:	e7 e2       	ldi	r30, 0x27	; 39
    408c:	f0 e0       	ldi	r31, 0x00	; 0
    408e:	80 81       	ld	r24, Z
    4090:	8b 7f       	andi	r24, 0xFB	; 251
    4092:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    4094:	a7 e2       	ldi	r26, 0x27	; 39
    4096:	b0 e0       	ldi	r27, 0x00	; 0
    4098:	e7 e2       	ldi	r30, 0x27	; 39
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	80 81       	ld	r24, Z
    409e:	87 7f       	andi	r24, 0xF7	; 247
    40a0:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    40a2:	a7 e2       	ldi	r26, 0x27	; 39
    40a4:	b0 e0       	ldi	r27, 0x00	; 0
    40a6:	e7 e2       	ldi	r30, 0x27	; 39
    40a8:	f0 e0       	ldi	r31, 0x00	; 0
    40aa:	80 81       	ld	r24, Z
    40ac:	8f 7e       	andi	r24, 0xEF	; 239
    40ae:	8c 93       	st	X, r24
    40b0:	8f c0       	rjmp	.+286    	; 0x41d0 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_4 :  CLR_BIT(ADMUX , MUX0) ;
    40b2:	a7 e2       	ldi	r26, 0x27	; 39
    40b4:	b0 e0       	ldi	r27, 0x00	; 0
    40b6:	e7 e2       	ldi	r30, 0x27	; 39
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	80 81       	ld	r24, Z
    40bc:	8e 7f       	andi	r24, 0xFE	; 254
    40be:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    40c0:	a7 e2       	ldi	r26, 0x27	; 39
    40c2:	b0 e0       	ldi	r27, 0x00	; 0
    40c4:	e7 e2       	ldi	r30, 0x27	; 39
    40c6:	f0 e0       	ldi	r31, 0x00	; 0
    40c8:	80 81       	ld	r24, Z
    40ca:	8d 7f       	andi	r24, 0xFD	; 253
    40cc:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    40ce:	a7 e2       	ldi	r26, 0x27	; 39
    40d0:	b0 e0       	ldi	r27, 0x00	; 0
    40d2:	e7 e2       	ldi	r30, 0x27	; 39
    40d4:	f0 e0       	ldi	r31, 0x00	; 0
    40d6:	80 81       	ld	r24, Z
    40d8:	84 60       	ori	r24, 0x04	; 4
    40da:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    40dc:	a7 e2       	ldi	r26, 0x27	; 39
    40de:	b0 e0       	ldi	r27, 0x00	; 0
    40e0:	e7 e2       	ldi	r30, 0x27	; 39
    40e2:	f0 e0       	ldi	r31, 0x00	; 0
    40e4:	80 81       	ld	r24, Z
    40e6:	87 7f       	andi	r24, 0xF7	; 247
    40e8:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    40ea:	a7 e2       	ldi	r26, 0x27	; 39
    40ec:	b0 e0       	ldi	r27, 0x00	; 0
    40ee:	e7 e2       	ldi	r30, 0x27	; 39
    40f0:	f0 e0       	ldi	r31, 0x00	; 0
    40f2:	80 81       	ld	r24, Z
    40f4:	8f 7e       	andi	r24, 0xEF	; 239
    40f6:	8c 93       	st	X, r24
    40f8:	6b c0       	rjmp	.+214    	; 0x41d0 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_5 :  SET_BIT(ADMUX , MUX0) ;
    40fa:	a7 e2       	ldi	r26, 0x27	; 39
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	e7 e2       	ldi	r30, 0x27	; 39
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	80 81       	ld	r24, Z
    4104:	81 60       	ori	r24, 0x01	; 1
    4106:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX1) ;
    4108:	a7 e2       	ldi	r26, 0x27	; 39
    410a:	b0 e0       	ldi	r27, 0x00	; 0
    410c:	e7 e2       	ldi	r30, 0x27	; 39
    410e:	f0 e0       	ldi	r31, 0x00	; 0
    4110:	80 81       	ld	r24, Z
    4112:	8d 7f       	andi	r24, 0xFD	; 253
    4114:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    4116:	a7 e2       	ldi	r26, 0x27	; 39
    4118:	b0 e0       	ldi	r27, 0x00	; 0
    411a:	e7 e2       	ldi	r30, 0x27	; 39
    411c:	f0 e0       	ldi	r31, 0x00	; 0
    411e:	80 81       	ld	r24, Z
    4120:	84 60       	ori	r24, 0x04	; 4
    4122:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    4124:	a7 e2       	ldi	r26, 0x27	; 39
    4126:	b0 e0       	ldi	r27, 0x00	; 0
    4128:	e7 e2       	ldi	r30, 0x27	; 39
    412a:	f0 e0       	ldi	r31, 0x00	; 0
    412c:	80 81       	ld	r24, Z
    412e:	87 7f       	andi	r24, 0xF7	; 247
    4130:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    4132:	a7 e2       	ldi	r26, 0x27	; 39
    4134:	b0 e0       	ldi	r27, 0x00	; 0
    4136:	e7 e2       	ldi	r30, 0x27	; 39
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	80 81       	ld	r24, Z
    413c:	8f 7e       	andi	r24, 0xEF	; 239
    413e:	8c 93       	st	X, r24
    4140:	47 c0       	rjmp	.+142    	; 0x41d0 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_6 :  CLR_BIT(ADMUX , MUX0) ;
    4142:	a7 e2       	ldi	r26, 0x27	; 39
    4144:	b0 e0       	ldi	r27, 0x00	; 0
    4146:	e7 e2       	ldi	r30, 0x27	; 39
    4148:	f0 e0       	ldi	r31, 0x00	; 0
    414a:	80 81       	ld	r24, Z
    414c:	8e 7f       	andi	r24, 0xFE	; 254
    414e:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    4150:	a7 e2       	ldi	r26, 0x27	; 39
    4152:	b0 e0       	ldi	r27, 0x00	; 0
    4154:	e7 e2       	ldi	r30, 0x27	; 39
    4156:	f0 e0       	ldi	r31, 0x00	; 0
    4158:	80 81       	ld	r24, Z
    415a:	82 60       	ori	r24, 0x02	; 2
    415c:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    415e:	a7 e2       	ldi	r26, 0x27	; 39
    4160:	b0 e0       	ldi	r27, 0x00	; 0
    4162:	e7 e2       	ldi	r30, 0x27	; 39
    4164:	f0 e0       	ldi	r31, 0x00	; 0
    4166:	80 81       	ld	r24, Z
    4168:	84 60       	ori	r24, 0x04	; 4
    416a:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    416c:	a7 e2       	ldi	r26, 0x27	; 39
    416e:	b0 e0       	ldi	r27, 0x00	; 0
    4170:	e7 e2       	ldi	r30, 0x27	; 39
    4172:	f0 e0       	ldi	r31, 0x00	; 0
    4174:	80 81       	ld	r24, Z
    4176:	87 7f       	andi	r24, 0xF7	; 247
    4178:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    417a:	a7 e2       	ldi	r26, 0x27	; 39
    417c:	b0 e0       	ldi	r27, 0x00	; 0
    417e:	e7 e2       	ldi	r30, 0x27	; 39
    4180:	f0 e0       	ldi	r31, 0x00	; 0
    4182:	80 81       	ld	r24, Z
    4184:	8f 7e       	andi	r24, 0xEF	; 239
    4186:	8c 93       	st	X, r24
    4188:	23 c0       	rjmp	.+70     	; 0x41d0 <MADC_voidStartConversion+0x2c0>
						  break ;
						  
		case CHANNEL_7 :  SET_BIT(ADMUX , MUX0) ;
    418a:	a7 e2       	ldi	r26, 0x27	; 39
    418c:	b0 e0       	ldi	r27, 0x00	; 0
    418e:	e7 e2       	ldi	r30, 0x27	; 39
    4190:	f0 e0       	ldi	r31, 0x00	; 0
    4192:	80 81       	ld	r24, Z
    4194:	81 60       	ori	r24, 0x01	; 1
    4196:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX1) ;
    4198:	a7 e2       	ldi	r26, 0x27	; 39
    419a:	b0 e0       	ldi	r27, 0x00	; 0
    419c:	e7 e2       	ldi	r30, 0x27	; 39
    419e:	f0 e0       	ldi	r31, 0x00	; 0
    41a0:	80 81       	ld	r24, Z
    41a2:	82 60       	ori	r24, 0x02	; 2
    41a4:	8c 93       	st	X, r24
						  SET_BIT(ADMUX , MUX2) ;
    41a6:	a7 e2       	ldi	r26, 0x27	; 39
    41a8:	b0 e0       	ldi	r27, 0x00	; 0
    41aa:	e7 e2       	ldi	r30, 0x27	; 39
    41ac:	f0 e0       	ldi	r31, 0x00	; 0
    41ae:	80 81       	ld	r24, Z
    41b0:	84 60       	ori	r24, 0x04	; 4
    41b2:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX3) ;
    41b4:	a7 e2       	ldi	r26, 0x27	; 39
    41b6:	b0 e0       	ldi	r27, 0x00	; 0
    41b8:	e7 e2       	ldi	r30, 0x27	; 39
    41ba:	f0 e0       	ldi	r31, 0x00	; 0
    41bc:	80 81       	ld	r24, Z
    41be:	87 7f       	andi	r24, 0xF7	; 247
    41c0:	8c 93       	st	X, r24
						  CLR_BIT(ADMUX , MUX4) ;
    41c2:	a7 e2       	ldi	r26, 0x27	; 39
    41c4:	b0 e0       	ldi	r27, 0x00	; 0
    41c6:	e7 e2       	ldi	r30, 0x27	; 39
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	80 81       	ld	r24, Z
    41cc:	8f 7e       	andi	r24, 0xEF	; 239
    41ce:	8c 93       	st	X, r24
		default         : /**ERROR*/
		                  break ;				  
	}
	
	/**Start Conversion */
	SET_BIT(ADCSRA, ADSC);
    41d0:	a6 e2       	ldi	r26, 0x26	; 38
    41d2:	b0 e0       	ldi	r27, 0x00	; 0
    41d4:	e6 e2       	ldi	r30, 0x26	; 38
    41d6:	f0 e0       	ldi	r31, 0x00	; 0
    41d8:	80 81       	ld	r24, Z
    41da:	80 64       	ori	r24, 0x40	; 64
    41dc:	8c 93       	st	X, r24
}
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	cf 91       	pop	r28
    41e6:	df 91       	pop	r29
    41e8:	08 95       	ret

000041ea <MADC_u16GetADCData>:

u16  MADC_u16GetADCData(void)
{
    41ea:	df 93       	push	r29
    41ec:	cf 93       	push	r28
    41ee:	cd b7       	in	r28, 0x3d	; 61
    41f0:	de b7       	in	r29, 0x3e	; 62
	/**return ADC Data  */
	return ADC ;
    41f2:	e4 e2       	ldi	r30, 0x24	; 36
    41f4:	f0 e0       	ldi	r31, 0x00	; 0
    41f6:	80 81       	ld	r24, Z
    41f8:	91 81       	ldd	r25, Z+1	; 0x01
}
    41fa:	cf 91       	pop	r28
    41fc:	df 91       	pop	r29
    41fe:	08 95       	ret

00004200 <MADC_voidSetCallback>:

void MADC_voidSetCallback( void (*A_fptr)(void)  )
{
    4200:	df 93       	push	r29
    4202:	cf 93       	push	r28
    4204:	00 d0       	rcall	.+0      	; 0x4206 <MADC_voidSetCallback+0x6>
    4206:	cd b7       	in	r28, 0x3d	; 61
    4208:	de b7       	in	r29, 0x3e	; 62
    420a:	9a 83       	std	Y+2, r25	; 0x02
    420c:	89 83       	std	Y+1, r24	; 0x01
	ADC_Callback = A_fptr;
    420e:	89 81       	ldd	r24, Y+1	; 0x01
    4210:	9a 81       	ldd	r25, Y+2	; 0x02
    4212:	90 93 f9 01 	sts	0x01F9, r25
    4216:	80 93 f8 01 	sts	0x01F8, r24
}
    421a:	0f 90       	pop	r0
    421c:	0f 90       	pop	r0
    421e:	cf 91       	pop	r28
    4220:	df 91       	pop	r29
    4222:	08 95       	ret

00004224 <__vector_16>:

/**ISR of ADC*/
void __vector_16(void)__attribute__((signal))__attribute__((interrupt));
void __vector_16(void)
{
    4224:	78 94       	sei
    4226:	1f 92       	push	r1
    4228:	0f 92       	push	r0
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	0f 92       	push	r0
    422e:	11 24       	eor	r1, r1
    4230:	2f 93       	push	r18
    4232:	3f 93       	push	r19
    4234:	4f 93       	push	r20
    4236:	5f 93       	push	r21
    4238:	6f 93       	push	r22
    423a:	7f 93       	push	r23
    423c:	8f 93       	push	r24
    423e:	9f 93       	push	r25
    4240:	af 93       	push	r26
    4242:	bf 93       	push	r27
    4244:	ef 93       	push	r30
    4246:	ff 93       	push	r31
    4248:	df 93       	push	r29
    424a:	cf 93       	push	r28
    424c:	cd b7       	in	r28, 0x3d	; 61
    424e:	de b7       	in	r29, 0x3e	; 62
	if (ADC_Callback != 0)
    4250:	80 91 f8 01 	lds	r24, 0x01F8
    4254:	90 91 f9 01 	lds	r25, 0x01F9
    4258:	00 97       	sbiw	r24, 0x00	; 0
    425a:	29 f0       	breq	.+10     	; 0x4266 <__vector_16+0x42>
	{
		ADC_Callback () ;
    425c:	e0 91 f8 01 	lds	r30, 0x01F8
    4260:	f0 91 f9 01 	lds	r31, 0x01F9
    4264:	09 95       	icall
	}
}
    4266:	cf 91       	pop	r28
    4268:	df 91       	pop	r29
    426a:	ff 91       	pop	r31
    426c:	ef 91       	pop	r30
    426e:	bf 91       	pop	r27
    4270:	af 91       	pop	r26
    4272:	9f 91       	pop	r25
    4274:	8f 91       	pop	r24
    4276:	7f 91       	pop	r23
    4278:	6f 91       	pop	r22
    427a:	5f 91       	pop	r21
    427c:	4f 91       	pop	r20
    427e:	3f 91       	pop	r19
    4280:	2f 91       	pop	r18
    4282:	0f 90       	pop	r0
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	0f 90       	pop	r0
    4288:	1f 90       	pop	r1
    428a:	18 95       	reti

0000428c <HUltrasonic_voidInt>:
#include "Ultrasonic_conf.h"
#include "Ultrasonic_int.h"
#define F_CPU 8000000UL
#include <util/delay.h>
void HUltrasonic_voidInt (void) 
{
    428c:	df 93       	push	r29
    428e:	cf 93       	push	r28
    4290:	cd b7       	in	r28, 0x3d	; 61
    4292:	de b7       	in	r29, 0x3e	; 62
	/*set trig pin as output pin*/
	MDIO_voidSetPinDir(TRIG_PORT , TRIG_PIN , DIO_HIGH) ;
    4294:	84 e0       	ldi	r24, 0x04	; 4
    4296:	60 e0       	ldi	r22, 0x00	; 0
    4298:	41 e0       	ldi	r20, 0x01	; 1
    429a:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
}
    429e:	cf 91       	pop	r28
    42a0:	df 91       	pop	r29
    42a2:	08 95       	ret

000042a4 <HUltrasonic_u16CalcDistance>:

u16 HUltrasonic_u16CalcDistance (void)
{
    42a4:	df 93       	push	r29
    42a6:	cf 93       	push	r28
    42a8:	cd b7       	in	r28, 0x3d	; 61
    42aa:	de b7       	in	r29, 0x3e	; 62
    42ac:	6a 97       	sbiw	r28, 0x1a	; 26
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	f8 94       	cli
    42b2:	de bf       	out	0x3e, r29	; 62
    42b4:	0f be       	out	0x3f, r0	; 63
    42b6:	cd bf       	out	0x3d, r28	; 61
	u16 L_u16Distance = 0 ;
    42b8:	1a 8e       	std	Y+26, r1	; 0x1a
    42ba:	19 8e       	std	Y+25, r1	; 0x19
	
	MTimer_voidInt() ;
    42bc:	0e 94 45 0a 	call	0x148a	; 0x148a <MTimer_voidInt>
	
	/*set trig pin as output pin*/
	MDIO_voidSetPinDir(TRIG_PORT , TRIG_PIN , DIO_HIGH) ;
    42c0:	84 e0       	ldi	r24, 0x04	; 4
    42c2:	60 e0       	ldi	r22, 0x00	; 0
    42c4:	41 e0       	ldi	r20, 0x01	; 1
    42c6:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
	MDIO_voidSetPinVal(TRIG_PORT , TRIG_PIN) ;
    42ca:	84 e0       	ldi	r24, 0x04	; 4
    42cc:	60 e0       	ldi	r22, 0x00	; 0
    42ce:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	a8 e4       	ldi	r26, 0x48	; 72
    42d8:	b2 e4       	ldi	r27, 0x42	; 66
    42da:	8d 8b       	std	Y+21, r24	; 0x15
    42dc:	9e 8b       	std	Y+22, r25	; 0x16
    42de:	af 8b       	std	Y+23, r26	; 0x17
    42e0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42e2:	6d 89       	ldd	r22, Y+21	; 0x15
    42e4:	7e 89       	ldd	r23, Y+22	; 0x16
    42e6:	8f 89       	ldd	r24, Y+23	; 0x17
    42e8:	98 8d       	ldd	r25, Y+24	; 0x18
    42ea:	2b ea       	ldi	r18, 0xAB	; 171
    42ec:	3a ea       	ldi	r19, 0xAA	; 170
    42ee:	4a e2       	ldi	r20, 0x2A	; 42
    42f0:	50 e4       	ldi	r21, 0x40	; 64
    42f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	89 8b       	std	Y+17, r24	; 0x11
    42fc:	9a 8b       	std	Y+18, r25	; 0x12
    42fe:	ab 8b       	std	Y+19, r26	; 0x13
    4300:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4302:	69 89       	ldd	r22, Y+17	; 0x11
    4304:	7a 89       	ldd	r23, Y+18	; 0x12
    4306:	8b 89       	ldd	r24, Y+19	; 0x13
    4308:	9c 89       	ldd	r25, Y+20	; 0x14
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	40 e8       	ldi	r20, 0x80	; 128
    4310:	5f e3       	ldi	r21, 0x3F	; 63
    4312:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4316:	88 23       	and	r24, r24
    4318:	1c f4       	brge	.+6      	; 0x4320 <HUltrasonic_u16CalcDistance+0x7c>
		__ticks = 1;
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	88 8b       	std	Y+16, r24	; 0x10
    431e:	91 c0       	rjmp	.+290    	; 0x4442 <HUltrasonic_u16CalcDistance+0x19e>
	else if (__tmp > 255)
    4320:	69 89       	ldd	r22, Y+17	; 0x11
    4322:	7a 89       	ldd	r23, Y+18	; 0x12
    4324:	8b 89       	ldd	r24, Y+19	; 0x13
    4326:	9c 89       	ldd	r25, Y+20	; 0x14
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	4f e7       	ldi	r20, 0x7F	; 127
    432e:	53 e4       	ldi	r21, 0x43	; 67
    4330:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4334:	18 16       	cp	r1, r24
    4336:	0c f0       	brlt	.+2      	; 0x433a <HUltrasonic_u16CalcDistance+0x96>
    4338:	7b c0       	rjmp	.+246    	; 0x4430 <HUltrasonic_u16CalcDistance+0x18c>
	{
		_delay_ms(__us / 1000.0);
    433a:	6d 89       	ldd	r22, Y+21	; 0x15
    433c:	7e 89       	ldd	r23, Y+22	; 0x16
    433e:	8f 89       	ldd	r24, Y+23	; 0x17
    4340:	98 8d       	ldd	r25, Y+24	; 0x18
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	4a e7       	ldi	r20, 0x7A	; 122
    4348:	54 e4       	ldi	r21, 0x44	; 68
    434a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	8c 87       	std	Y+12, r24	; 0x0c
    4354:	9d 87       	std	Y+13, r25	; 0x0d
    4356:	ae 87       	std	Y+14, r26	; 0x0e
    4358:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    435a:	6c 85       	ldd	r22, Y+12	; 0x0c
    435c:	7d 85       	ldd	r23, Y+13	; 0x0d
    435e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4360:	9f 85       	ldd	r25, Y+15	; 0x0f
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	4a ef       	ldi	r20, 0xFA	; 250
    4368:	54 e4       	ldi	r21, 0x44	; 68
    436a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	88 87       	std	Y+8, r24	; 0x08
    4374:	99 87       	std	Y+9, r25	; 0x09
    4376:	aa 87       	std	Y+10, r26	; 0x0a
    4378:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    437a:	68 85       	ldd	r22, Y+8	; 0x08
    437c:	79 85       	ldd	r23, Y+9	; 0x09
    437e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4380:	9b 85       	ldd	r25, Y+11	; 0x0b
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	40 e8       	ldi	r20, 0x80	; 128
    4388:	5f e3       	ldi	r21, 0x3F	; 63
    438a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    438e:	88 23       	and	r24, r24
    4390:	2c f4       	brge	.+10     	; 0x439c <HUltrasonic_u16CalcDistance+0xf8>
		__ticks = 1;
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	9f 83       	std	Y+7, r25	; 0x07
    4398:	8e 83       	std	Y+6, r24	; 0x06
    439a:	3f c0       	rjmp	.+126    	; 0x441a <HUltrasonic_u16CalcDistance+0x176>
	else if (__tmp > 65535)
    439c:	68 85       	ldd	r22, Y+8	; 0x08
    439e:	79 85       	ldd	r23, Y+9	; 0x09
    43a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    43a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    43a4:	20 e0       	ldi	r18, 0x00	; 0
    43a6:	3f ef       	ldi	r19, 0xFF	; 255
    43a8:	4f e7       	ldi	r20, 0x7F	; 127
    43aa:	57 e4       	ldi	r21, 0x47	; 71
    43ac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    43b0:	18 16       	cp	r1, r24
    43b2:	4c f5       	brge	.+82     	; 0x4406 <HUltrasonic_u16CalcDistance+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    43b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    43b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    43ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    43bc:	20 e0       	ldi	r18, 0x00	; 0
    43be:	30 e0       	ldi	r19, 0x00	; 0
    43c0:	40 e2       	ldi	r20, 0x20	; 32
    43c2:	51 e4       	ldi	r21, 0x41	; 65
    43c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	bc 01       	movw	r22, r24
    43ce:	cd 01       	movw	r24, r26
    43d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d4:	dc 01       	movw	r26, r24
    43d6:	cb 01       	movw	r24, r22
    43d8:	9f 83       	std	Y+7, r25	; 0x07
    43da:	8e 83       	std	Y+6, r24	; 0x06
    43dc:	0f c0       	rjmp	.+30     	; 0x43fc <HUltrasonic_u16CalcDistance+0x158>
    43de:	88 ec       	ldi	r24, 0xC8	; 200
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	9d 83       	std	Y+5, r25	; 0x05
    43e4:	8c 83       	std	Y+4, r24	; 0x04
    43e6:	8c 81       	ldd	r24, Y+4	; 0x04
    43e8:	9d 81       	ldd	r25, Y+5	; 0x05
    43ea:	01 97       	sbiw	r24, 0x01	; 1
    43ec:	f1 f7       	brne	.-4      	; 0x43ea <HUltrasonic_u16CalcDistance+0x146>
    43ee:	9d 83       	std	Y+5, r25	; 0x05
    43f0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f2:	8e 81       	ldd	r24, Y+6	; 0x06
    43f4:	9f 81       	ldd	r25, Y+7	; 0x07
    43f6:	01 97       	sbiw	r24, 0x01	; 1
    43f8:	9f 83       	std	Y+7, r25	; 0x07
    43fa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43fc:	8e 81       	ldd	r24, Y+6	; 0x06
    43fe:	9f 81       	ldd	r25, Y+7	; 0x07
    4400:	00 97       	sbiw	r24, 0x00	; 0
    4402:	69 f7       	brne	.-38     	; 0x43de <HUltrasonic_u16CalcDistance+0x13a>
    4404:	24 c0       	rjmp	.+72     	; 0x444e <HUltrasonic_u16CalcDistance+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4406:	68 85       	ldd	r22, Y+8	; 0x08
    4408:	79 85       	ldd	r23, Y+9	; 0x09
    440a:	8a 85       	ldd	r24, Y+10	; 0x0a
    440c:	9b 85       	ldd	r25, Y+11	; 0x0b
    440e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	9f 83       	std	Y+7, r25	; 0x07
    4418:	8e 83       	std	Y+6, r24	; 0x06
    441a:	8e 81       	ldd	r24, Y+6	; 0x06
    441c:	9f 81       	ldd	r25, Y+7	; 0x07
    441e:	9b 83       	std	Y+3, r25	; 0x03
    4420:	8a 83       	std	Y+2, r24	; 0x02
    4422:	8a 81       	ldd	r24, Y+2	; 0x02
    4424:	9b 81       	ldd	r25, Y+3	; 0x03
    4426:	01 97       	sbiw	r24, 0x01	; 1
    4428:	f1 f7       	brne	.-4      	; 0x4426 <HUltrasonic_u16CalcDistance+0x182>
    442a:	9b 83       	std	Y+3, r25	; 0x03
    442c:	8a 83       	std	Y+2, r24	; 0x02
    442e:	0f c0       	rjmp	.+30     	; 0x444e <HUltrasonic_u16CalcDistance+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4430:	69 89       	ldd	r22, Y+17	; 0x11
    4432:	7a 89       	ldd	r23, Y+18	; 0x12
    4434:	8b 89       	ldd	r24, Y+19	; 0x13
    4436:	9c 89       	ldd	r25, Y+20	; 0x14
    4438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	88 8b       	std	Y+16, r24	; 0x10
    4442:	88 89       	ldd	r24, Y+16	; 0x10
    4444:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4446:	89 81       	ldd	r24, Y+1	; 0x01
    4448:	8a 95       	dec	r24
    444a:	f1 f7       	brne	.-4      	; 0x4448 <HUltrasonic_u16CalcDistance+0x1a4>
    444c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50) ;
	MDIO_voidClrPinVal(TRIG_PORT , TRIG_PIN) ;
    444e:	84 e0       	ldi	r24, 0x04	; 4
    4450:	60 e0       	ldi	r22, 0x00	; 0
    4452:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	L_u16Distance = SOUND_VELOCITY ;
    4456:	88 e2       	ldi	r24, 0x28	; 40
    4458:	97 e8       	ldi	r25, 0x87	; 135
    445a:	9a 8f       	std	Y+26, r25	; 0x1a
    445c:	89 8f       	std	Y+25, r24	; 0x19
	L_u16Distance = L_u16Distance / 2 ;
    445e:	89 8d       	ldd	r24, Y+25	; 0x19
    4460:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4462:	96 95       	lsr	r25
    4464:	87 95       	ror	r24
    4466:	9a 8f       	std	Y+26, r25	; 0x1a
    4468:	89 8f       	std	Y+25, r24	; 0x19
	L_u16Distance = L_u16Distance / MTimerCalcFreqofTon() ;
    446a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <MTimerCalcFreqofTon>
    446e:	9c 01       	movw	r18, r24
    4470:	89 8d       	ldd	r24, Y+25	; 0x19
    4472:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4474:	b9 01       	movw	r22, r18
    4476:	0e 94 76 36 	call	0x6cec	; 0x6cec <__udivmodhi4>
    447a:	cb 01       	movw	r24, r22
    447c:	9a 8f       	std	Y+26, r25	; 0x1a
    447e:	89 8f       	std	Y+25, r24	; 0x19
	return L_u16Distance ;
    4480:	89 8d       	ldd	r24, Y+25	; 0x19
    4482:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    4484:	6a 96       	adiw	r28, 0x1a	; 26
    4486:	0f b6       	in	r0, 0x3f	; 63
    4488:	f8 94       	cli
    448a:	de bf       	out	0x3e, r29	; 62
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	cd bf       	out	0x3d, r28	; 61
    4490:	cf 91       	pop	r28
    4492:	df 91       	pop	r29
    4494:	08 95       	ret

00004496 <HTempSensor_voidInt>:
#include "../../MCAL/ADC/ADC_int.h"
#include "TempSensor_conf.h"
#include "TempSensor_int.h"

void HTempSensor_voidInt (void)
{
    4496:	df 93       	push	r29
    4498:	cf 93       	push	r28
    449a:	cd b7       	in	r28, 0x3d	; 61
    449c:	de b7       	in	r29, 0x3e	; 62
	/*Initialize ADC*/
	MADC_voidInt() ;
    449e:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <MADC_voidInt>
}
    44a2:	cf 91       	pop	r28
    44a4:	df 91       	pop	r29
    44a6:	08 95       	ret

000044a8 <HTempSensor_u16ReadTemp>:

u16 HTempSensor_u16ReadTemp (void)
{
    44a8:	df 93       	push	r29
    44aa:	cf 93       	push	r28
    44ac:	00 d0       	rcall	.+0      	; 0x44ae <HTempSensor_u16ReadTemp+0x6>
    44ae:	cd b7       	in	r28, 0x3d	; 61
    44b0:	de b7       	in	r29, 0x3e	; 62
	u16 L_u16Temp ;
	/*start conversion of ADC*/
	MADC_voidStartConversion(TEMP_CHANNEL) ;
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <MADC_voidStartConversion>
	volt = 2.5 * read_val (mv)
	1 c --------> 10 (mv)
	Temp = volt (mv) / 10 (mv)
	Temp = 0.25 * read_val ;
	*/
	L_u16Temp = MADC_u16GetADCData() * 0.25 ;
    44b8:	0e 94 f5 20 	call	0x41ea	; 0x41ea <MADC_u16GetADCData>
    44bc:	cc 01       	movw	r24, r24
    44be:	a0 e0       	ldi	r26, 0x00	; 0
    44c0:	b0 e0       	ldi	r27, 0x00	; 0
    44c2:	bc 01       	movw	r22, r24
    44c4:	cd 01       	movw	r24, r26
    44c6:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	bc 01       	movw	r22, r24
    44d0:	cd 01       	movw	r24, r26
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	40 e8       	ldi	r20, 0x80	; 128
    44d8:	5e e3       	ldi	r21, 0x3E	; 62
    44da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	bc 01       	movw	r22, r24
    44e4:	cd 01       	movw	r24, r26
    44e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	9a 83       	std	Y+2, r25	; 0x02
    44f0:	89 83       	std	Y+1, r24	; 0x01
	return L_u16Temp ;
    44f2:	89 81       	ldd	r24, Y+1	; 0x01
    44f4:	9a 81       	ldd	r25, Y+2	; 0x02
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	cf 91       	pop	r28
    44fc:	df 91       	pop	r29
    44fe:	08 95       	ret

00004500 <HSevo_voidMoveTO>:
#include "Servo_int.h"

#define TIME_OF_ONE_DEGREE  0.0055555555555555555

void HSevo_voidMoveTO (f32 A_f32Angle)
{
    4500:	0f 93       	push	r16
    4502:	1f 93       	push	r17
    4504:	df 93       	push	r29
    4506:	cf 93       	push	r28
    4508:	cd b7       	in	r28, 0x3d	; 61
    450a:	de b7       	in	r29, 0x3e	; 62
    450c:	2a 97       	sbiw	r28, 0x0a	; 10
    450e:	0f b6       	in	r0, 0x3f	; 63
    4510:	f8 94       	cli
    4512:	de bf       	out	0x3e, r29	; 62
    4514:	0f be       	out	0x3f, r0	; 63
    4516:	cd bf       	out	0x3d, r28	; 61
    4518:	6d 83       	std	Y+5, r22	; 0x05
    451a:	7e 83       	std	Y+6, r23	; 0x06
    451c:	8f 83       	std	Y+7, r24	; 0x07
    451e:	98 87       	std	Y+8, r25	; 0x08
	f32 L_f32Value ;
	if (A_f32Angle >= (f32)0.0 && A_f32Angle <= (f32)90.0)
    4520:	1a 86       	std	Y+10, r1	; 0x0a
    4522:	6d 81       	ldd	r22, Y+5	; 0x05
    4524:	7e 81       	ldd	r23, Y+6	; 0x06
    4526:	8f 81       	ldd	r24, Y+7	; 0x07
    4528:	98 85       	ldd	r25, Y+8	; 0x08
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	40 e0       	ldi	r20, 0x00	; 0
    4530:	50 e0       	ldi	r21, 0x00	; 0
    4532:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    4536:	88 23       	and	r24, r24
    4538:	14 f0       	brlt	.+4      	; 0x453e <HSevo_voidMoveTO+0x3e>
    453a:	81 e0       	ldi	r24, 0x01	; 1
    453c:	8a 87       	std	Y+10, r24	; 0x0a
    453e:	81 e0       	ldi	r24, 0x01	; 1
    4540:	9a 85       	ldd	r25, Y+10	; 0x0a
    4542:	89 27       	eor	r24, r25
    4544:	88 23       	and	r24, r24
    4546:	79 f5       	brne	.+94     	; 0x45a6 <HSevo_voidMoveTO+0xa6>
    4548:	19 86       	std	Y+9, r1	; 0x09
    454a:	6d 81       	ldd	r22, Y+5	; 0x05
    454c:	7e 81       	ldd	r23, Y+6	; 0x06
    454e:	8f 81       	ldd	r24, Y+7	; 0x07
    4550:	98 85       	ldd	r25, Y+8	; 0x08
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	44 eb       	ldi	r20, 0xB4	; 180
    4558:	52 e4       	ldi	r21, 0x42	; 66
    455a:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    455e:	18 16       	cp	r1, r24
    4560:	14 f0       	brlt	.+4      	; 0x4566 <HSevo_voidMoveTO+0x66>
    4562:	e1 e0       	ldi	r30, 0x01	; 1
    4564:	e9 87       	std	Y+9, r30	; 0x09
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	f9 85       	ldd	r31, Y+9	; 0x09
    456a:	8f 27       	eor	r24, r31
    456c:	88 23       	and	r24, r24
    456e:	d9 f4       	brne	.+54     	; 0x45a6 <HSevo_voidMoveTO+0xa6>
	{
		L_f32Value = 1.5 + (A_f32Angle * TIME_OF_ONE_DEGREE) ;
    4570:	6d 81       	ldd	r22, Y+5	; 0x05
    4572:	7e 81       	ldd	r23, Y+6	; 0x06
    4574:	8f 81       	ldd	r24, Y+7	; 0x07
    4576:	98 85       	ldd	r25, Y+8	; 0x08
    4578:	21 e6       	ldi	r18, 0x61	; 97
    457a:	3b e0       	ldi	r19, 0x0B	; 11
    457c:	46 eb       	ldi	r20, 0xB6	; 182
    457e:	5b e3       	ldi	r21, 0x3B	; 59
    4580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	bc 01       	movw	r22, r24
    458a:	cd 01       	movw	r24, r26
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	40 ec       	ldi	r20, 0xC0	; 192
    4592:	5f e3       	ldi	r21, 0x3F	; 63
    4594:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	89 83       	std	Y+1, r24	; 0x01
    459e:	9a 83       	std	Y+2, r25	; 0x02
    45a0:	ab 83       	std	Y+3, r26	; 0x03
    45a2:	bc 83       	std	Y+4, r27	; 0x04
    45a4:	32 c0       	rjmp	.+100    	; 0x460a <HSevo_voidMoveTO+0x10a>
	}
	else if (A_f32Angle <= (f32)0.0 && A_f32Angle >= (f32)-90.0)
    45a6:	6d 81       	ldd	r22, Y+5	; 0x05
    45a8:	7e 81       	ldd	r23, Y+6	; 0x06
    45aa:	8f 81       	ldd	r24, Y+7	; 0x07
    45ac:	98 85       	ldd	r25, Y+8	; 0x08
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	40 e0       	ldi	r20, 0x00	; 0
    45b4:	50 e0       	ldi	r21, 0x00	; 0
    45b6:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    45ba:	18 16       	cp	r1, r24
    45bc:	34 f1       	brlt	.+76     	; 0x460a <HSevo_voidMoveTO+0x10a>
    45be:	6d 81       	ldd	r22, Y+5	; 0x05
    45c0:	7e 81       	ldd	r23, Y+6	; 0x06
    45c2:	8f 81       	ldd	r24, Y+7	; 0x07
    45c4:	98 85       	ldd	r25, Y+8	; 0x08
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	30 e0       	ldi	r19, 0x00	; 0
    45ca:	44 eb       	ldi	r20, 0xB4	; 180
    45cc:	52 ec       	ldi	r21, 0xC2	; 194
    45ce:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    45d2:	88 23       	and	r24, r24
    45d4:	d4 f0       	brlt	.+52     	; 0x460a <HSevo_voidMoveTO+0x10a>
	{
		L_f32Value = 1.5 - (A_f32Angle * - TIME_OF_ONE_DEGREE) ;
    45d6:	6d 81       	ldd	r22, Y+5	; 0x05
    45d8:	7e 81       	ldd	r23, Y+6	; 0x06
    45da:	8f 81       	ldd	r24, Y+7	; 0x07
    45dc:	98 85       	ldd	r25, Y+8	; 0x08
    45de:	21 e6       	ldi	r18, 0x61	; 97
    45e0:	3b e0       	ldi	r19, 0x0B	; 11
    45e2:	46 eb       	ldi	r20, 0xB6	; 182
    45e4:	5b e3       	ldi	r21, 0x3B	; 59
    45e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	bc 01       	movw	r22, r24
    45f0:	cd 01       	movw	r24, r26
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	40 ec       	ldi	r20, 0xC0	; 192
    45f8:	5f e3       	ldi	r21, 0x3F	; 63
    45fa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	89 83       	std	Y+1, r24	; 0x01
    4604:	9a 83       	std	Y+2, r25	; 0x02
    4606:	ab 83       	std	Y+3, r26	; 0x03
    4608:	bc 83       	std	Y+4, r27	; 0x04
	}
	/* set OC1A as output pin */
	MDIO_voidSetPinDir (DIO_PORTD , DIO_PIN5 , DIO_HIGH) ;
    460a:	84 e0       	ldi	r24, 0x04	; 4
    460c:	65 e0       	ldi	r22, 0x05	; 5
    460e:	41 e0       	ldi	r20, 0x01	; 1
    4610:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
	
	/* select fast PWM mode*/
	CLR_BIT(TCCR1A,WGM10);
    4614:	af e4       	ldi	r26, 0x4F	; 79
    4616:	b0 e0       	ldi	r27, 0x00	; 0
    4618:	ef e4       	ldi	r30, 0x4F	; 79
    461a:	f0 e0       	ldi	r31, 0x00	; 0
    461c:	80 81       	ld	r24, Z
    461e:	8e 7f       	andi	r24, 0xFE	; 254
    4620:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    4622:	af e4       	ldi	r26, 0x4F	; 79
    4624:	b0 e0       	ldi	r27, 0x00	; 0
    4626:	ef e4       	ldi	r30, 0x4F	; 79
    4628:	f0 e0       	ldi	r31, 0x00	; 0
    462a:	80 81       	ld	r24, Z
    462c:	82 60       	ori	r24, 0x02	; 2
    462e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    4630:	ae e4       	ldi	r26, 0x4E	; 78
    4632:	b0 e0       	ldi	r27, 0x00	; 0
    4634:	ee e4       	ldi	r30, 0x4E	; 78
    4636:	f0 e0       	ldi	r31, 0x00	; 0
    4638:	80 81       	ld	r24, Z
    463a:	88 60       	ori	r24, 0x08	; 8
    463c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    463e:	ae e4       	ldi	r26, 0x4E	; 78
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	ee e4       	ldi	r30, 0x4E	; 78
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	80 81       	ld	r24, Z
    4648:	80 61       	ori	r24, 0x10	; 16
    464a:	8c 93       	st	X, r24
	
	/* load a value in OCR1A,ICR1 */
	
	OCR1A=L_f32Value*1000;
    464c:	0a e4       	ldi	r16, 0x4A	; 74
    464e:	10 e0       	ldi	r17, 0x00	; 0
    4650:	69 81       	ldd	r22, Y+1	; 0x01
    4652:	7a 81       	ldd	r23, Y+2	; 0x02
    4654:	8b 81       	ldd	r24, Y+3	; 0x03
    4656:	9c 81       	ldd	r25, Y+4	; 0x04
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	4a e7       	ldi	r20, 0x7A	; 122
    465e:	54 e4       	ldi	r21, 0x44	; 68
    4660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	bc 01       	movw	r22, r24
    466a:	cd 01       	movw	r24, r26
    466c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	f8 01       	movw	r30, r16
    4676:	91 83       	std	Z+1, r25	; 0x01
    4678:	80 83       	st	Z, r24
	ICR1=19999;
    467a:	e6 e4       	ldi	r30, 0x46	; 70
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	8f e1       	ldi	r24, 0x1F	; 31
    4680:	9e e4       	ldi	r25, 0x4E	; 78
    4682:	91 83       	std	Z+1, r25	; 0x01
    4684:	80 83       	st	Z, r24
	
	/* select timer clock, 1MHZ */
	CLR_BIT(TCCR1B , CS10) ;
    4686:	ae e4       	ldi	r26, 0x4E	; 78
    4688:	b0 e0       	ldi	r27, 0x00	; 0
    468a:	ee e4       	ldi	r30, 0x4E	; 78
    468c:	f0 e0       	ldi	r31, 0x00	; 0
    468e:	80 81       	ld	r24, Z
    4690:	8e 7f       	andi	r24, 0xFE	; 254
    4692:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , CS11) ;
    4694:	ae e4       	ldi	r26, 0x4E	; 78
    4696:	b0 e0       	ldi	r27, 0x00	; 0
    4698:	ee e4       	ldi	r30, 0x4E	; 78
    469a:	f0 e0       	ldi	r31, 0x00	; 0
    469c:	80 81       	ld	r24, Z
    469e:	82 60       	ori	r24, 0x02	; 2
    46a0:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B , CS12) ;
    46a2:	ae e4       	ldi	r26, 0x4E	; 78
    46a4:	b0 e0       	ldi	r27, 0x00	; 0
    46a6:	ee e4       	ldi	r30, 0x4E	; 78
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	80 81       	ld	r24, Z
    46ac:	8b 7f       	andi	r24, 0xFB	; 251
    46ae:	8c 93       	st	X, r24
	
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	CLR_BIT(TCCR1A,COM1A0);
    46b0:	af e4       	ldi	r26, 0x4F	; 79
    46b2:	b0 e0       	ldi	r27, 0x00	; 0
    46b4:	ef e4       	ldi	r30, 0x4F	; 79
    46b6:	f0 e0       	ldi	r31, 0x00	; 0
    46b8:	80 81       	ld	r24, Z
    46ba:	8f 7b       	andi	r24, 0xBF	; 191
    46bc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    46be:	af e4       	ldi	r26, 0x4F	; 79
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	ef e4       	ldi	r30, 0x4F	; 79
    46c4:	f0 e0       	ldi	r31, 0x00	; 0
    46c6:	80 81       	ld	r24, Z
    46c8:	80 68       	ori	r24, 0x80	; 128
    46ca:	8c 93       	st	X, r24
}
    46cc:	2a 96       	adiw	r28, 0x0a	; 10
    46ce:	0f b6       	in	r0, 0x3f	; 63
    46d0:	f8 94       	cli
    46d2:	de bf       	out	0x3e, r29	; 62
    46d4:	0f be       	out	0x3f, r0	; 63
    46d6:	cd bf       	out	0x3d, r28	; 61
    46d8:	cf 91       	pop	r28
    46da:	df 91       	pop	r29
    46dc:	1f 91       	pop	r17
    46de:	0f 91       	pop	r16
    46e0:	08 95       	ret

000046e2 <HSSD_voidSsdInitial>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_int.h"
#include "SSD_int.h"

void HSSD_voidSsdInitial (u8 A_u8SsdId)
{
    46e2:	df 93       	push	r29
    46e4:	cf 93       	push	r28
    46e6:	00 d0       	rcall	.+0      	; 0x46e8 <HSSD_voidSsdInitial+0x6>
    46e8:	0f 92       	push	r0
    46ea:	cd b7       	in	r28, 0x3d	; 61
    46ec:	de b7       	in	r29, 0x3e	; 62
    46ee:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8SsdId)
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
    46f2:	28 2f       	mov	r18, r24
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	3b 83       	std	Y+3, r19	; 0x03
    46f8:	2a 83       	std	Y+2, r18	; 0x02
    46fa:	8a 81       	ldd	r24, Y+2	; 0x02
    46fc:	9b 81       	ldd	r25, Y+3	; 0x03
    46fe:	81 30       	cpi	r24, 0x01	; 1
    4700:	91 05       	cpc	r25, r1
    4702:	31 f0       	breq	.+12     	; 0x4710 <HSSD_voidSsdInitial+0x2e>
    4704:	2a 81       	ldd	r18, Y+2	; 0x02
    4706:	3b 81       	ldd	r19, Y+3	; 0x03
    4708:	22 30       	cpi	r18, 0x02	; 2
    470a:	31 05       	cpc	r19, r1
    470c:	59 f0       	breq	.+22     	; 0x4724 <HSSD_voidSsdInitial+0x42>
    470e:	13 c0       	rjmp	.+38     	; 0x4736 <HSSD_voidSsdInitial+0x54>
	{
		               /** set direction of common pin of ssd1 as output */
		case SSD1_ID : MDIO_voidSetPinDir  (SSD1EN_PORT , SSD1EN_PIN , SSD_OUTPUT) ; 
    4710:	84 e0       	ldi	r24, 0x04	; 4
    4712:	60 e0       	ldi	r22, 0x00	; 0
    4714:	41 e0       	ldi	r20, 0x01	; 1
    4716:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		
		               /** set direction of data pins of ssd1 as output */
		               MDIO_voidSetPortDir (SSD1_PORT , ALL_PINS_ONE) ;               break ;
    471a:	81 e0       	ldi	r24, 0x01	; 1
    471c:	6f ef       	ldi	r22, 0xFF	; 255
    471e:	0e 94 20 1c 	call	0x3840	; 0x3840 <MDIO_voidSetPortDir>
    4722:	09 c0       	rjmp	.+18     	; 0x4736 <HSSD_voidSsdInitial+0x54>
					   
					   /** set direction of common pin of ssd2 as output */
		case SSD2_ID : MDIO_voidSetPinDir  (SSD2EN_PORT , SSD2EN_PIN , SSD_OUTPUT) ;
    4724:	84 e0       	ldi	r24, 0x04	; 4
    4726:	61 e0       	ldi	r22, 0x01	; 1
    4728:	41 e0       	ldi	r20, 0x01	; 1
    472a:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		
		               /** set direction of data pins of ssd2 as output */
					   MDIO_voidSetPortDir (SSD2_PORT , ALL_PINS_ONE) ;               break ;
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	6f ef       	ldi	r22, 0xFF	; 255
    4732:	0e 94 20 1c 	call	0x3840	; 0x3840 <MDIO_voidSetPortDir>
		default      : /** Error */                                                   break ;
	}
}
    4736:	0f 90       	pop	r0
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	cf 91       	pop	r28
    473e:	df 91       	pop	r29
    4740:	08 95       	ret

00004742 <HSSD_voidSsdWrite>:

void HSSD_voidSsdWrite (u8 A_u8SsdId , u8 A_u8Num)
{
    4742:	df 93       	push	r29
    4744:	cf 93       	push	r28
    4746:	00 d0       	rcall	.+0      	; 0x4748 <HSSD_voidSsdWrite+0x6>
    4748:	00 d0       	rcall	.+0      	; 0x474a <HSSD_voidSsdWrite+0x8>
    474a:	00 d0       	rcall	.+0      	; 0x474c <HSSD_voidSsdWrite+0xa>
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
    4750:	89 83       	std	Y+1, r24	; 0x01
    4752:	6a 83       	std	Y+2, r22	; 0x02
	#if SSD_TYPE == COMM_CATHODE	 /// if type of ssd is common cathod
		if (A_u8Num > 9)
    4754:	8a 81       	ldd	r24, Y+2	; 0x02
    4756:	8a 30       	cpi	r24, 0x0A	; 10
    4758:	30 f1       	brcs	.+76     	; 0x47a6 <HSSD_voidSsdWrite+0x64>
		{
			/**
			* error case and the defualt display is zero
			*/
			switch (A_u8SsdId)
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	28 2f       	mov	r18, r24
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	3e 83       	std	Y+6, r19	; 0x06
    4762:	2d 83       	std	Y+5, r18	; 0x05
    4764:	8d 81       	ldd	r24, Y+5	; 0x05
    4766:	9e 81       	ldd	r25, Y+6	; 0x06
    4768:	81 30       	cpi	r24, 0x01	; 1
    476a:	91 05       	cpc	r25, r1
    476c:	31 f0       	breq	.+12     	; 0x477a <HSSD_voidSsdWrite+0x38>
    476e:	2d 81       	ldd	r18, Y+5	; 0x05
    4770:	3e 81       	ldd	r19, Y+6	; 0x06
    4772:	22 30       	cpi	r18, 0x02	; 2
    4774:	31 05       	cpc	r19, r1
    4776:	61 f0       	breq	.+24     	; 0x4790 <HSSD_voidSsdWrite+0x4e>
    4778:	45 c0       	rjmp	.+138    	; 0x4804 <HSSD_voidSsdWrite+0xc2>
			{                  /**make the common pin of ssd1 is low (turn on ssd1) */
				case SSD1_ID : MDIO_voidClrPinVal  (SSD1EN_PORT , SSD1EN_PIN) ;
    477a:	84 e0       	ldi	r24, 0x04	; 4
    477c:	60 e0       	ldi	r22, 0x00	; 0
    477e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
				
				               /**Display number 0 (first element of data array) */
				               MDIO_voidSetPortVal (SSD1_PORT , R_u8SsdData [DISPLAY_0]) ; 
    4782:	90 91 76 01 	lds	r25, 0x0176
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	69 2f       	mov	r22, r25
    478a:	0e 94 de 1b 	call	0x37bc	; 0x37bc <MDIO_voidSetPortVal>
    478e:	3a c0       	rjmp	.+116    	; 0x4804 <HSSD_voidSsdWrite+0xc2>
						       break ;
							   
							   /**make the common pin of ssd2 is low (turn on ssd2) */
				case SSD2_ID : MDIO_voidClrPinVal  (SSD2EN_PORT , SSD2EN_PIN) ;
    4790:	84 e0       	ldi	r24, 0x04	; 4
    4792:	61 e0       	ldi	r22, 0x01	; 1
    4794:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
				
				               /**Display number 0 (first element of data array) */
				               MDIO_voidSetPortVal (SSD2_PORT , R_u8SsdData [DISPLAY_0]) ;    
    4798:	90 91 76 01 	lds	r25, 0x0176
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	69 2f       	mov	r22, r25
    47a0:	0e 94 de 1b 	call	0x37bc	; 0x37bc <MDIO_voidSetPortVal>
    47a4:	2f c0       	rjmp	.+94     	; 0x4804 <HSSD_voidSsdWrite+0xc2>
				               break ;
			}
		}
		else 
		{
			switch (A_u8SsdId)
    47a6:	89 81       	ldd	r24, Y+1	; 0x01
    47a8:	28 2f       	mov	r18, r24
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	3c 83       	std	Y+4, r19	; 0x04
    47ae:	2b 83       	std	Y+3, r18	; 0x03
    47b0:	8b 81       	ldd	r24, Y+3	; 0x03
    47b2:	9c 81       	ldd	r25, Y+4	; 0x04
    47b4:	81 30       	cpi	r24, 0x01	; 1
    47b6:	91 05       	cpc	r25, r1
    47b8:	31 f0       	breq	.+12     	; 0x47c6 <HSSD_voidSsdWrite+0x84>
    47ba:	2b 81       	ldd	r18, Y+3	; 0x03
    47bc:	3c 81       	ldd	r19, Y+4	; 0x04
    47be:	22 30       	cpi	r18, 0x02	; 2
    47c0:	31 05       	cpc	r19, r1
    47c2:	89 f0       	breq	.+34     	; 0x47e6 <HSSD_voidSsdWrite+0xa4>
    47c4:	1f c0       	rjmp	.+62     	; 0x4804 <HSSD_voidSsdWrite+0xc2>
			{
				               /**make the common pin of ssd1 is low (turn on ssd1) */
				case SSD1_ID : MDIO_voidClrPinVal  (SSD1EN_PORT , SSD1EN_PIN) ;
    47c6:	84 e0       	ldi	r24, 0x04	; 4
    47c8:	60 e0       	ldi	r22, 0x00	; 0
    47ca:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
				
				               /**Display number*/
				               MDIO_voidSetPortVal (SSD1_PORT   , R_u8SsdData [A_u8Num]) ;   
    47ce:	8a 81       	ldd	r24, Y+2	; 0x02
    47d0:	88 2f       	mov	r24, r24
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	fc 01       	movw	r30, r24
    47d6:	ea 58       	subi	r30, 0x8A	; 138
    47d8:	fe 4f       	sbci	r31, 0xFE	; 254
    47da:	90 81       	ld	r25, Z
    47dc:	81 e0       	ldi	r24, 0x01	; 1
    47de:	69 2f       	mov	r22, r25
    47e0:	0e 94 de 1b 	call	0x37bc	; 0x37bc <MDIO_voidSetPortVal>
    47e4:	0f c0       	rjmp	.+30     	; 0x4804 <HSSD_voidSsdWrite+0xc2>
							   break ;
							   
							   /**make the common pin of ssd2 is low (turn on ssd2) */
				case SSD2_ID : MDIO_voidClrPinVal  (SSD2EN_PORT , SSD2EN_PIN) ;
    47e6:	84 e0       	ldi	r24, 0x04	; 4
    47e8:	61 e0       	ldi	r22, 0x01	; 1
    47ea:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
				
				               /**Display number*/
				               MDIO_voidSetPortVal (SSD2_PORT   , R_u8SsdData [A_u8Num]) ;   
    47ee:	8a 81       	ldd	r24, Y+2	; 0x02
    47f0:	88 2f       	mov	r24, r24
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	fc 01       	movw	r30, r24
    47f6:	ea 58       	subi	r30, 0x8A	; 138
    47f8:	fe 4f       	sbci	r31, 0xFE	; 254
    47fa:	90 81       	ld	r25, Z
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	69 2f       	mov	r22, r25
    4800:	0e 94 de 1b 	call	0x37bc	; 0x37bc <MDIO_voidSetPortVal>
			}
		}
	#else 
		#error "select correct type of ssd"
	#endif
}
    4804:	26 96       	adiw	r28, 0x06	; 6
    4806:	0f b6       	in	r0, 0x3f	; 63
    4808:	f8 94       	cli
    480a:	de bf       	out	0x3e, r29	; 62
    480c:	0f be       	out	0x3f, r0	; 63
    480e:	cd bf       	out	0x3d, r28	; 61
    4810:	cf 91       	pop	r28
    4812:	df 91       	pop	r29
    4814:	08 95       	ret

00004816 <HSSD_voidSsdOff>:

void HSSD_voidSsdOff (u8 A_u8SsdId)
{
    4816:	df 93       	push	r29
    4818:	cf 93       	push	r28
    481a:	00 d0       	rcall	.+0      	; 0x481c <HSSD_voidSsdOff+0x6>
    481c:	0f 92       	push	r0
    481e:	cd b7       	in	r28, 0x3d	; 61
    4820:	de b7       	in	r29, 0x3e	; 62
    4822:	89 83       	std	Y+1, r24	; 0x01
	#if SSD_TYPE == COMM_CATHODE	 /// if type of ssd is common cathod
	    switch (A_u8SsdId)
    4824:	89 81       	ldd	r24, Y+1	; 0x01
    4826:	28 2f       	mov	r18, r24
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	3b 83       	std	Y+3, r19	; 0x03
    482c:	2a 83       	std	Y+2, r18	; 0x02
    482e:	8a 81       	ldd	r24, Y+2	; 0x02
    4830:	9b 81       	ldd	r25, Y+3	; 0x03
    4832:	81 30       	cpi	r24, 0x01	; 1
    4834:	91 05       	cpc	r25, r1
    4836:	31 f0       	breq	.+12     	; 0x4844 <HSSD_voidSsdOff+0x2e>
    4838:	2a 81       	ldd	r18, Y+2	; 0x02
    483a:	3b 81       	ldd	r19, Y+3	; 0x03
    483c:	22 30       	cpi	r18, 0x02	; 2
    483e:	31 05       	cpc	r19, r1
    4840:	31 f0       	breq	.+12     	; 0x484e <HSSD_voidSsdOff+0x38>
    4842:	09 c0       	rjmp	.+18     	; 0x4856 <HSSD_voidSsdOff+0x40>
	    {                   /**make the common pin of ssd1 is high (turn off ssd1) */
			 case SSD1_ID : MDIO_voidSetPinVal (SSD1_PORT , SSD1EN_PIN) ;      break ;
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	60 e0       	ldi	r22, 0x00	; 0
    4848:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    484c:	04 c0       	rjmp	.+8      	; 0x4856 <HSSD_voidSsdOff+0x40>
			 
							/**make the common pin of ssd2 is high (turn off ssd2) */
	    	 case SSD2_ID : MDIO_voidSetPinVal (SSD2_PORT , SSD2EN_PIN) ;      break ;
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	61 e0       	ldi	r22, 0x01	; 1
    4852:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
	        default      : /** Error */                                       break ;                                                 
	    }
	#else 
		#error "select correct type of ssd"
	#endif	
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	cf 91       	pop	r28
    485e:	df 91       	pop	r29
    4860:	08 95       	ret

00004862 <HPushBotton_voidPbIint>:
#include "Pb_conf.h"
#include <util/delay.h>


void HPushBotton_voidPbIint (u8 A_u8PbID)
{
    4862:	df 93       	push	r29
    4864:	cf 93       	push	r28
    4866:	00 d0       	rcall	.+0      	; 0x4868 <HPushBotton_voidPbIint+0x6>
    4868:	0f 92       	push	r0
    486a:	cd b7       	in	r28, 0x3d	; 61
    486c:	de b7       	in	r29, 0x3e	; 62
    486e:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PbID)
    4870:	89 81       	ldd	r24, Y+1	; 0x01
    4872:	28 2f       	mov	r18, r24
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	3b 83       	std	Y+3, r19	; 0x03
    4878:	2a 83       	std	Y+2, r18	; 0x02
    487a:	8a 81       	ldd	r24, Y+2	; 0x02
    487c:	9b 81       	ldd	r25, Y+3	; 0x03
    487e:	82 30       	cpi	r24, 0x02	; 2
    4880:	91 05       	cpc	r25, r1
    4882:	a9 f0       	breq	.+42     	; 0x48ae <HPushBotton_voidPbIint+0x4c>
    4884:	2a 81       	ldd	r18, Y+2	; 0x02
    4886:	3b 81       	ldd	r19, Y+3	; 0x03
    4888:	23 30       	cpi	r18, 0x03	; 3
    488a:	31 05       	cpc	r19, r1
    488c:	d9 f0       	breq	.+54     	; 0x48c4 <HPushBotton_voidPbIint+0x62>
    488e:	8a 81       	ldd	r24, Y+2	; 0x02
    4890:	9b 81       	ldd	r25, Y+3	; 0x03
    4892:	81 30       	cpi	r24, 0x01	; 1
    4894:	91 05       	cpc	r25, r1
    4896:	01 f5       	brne	.+64     	; 0x48d8 <HPushBotton_voidPbIint+0x76>
	{                  /** make direction of Pb1 is input */
		case Pb1_ID :  MDIO_voidSetPinDir     (Pb1_PORT , Pb1_PIN , Pb_INPUT) ;
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	60 e0       	ldi	r22, 0x00	; 0
    489c:	40 e0       	ldi	r20, 0x00	; 0
    489e:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		
		               /**active pull up of Pb1 */
		               MDIO_voidConnectPullup (Pb1_PORT , Pb1_PIN , ENABLE_PULLUP) ;
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	60 e0       	ldi	r22, 0x00	; 0
    48a6:	41 e0       	ldi	r20, 0x01	; 1
    48a8:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <MDIO_voidConnectPullup>
    48ac:	15 c0       	rjmp	.+42     	; 0x48d8 <HPushBotton_voidPbIint+0x76>
					   break ;
					   
					   /** make direction of Pb2 is input */
		case Pb2_ID :  MDIO_voidSetPinDir     (Pb2_PORT , Pb2_PIN , Pb_INPUT) ;
    48ae:	81 e0       	ldi	r24, 0x01	; 1
    48b0:	61 e0       	ldi	r22, 0x01	; 1
    48b2:	40 e0       	ldi	r20, 0x00	; 0
    48b4:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		 
		               /**active pull up of Pb2 */
		               MDIO_voidConnectPullup (Pb2_PORT , Pb2_PIN , ENABLE_PULLUP) ;
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	61 e0       	ldi	r22, 0x01	; 1
    48bc:	41 e0       	ldi	r20, 0x01	; 1
    48be:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <MDIO_voidConnectPullup>
    48c2:	0a c0       	rjmp	.+20     	; 0x48d8 <HPushBotton_voidPbIint+0x76>
					   break ;
					   
					   /** make direction of Pb3 is input */
		case Pb3_ID :  MDIO_voidSetPinDir     (Pb3_PORT , Pb3_PIN , Pb_INPUT) ;
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	62 e0       	ldi	r22, 0x02	; 2
    48c8:	40 e0       	ldi	r20, 0x00	; 0
    48ca:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		      
			           /**active pull up of Pb3 */
		               MDIO_voidConnectPullup (Pb3_PORT , Pb3_PIN , ENABLE_PULLUP) ;
    48ce:	81 e0       	ldi	r24, 0x01	; 1
    48d0:	62 e0       	ldi	r22, 0x02	; 2
    48d2:	41 e0       	ldi	r20, 0x01	; 1
    48d4:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <MDIO_voidConnectPullup>
					   break ;
		default     :  /** Error */
		               break ;
	}
}
    48d8:	0f 90       	pop	r0
    48da:	0f 90       	pop	r0
    48dc:	0f 90       	pop	r0
    48de:	cf 91       	pop	r28
    48e0:	df 91       	pop	r29
    48e2:	08 95       	ret

000048e4 <HPushBotton_u8PbStatus>:

u8 HPushBotton_u8PbStatus (u8 A_u8PbID)
{
    48e4:	df 93       	push	r29
    48e6:	cf 93       	push	r28
    48e8:	cd b7       	in	r28, 0x3d	; 61
    48ea:	de b7       	in	r29, 0x3e	; 62
    48ec:	ec 97       	sbiw	r28, 0x3c	; 60
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	8a af       	std	Y+58, r24	; 0x3a
	u8 L_u8PbStatus = NOT_PRESSED ;
    48fa:	81 e0       	ldi	r24, 0x01	; 1
    48fc:	89 af       	std	Y+57, r24	; 0x39
	switch (A_u8PbID)
    48fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    4900:	28 2f       	mov	r18, r24
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	3c af       	std	Y+60, r19	; 0x3c
    4906:	2b af       	std	Y+59, r18	; 0x3b
    4908:	8b ad       	ldd	r24, Y+59	; 0x3b
    490a:	9c ad       	ldd	r25, Y+60	; 0x3c
    490c:	82 30       	cpi	r24, 0x02	; 2
    490e:	91 05       	cpc	r25, r1
    4910:	09 f4       	brne	.+2      	; 0x4914 <HPushBotton_u8PbStatus+0x30>
    4912:	8e c0       	rjmp	.+284    	; 0x4a30 <HPushBotton_u8PbStatus+0x14c>
    4914:	2b ad       	ldd	r18, Y+59	; 0x3b
    4916:	3c ad       	ldd	r19, Y+60	; 0x3c
    4918:	23 30       	cpi	r18, 0x03	; 3
    491a:	31 05       	cpc	r19, r1
    491c:	09 f4       	brne	.+2      	; 0x4920 <HPushBotton_u8PbStatus+0x3c>
    491e:	0a c1       	rjmp	.+532    	; 0x4b34 <HPushBotton_u8PbStatus+0x250>
    4920:	8b ad       	ldd	r24, Y+59	; 0x3b
    4922:	9c ad       	ldd	r25, Y+60	; 0x3c
    4924:	81 30       	cpi	r24, 0x01	; 1
    4926:	91 05       	cpc	r25, r1
    4928:	09 f0       	breq	.+2      	; 0x492c <HPushBotton_u8PbStatus+0x48>
    492a:	84 c1       	rjmp	.+776    	; 0x4c34 <HPushBotton_u8PbStatus+0x350>
	{                  /**check Pb1 is pressed or not*/
		case Pb1_ID :  if (MDIO_u8GetPinVal (Pb1_PORT , Pb1_PIN) == PRESSED)
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	0e 94 33 1b 	call	0x3666	; 0x3666 <MDIO_u8GetPinVal>
    4934:	88 23       	and	r24, r24
    4936:	09 f0       	breq	.+2      	; 0x493a <HPushBotton_u8PbStatus+0x56>
    4938:	7d c1       	rjmp	.+762    	; 0x4c34 <HPushBotton_u8PbStatus+0x350>
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	a0 ea       	ldi	r26, 0xA0	; 160
    4940:	b1 e4       	ldi	r27, 0x41	; 65
    4942:	8d ab       	std	Y+53, r24	; 0x35
    4944:	9e ab       	std	Y+54, r25	; 0x36
    4946:	af ab       	std	Y+55, r26	; 0x37
    4948:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    494a:	6d a9       	ldd	r22, Y+53	; 0x35
    494c:	7e a9       	ldd	r23, Y+54	; 0x36
    494e:	8f a9       	ldd	r24, Y+55	; 0x37
    4950:	98 ad       	ldd	r25, Y+56	; 0x38
    4952:	20 e0       	ldi	r18, 0x00	; 0
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	4a ef       	ldi	r20, 0xFA	; 250
    4958:	54 e4       	ldi	r21, 0x44	; 68
    495a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    495e:	dc 01       	movw	r26, r24
    4960:	cb 01       	movw	r24, r22
    4962:	89 ab       	std	Y+49, r24	; 0x31
    4964:	9a ab       	std	Y+50, r25	; 0x32
    4966:	ab ab       	std	Y+51, r26	; 0x33
    4968:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    496a:	69 a9       	ldd	r22, Y+49	; 0x31
    496c:	7a a9       	ldd	r23, Y+50	; 0x32
    496e:	8b a9       	ldd	r24, Y+51	; 0x33
    4970:	9c a9       	ldd	r25, Y+52	; 0x34
    4972:	20 e0       	ldi	r18, 0x00	; 0
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	40 e8       	ldi	r20, 0x80	; 128
    4978:	5f e3       	ldi	r21, 0x3F	; 63
    497a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    497e:	88 23       	and	r24, r24
    4980:	2c f4       	brge	.+10     	; 0x498c <HPushBotton_u8PbStatus+0xa8>
		__ticks = 1;
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	98 ab       	std	Y+48, r25	; 0x30
    4988:	8f a7       	std	Y+47, r24	; 0x2f
    498a:	3f c0       	rjmp	.+126    	; 0x4a0a <HPushBotton_u8PbStatus+0x126>
	else if (__tmp > 65535)
    498c:	69 a9       	ldd	r22, Y+49	; 0x31
    498e:	7a a9       	ldd	r23, Y+50	; 0x32
    4990:	8b a9       	ldd	r24, Y+51	; 0x33
    4992:	9c a9       	ldd	r25, Y+52	; 0x34
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	3f ef       	ldi	r19, 0xFF	; 255
    4998:	4f e7       	ldi	r20, 0x7F	; 127
    499a:	57 e4       	ldi	r21, 0x47	; 71
    499c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    49a0:	18 16       	cp	r1, r24
    49a2:	4c f5       	brge	.+82     	; 0x49f6 <HPushBotton_u8PbStatus+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a4:	6d a9       	ldd	r22, Y+53	; 0x35
    49a6:	7e a9       	ldd	r23, Y+54	; 0x36
    49a8:	8f a9       	ldd	r24, Y+55	; 0x37
    49aa:	98 ad       	ldd	r25, Y+56	; 0x38
    49ac:	20 e0       	ldi	r18, 0x00	; 0
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	40 e2       	ldi	r20, 0x20	; 32
    49b2:	51 e4       	ldi	r21, 0x41	; 65
    49b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49b8:	dc 01       	movw	r26, r24
    49ba:	cb 01       	movw	r24, r22
    49bc:	bc 01       	movw	r22, r24
    49be:	cd 01       	movw	r24, r26
    49c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c4:	dc 01       	movw	r26, r24
    49c6:	cb 01       	movw	r24, r22
    49c8:	98 ab       	std	Y+48, r25	; 0x30
    49ca:	8f a7       	std	Y+47, r24	; 0x2f
    49cc:	0f c0       	rjmp	.+30     	; 0x49ec <HPushBotton_u8PbStatus+0x108>
    49ce:	88 ec       	ldi	r24, 0xC8	; 200
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	9e a7       	std	Y+46, r25	; 0x2e
    49d4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    49d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    49d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    49da:	01 97       	sbiw	r24, 0x01	; 1
    49dc:	f1 f7       	brne	.-4      	; 0x49da <HPushBotton_u8PbStatus+0xf6>
    49de:	9e a7       	std	Y+46, r25	; 0x2e
    49e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    49e4:	98 a9       	ldd	r25, Y+48	; 0x30
    49e6:	01 97       	sbiw	r24, 0x01	; 1
    49e8:	98 ab       	std	Y+48, r25	; 0x30
    49ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    49ee:	98 a9       	ldd	r25, Y+48	; 0x30
    49f0:	00 97       	sbiw	r24, 0x00	; 0
    49f2:	69 f7       	brne	.-38     	; 0x49ce <HPushBotton_u8PbStatus+0xea>
    49f4:	14 c0       	rjmp	.+40     	; 0x4a1e <HPushBotton_u8PbStatus+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49f6:	69 a9       	ldd	r22, Y+49	; 0x31
    49f8:	7a a9       	ldd	r23, Y+50	; 0x32
    49fa:	8b a9       	ldd	r24, Y+51	; 0x33
    49fc:	9c a9       	ldd	r25, Y+52	; 0x34
    49fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a02:	dc 01       	movw	r26, r24
    4a04:	cb 01       	movw	r24, r22
    4a06:	98 ab       	std	Y+48, r25	; 0x30
    4a08:	8f a7       	std	Y+47, r24	; 0x2f
    4a0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a0c:	98 a9       	ldd	r25, Y+48	; 0x30
    4a0e:	9c a7       	std	Y+44, r25	; 0x2c
    4a10:	8b a7       	std	Y+43, r24	; 0x2b
    4a12:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a14:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a16:	01 97       	sbiw	r24, 0x01	; 1
    4a18:	f1 f7       	brne	.-4      	; 0x4a16 <HPushBotton_u8PbStatus+0x132>
    4a1a:	9c a7       	std	Y+44, r25	; 0x2c
    4a1c:	8b a7       	std	Y+43, r24	; 0x2b
		                {
							/**delay 20ms to detect bouncing*/
		                	_delay_ms (DELAY_FOR_DEPOUNCING) ;
							
							/**check Pb1 is still pressed or not after debouncing*/
							if (MDIO_u8GetPinVal (Pb1_PORT , Pb1_PIN) == PRESSED)
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	60 e0       	ldi	r22, 0x00	; 0
    4a22:	0e 94 33 1b 	call	0x3666	; 0x3666 <MDIO_u8GetPinVal>
    4a26:	88 23       	and	r24, r24
    4a28:	09 f0       	breq	.+2      	; 0x4a2c <HPushBotton_u8PbStatus+0x148>
    4a2a:	04 c1       	rjmp	.+520    	; 0x4c34 <HPushBotton_u8PbStatus+0x350>
							{
								L_u8PbStatus = PRESSED ;
    4a2c:	19 ae       	std	Y+57, r1	; 0x39
    4a2e:	02 c1       	rjmp	.+516    	; 0x4c34 <HPushBotton_u8PbStatus+0x350>
							}
		                }
					   break ;
					   
					   /**check Pb2 is pressed or not*/
		case Pb2_ID :  if (MDIO_u8GetPinVal (Pb2_PORT , Pb2_PIN) == PRESSED)
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	61 e0       	ldi	r22, 0x01	; 1
    4a34:	0e 94 33 1b 	call	0x3666	; 0x3666 <MDIO_u8GetPinVal>
    4a38:	88 23       	and	r24, r24
    4a3a:	09 f0       	breq	.+2      	; 0x4a3e <HPushBotton_u8PbStatus+0x15a>
    4a3c:	fb c0       	rjmp	.+502    	; 0x4c34 <HPushBotton_u8PbStatus+0x350>
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	a0 ea       	ldi	r26, 0xA0	; 160
    4a44:	b1 e4       	ldi	r27, 0x41	; 65
    4a46:	8f a3       	std	Y+39, r24	; 0x27
    4a48:	98 a7       	std	Y+40, r25	; 0x28
    4a4a:	a9 a7       	std	Y+41, r26	; 0x29
    4a4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a4e:	6f a1       	ldd	r22, Y+39	; 0x27
    4a50:	78 a5       	ldd	r23, Y+40	; 0x28
    4a52:	89 a5       	ldd	r24, Y+41	; 0x29
    4a54:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	30 e0       	ldi	r19, 0x00	; 0
    4a5a:	4a ef       	ldi	r20, 0xFA	; 250
    4a5c:	54 e4       	ldi	r21, 0x44	; 68
    4a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	8b a3       	std	Y+35, r24	; 0x23
    4a68:	9c a3       	std	Y+36, r25	; 0x24
    4a6a:	ad a3       	std	Y+37, r26	; 0x25
    4a6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a6e:	6b a1       	ldd	r22, Y+35	; 0x23
    4a70:	7c a1       	ldd	r23, Y+36	; 0x24
    4a72:	8d a1       	ldd	r24, Y+37	; 0x25
    4a74:	9e a1       	ldd	r25, Y+38	; 0x26
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e8       	ldi	r20, 0x80	; 128
    4a7c:	5f e3       	ldi	r21, 0x3F	; 63
    4a7e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4a82:	88 23       	and	r24, r24
    4a84:	2c f4       	brge	.+10     	; 0x4a90 <HPushBotton_u8PbStatus+0x1ac>
		__ticks = 1;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	9a a3       	std	Y+34, r25	; 0x22
    4a8c:	89 a3       	std	Y+33, r24	; 0x21
    4a8e:	3f c0       	rjmp	.+126    	; 0x4b0e <HPushBotton_u8PbStatus+0x22a>
	else if (__tmp > 65535)
    4a90:	6b a1       	ldd	r22, Y+35	; 0x23
    4a92:	7c a1       	ldd	r23, Y+36	; 0x24
    4a94:	8d a1       	ldd	r24, Y+37	; 0x25
    4a96:	9e a1       	ldd	r25, Y+38	; 0x26
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	3f ef       	ldi	r19, 0xFF	; 255
    4a9c:	4f e7       	ldi	r20, 0x7F	; 127
    4a9e:	57 e4       	ldi	r21, 0x47	; 71
    4aa0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4aa4:	18 16       	cp	r1, r24
    4aa6:	4c f5       	brge	.+82     	; 0x4afa <HPushBotton_u8PbStatus+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa8:	6f a1       	ldd	r22, Y+39	; 0x27
    4aaa:	78 a5       	ldd	r23, Y+40	; 0x28
    4aac:	89 a5       	ldd	r24, Y+41	; 0x29
    4aae:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	40 e2       	ldi	r20, 0x20	; 32
    4ab6:	51 e4       	ldi	r21, 0x41	; 65
    4ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	bc 01       	movw	r22, r24
    4ac2:	cd 01       	movw	r24, r26
    4ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	9a a3       	std	Y+34, r25	; 0x22
    4ace:	89 a3       	std	Y+33, r24	; 0x21
    4ad0:	0f c0       	rjmp	.+30     	; 0x4af0 <HPushBotton_u8PbStatus+0x20c>
    4ad2:	88 ec       	ldi	r24, 0xC8	; 200
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	98 a3       	std	Y+32, r25	; 0x20
    4ad8:	8f 8f       	std	Y+31, r24	; 0x1f
    4ada:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4adc:	98 a1       	ldd	r25, Y+32	; 0x20
    4ade:	01 97       	sbiw	r24, 0x01	; 1
    4ae0:	f1 f7       	brne	.-4      	; 0x4ade <HPushBotton_u8PbStatus+0x1fa>
    4ae2:	98 a3       	std	Y+32, r25	; 0x20
    4ae4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    4aea:	01 97       	sbiw	r24, 0x01	; 1
    4aec:	9a a3       	std	Y+34, r25	; 0x22
    4aee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af0:	89 a1       	ldd	r24, Y+33	; 0x21
    4af2:	9a a1       	ldd	r25, Y+34	; 0x22
    4af4:	00 97       	sbiw	r24, 0x00	; 0
    4af6:	69 f7       	brne	.-38     	; 0x4ad2 <HPushBotton_u8PbStatus+0x1ee>
    4af8:	14 c0       	rjmp	.+40     	; 0x4b22 <HPushBotton_u8PbStatus+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afa:	6b a1       	ldd	r22, Y+35	; 0x23
    4afc:	7c a1       	ldd	r23, Y+36	; 0x24
    4afe:	8d a1       	ldd	r24, Y+37	; 0x25
    4b00:	9e a1       	ldd	r25, Y+38	; 0x26
    4b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b06:	dc 01       	movw	r26, r24
    4b08:	cb 01       	movw	r24, r22
    4b0a:	9a a3       	std	Y+34, r25	; 0x22
    4b0c:	89 a3       	std	Y+33, r24	; 0x21
    4b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    4b10:	9a a1       	ldd	r25, Y+34	; 0x22
    4b12:	9e 8f       	std	Y+30, r25	; 0x1e
    4b14:	8d 8f       	std	Y+29, r24	; 0x1d
    4b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b1a:	01 97       	sbiw	r24, 0x01	; 1
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <HPushBotton_u8PbStatus+0x236>
    4b1e:	9e 8f       	std	Y+30, r25	; 0x1e
    4b20:	8d 8f       	std	Y+29, r24	; 0x1d
		                {
							/**delay 20ms to detect bouncing*/
		                	_delay_ms (DELAY_FOR_DEPOUNCING) ;
							
							/**check Pb2 is still pressed or not after debouncing*/
							if (MDIO_u8GetPinVal (Pb2_PORT , Pb2_PIN) == PRESSED)
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	61 e0       	ldi	r22, 0x01	; 1
    4b26:	0e 94 33 1b 	call	0x3666	; 0x3666 <MDIO_u8GetPinVal>
    4b2a:	88 23       	and	r24, r24
    4b2c:	09 f0       	breq	.+2      	; 0x4b30 <HPushBotton_u8PbStatus+0x24c>
    4b2e:	82 c0       	rjmp	.+260    	; 0x4c34 <HPushBotton_u8PbStatus+0x350>
							{
								L_u8PbStatus = PRESSED ;
    4b30:	19 ae       	std	Y+57, r1	; 0x39
    4b32:	80 c0       	rjmp	.+256    	; 0x4c34 <HPushBotton_u8PbStatus+0x350>
							}
		                }
					   break ;
					   
					   /**check Pb3 is pressed or not*/
		case Pb3_ID :  if (MDIO_u8GetPinVal (Pb3_PORT , Pb3_PIN) == PRESSED)
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	62 e0       	ldi	r22, 0x02	; 2
    4b38:	0e 94 33 1b 	call	0x3666	; 0x3666 <MDIO_u8GetPinVal>
    4b3c:	88 23       	and	r24, r24
    4b3e:	09 f0       	breq	.+2      	; 0x4b42 <HPushBotton_u8PbStatus+0x25e>
    4b40:	79 c0       	rjmp	.+242    	; 0x4c34 <HPushBotton_u8PbStatus+0x350>
    4b42:	80 e0       	ldi	r24, 0x00	; 0
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	a0 ea       	ldi	r26, 0xA0	; 160
    4b48:	b1 e4       	ldi	r27, 0x41	; 65
    4b4a:	89 8f       	std	Y+25, r24	; 0x19
    4b4c:	9a 8f       	std	Y+26, r25	; 0x1a
    4b4e:	ab 8f       	std	Y+27, r26	; 0x1b
    4b50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b52:	69 8d       	ldd	r22, Y+25	; 0x19
    4b54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b5a:	20 e0       	ldi	r18, 0x00	; 0
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	4a ef       	ldi	r20, 0xFA	; 250
    4b60:	54 e4       	ldi	r21, 0x44	; 68
    4b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b66:	dc 01       	movw	r26, r24
    4b68:	cb 01       	movw	r24, r22
    4b6a:	8d 8b       	std	Y+21, r24	; 0x15
    4b6c:	9e 8b       	std	Y+22, r25	; 0x16
    4b6e:	af 8b       	std	Y+23, r26	; 0x17
    4b70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b72:	6d 89       	ldd	r22, Y+21	; 0x15
    4b74:	7e 89       	ldd	r23, Y+22	; 0x16
    4b76:	8f 89       	ldd	r24, Y+23	; 0x17
    4b78:	98 8d       	ldd	r25, Y+24	; 0x18
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	40 e8       	ldi	r20, 0x80	; 128
    4b80:	5f e3       	ldi	r21, 0x3F	; 63
    4b82:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4b86:	88 23       	and	r24, r24
    4b88:	2c f4       	brge	.+10     	; 0x4b94 <HPushBotton_u8PbStatus+0x2b0>
		__ticks = 1;
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	9c 8b       	std	Y+20, r25	; 0x14
    4b90:	8b 8b       	std	Y+19, r24	; 0x13
    4b92:	3f c0       	rjmp	.+126    	; 0x4c12 <HPushBotton_u8PbStatus+0x32e>
	else if (__tmp > 65535)
    4b94:	6d 89       	ldd	r22, Y+21	; 0x15
    4b96:	7e 89       	ldd	r23, Y+22	; 0x16
    4b98:	8f 89       	ldd	r24, Y+23	; 0x17
    4b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	3f ef       	ldi	r19, 0xFF	; 255
    4ba0:	4f e7       	ldi	r20, 0x7F	; 127
    4ba2:	57 e4       	ldi	r21, 0x47	; 71
    4ba4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4ba8:	18 16       	cp	r1, r24
    4baa:	4c f5       	brge	.+82     	; 0x4bfe <HPushBotton_u8PbStatus+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bac:	69 8d       	ldd	r22, Y+25	; 0x19
    4bae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	40 e2       	ldi	r20, 0x20	; 32
    4bba:	51 e4       	ldi	r21, 0x41	; 65
    4bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	cb 01       	movw	r24, r22
    4bc4:	bc 01       	movw	r22, r24
    4bc6:	cd 01       	movw	r24, r26
    4bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bcc:	dc 01       	movw	r26, r24
    4bce:	cb 01       	movw	r24, r22
    4bd0:	9c 8b       	std	Y+20, r25	; 0x14
    4bd2:	8b 8b       	std	Y+19, r24	; 0x13
    4bd4:	0f c0       	rjmp	.+30     	; 0x4bf4 <HPushBotton_u8PbStatus+0x310>
    4bd6:	88 ec       	ldi	r24, 0xC8	; 200
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	9a 8b       	std	Y+18, r25	; 0x12
    4bdc:	89 8b       	std	Y+17, r24	; 0x11
    4bde:	89 89       	ldd	r24, Y+17	; 0x11
    4be0:	9a 89       	ldd	r25, Y+18	; 0x12
    4be2:	01 97       	sbiw	r24, 0x01	; 1
    4be4:	f1 f7       	brne	.-4      	; 0x4be2 <HPushBotton_u8PbStatus+0x2fe>
    4be6:	9a 8b       	std	Y+18, r25	; 0x12
    4be8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bea:	8b 89       	ldd	r24, Y+19	; 0x13
    4bec:	9c 89       	ldd	r25, Y+20	; 0x14
    4bee:	01 97       	sbiw	r24, 0x01	; 1
    4bf0:	9c 8b       	std	Y+20, r25	; 0x14
    4bf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    4bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    4bf8:	00 97       	sbiw	r24, 0x00	; 0
    4bfa:	69 f7       	brne	.-38     	; 0x4bd6 <HPushBotton_u8PbStatus+0x2f2>
    4bfc:	14 c0       	rjmp	.+40     	; 0x4c26 <HPushBotton_u8PbStatus+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    4c00:	7e 89       	ldd	r23, Y+22	; 0x16
    4c02:	8f 89       	ldd	r24, Y+23	; 0x17
    4c04:	98 8d       	ldd	r25, Y+24	; 0x18
    4c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	cb 01       	movw	r24, r22
    4c0e:	9c 8b       	std	Y+20, r25	; 0x14
    4c10:	8b 8b       	std	Y+19, r24	; 0x13
    4c12:	8b 89       	ldd	r24, Y+19	; 0x13
    4c14:	9c 89       	ldd	r25, Y+20	; 0x14
    4c16:	98 8b       	std	Y+16, r25	; 0x10
    4c18:	8f 87       	std	Y+15, r24	; 0x0f
    4c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c1c:	98 89       	ldd	r25, Y+16	; 0x10
    4c1e:	01 97       	sbiw	r24, 0x01	; 1
    4c20:	f1 f7       	brne	.-4      	; 0x4c1e <HPushBotton_u8PbStatus+0x33a>
    4c22:	98 8b       	std	Y+16, r25	; 0x10
    4c24:	8f 87       	std	Y+15, r24	; 0x0f
		                {
							/**delay 20ms to detect bouncing*/
		                	_delay_ms (DELAY_FOR_DEPOUNCING) ;
							
							/**check Pb3 is still pressed or not after debouncing*/
							if (MDIO_u8GetPinVal (Pb3_PORT , Pb3_PIN) == PRESSED)
    4c26:	81 e0       	ldi	r24, 0x01	; 1
    4c28:	62 e0       	ldi	r22, 0x02	; 2
    4c2a:	0e 94 33 1b 	call	0x3666	; 0x3666 <MDIO_u8GetPinVal>
    4c2e:	88 23       	and	r24, r24
    4c30:	09 f4       	brne	.+2      	; 0x4c34 <HPushBotton_u8PbStatus+0x350>
							{
								L_u8PbStatus = PRESSED ;
    4c32:	19 ae       	std	Y+57, r1	; 0x39
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	a0 ea       	ldi	r26, 0xA0	; 160
    4c3a:	b1 e4       	ldi	r27, 0x41	; 65
    4c3c:	8b 87       	std	Y+11, r24	; 0x0b
    4c3e:	9c 87       	std	Y+12, r25	; 0x0c
    4c40:	ad 87       	std	Y+13, r26	; 0x0d
    4c42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	4a ef       	ldi	r20, 0xFA	; 250
    4c52:	54 e4       	ldi	r21, 0x44	; 68
    4c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	8f 83       	std	Y+7, r24	; 0x07
    4c5e:	98 87       	std	Y+8, r25	; 0x08
    4c60:	a9 87       	std	Y+9, r26	; 0x09
    4c62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c64:	6f 81       	ldd	r22, Y+7	; 0x07
    4c66:	78 85       	ldd	r23, Y+8	; 0x08
    4c68:	89 85       	ldd	r24, Y+9	; 0x09
    4c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c6c:	20 e0       	ldi	r18, 0x00	; 0
    4c6e:	30 e0       	ldi	r19, 0x00	; 0
    4c70:	40 e8       	ldi	r20, 0x80	; 128
    4c72:	5f e3       	ldi	r21, 0x3F	; 63
    4c74:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4c78:	88 23       	and	r24, r24
    4c7a:	2c f4       	brge	.+10     	; 0x4c86 <HPushBotton_u8PbStatus+0x3a2>
		__ticks = 1;
    4c7c:	81 e0       	ldi	r24, 0x01	; 1
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	9e 83       	std	Y+6, r25	; 0x06
    4c82:	8d 83       	std	Y+5, r24	; 0x05
    4c84:	3f c0       	rjmp	.+126    	; 0x4d04 <HPushBotton_u8PbStatus+0x420>
	else if (__tmp > 65535)
    4c86:	6f 81       	ldd	r22, Y+7	; 0x07
    4c88:	78 85       	ldd	r23, Y+8	; 0x08
    4c8a:	89 85       	ldd	r24, Y+9	; 0x09
    4c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	3f ef       	ldi	r19, 0xFF	; 255
    4c92:	4f e7       	ldi	r20, 0x7F	; 127
    4c94:	57 e4       	ldi	r21, 0x47	; 71
    4c96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c9a:	18 16       	cp	r1, r24
    4c9c:	4c f5       	brge	.+82     	; 0x4cf0 <HPushBotton_u8PbStatus+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ca6:	20 e0       	ldi	r18, 0x00	; 0
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	40 e2       	ldi	r20, 0x20	; 32
    4cac:	51 e4       	ldi	r21, 0x41	; 65
    4cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb2:	dc 01       	movw	r26, r24
    4cb4:	cb 01       	movw	r24, r22
    4cb6:	bc 01       	movw	r22, r24
    4cb8:	cd 01       	movw	r24, r26
    4cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cbe:	dc 01       	movw	r26, r24
    4cc0:	cb 01       	movw	r24, r22
    4cc2:	9e 83       	std	Y+6, r25	; 0x06
    4cc4:	8d 83       	std	Y+5, r24	; 0x05
    4cc6:	0f c0       	rjmp	.+30     	; 0x4ce6 <HPushBotton_u8PbStatus+0x402>
    4cc8:	88 ec       	ldi	r24, 0xC8	; 200
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	9c 83       	std	Y+4, r25	; 0x04
    4cce:	8b 83       	std	Y+3, r24	; 0x03
    4cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd4:	01 97       	sbiw	r24, 0x01	; 1
    4cd6:	f1 f7       	brne	.-4      	; 0x4cd4 <HPushBotton_u8PbStatus+0x3f0>
    4cd8:	9c 83       	std	Y+4, r25	; 0x04
    4cda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cde:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce0:	01 97       	sbiw	r24, 0x01	; 1
    4ce2:	9e 83       	std	Y+6, r25	; 0x06
    4ce4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    4cea:	00 97       	sbiw	r24, 0x00	; 0
    4cec:	69 f7       	brne	.-38     	; 0x4cc8 <HPushBotton_u8PbStatus+0x3e4>
    4cee:	14 c0       	rjmp	.+40     	; 0x4d18 <HPushBotton_u8PbStatus+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    4cf2:	78 85       	ldd	r23, Y+8	; 0x08
    4cf4:	89 85       	ldd	r24, Y+9	; 0x09
    4cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cfc:	dc 01       	movw	r26, r24
    4cfe:	cb 01       	movw	r24, r22
    4d00:	9e 83       	std	Y+6, r25	; 0x06
    4d02:	8d 83       	std	Y+5, r24	; 0x05
    4d04:	8d 81       	ldd	r24, Y+5	; 0x05
    4d06:	9e 81       	ldd	r25, Y+6	; 0x06
    4d08:	9a 83       	std	Y+2, r25	; 0x02
    4d0a:	89 83       	std	Y+1, r24	; 0x01
    4d0c:	89 81       	ldd	r24, Y+1	; 0x01
    4d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d10:	01 97       	sbiw	r24, 0x01	; 1
    4d12:	f1 f7       	brne	.-4      	; 0x4d10 <HPushBotton_u8PbStatus+0x42c>
    4d14:	9a 83       	std	Y+2, r25	; 0x02
    4d16:	89 83       	std	Y+1, r24	; 0x01
		default     :  /** Error */
		               break ;
	}
	/**delay 20ms to detect bouncing*/
	_delay_ms (DELAY_FOR_DEPOUNCING) ;
	return L_u8PbStatus ;
    4d18:	89 ad       	ldd	r24, Y+57	; 0x39
    4d1a:	ec 96       	adiw	r28, 0x3c	; 60
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	f8 94       	cli
    4d20:	de bf       	out	0x3e, r29	; 62
    4d22:	0f be       	out	0x3f, r0	; 63
    4d24:	cd bf       	out	0x3d, r28	; 61
    4d26:	cf 91       	pop	r28
    4d28:	df 91       	pop	r29
    4d2a:	08 95       	ret

00004d2c <HLightingSensor_voidInt>:
#include "../../MCAL/ADC/ADC_int.h"
#include "LightingSensor_conf.h"
#include "LightingSensor_int.h"

void HLightingSensor_voidInt (void)
{
    4d2c:	df 93       	push	r29
    4d2e:	cf 93       	push	r28
    4d30:	cd b7       	in	r28, 0x3d	; 61
    4d32:	de b7       	in	r29, 0x3e	; 62
	/*Initialize ADC*/
	MADC_voidInt() ;
    4d34:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <MADC_voidInt>
}
    4d38:	cf 91       	pop	r28
    4d3a:	df 91       	pop	r29
    4d3c:	08 95       	ret

00004d3e <HLightingSensor_f32MeasureVout>:

f32 HLightingSensor_f32MeasureVout (void)
{
    4d3e:	df 93       	push	r29
    4d40:	cf 93       	push	r28
    4d42:	00 d0       	rcall	.+0      	; 0x4d44 <HLightingSensor_f32MeasureVout+0x6>
    4d44:	00 d0       	rcall	.+0      	; 0x4d46 <HLightingSensor_f32MeasureVout+0x8>
    4d46:	cd b7       	in	r28, 0x3d	; 61
    4d48:	de b7       	in	r29, 0x3e	; 62
	f32 L_f32Volt ;
	/*start conversion of ADC*/
	MADC_voidStartConversion(LIGHTING_SENSOR_CHANNEL) ;
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <MADC_voidStartConversion>
	step = Vref / resolution
	for Vref = 5 , n of bits = 10 --> resolution = 1024
	volt = read_val * 5 / 1024 (v)
	volt = 0.0048828 * read_val (v)
	*/
	L_f32Volt = MADC_u16GetADCData() * 0.0048828 ;
    4d50:	0e 94 f5 20 	call	0x41ea	; 0x41ea <MADC_u16GetADCData>
    4d54:	cc 01       	movw	r24, r24
    4d56:	a0 e0       	ldi	r26, 0x00	; 0
    4d58:	b0 e0       	ldi	r27, 0x00	; 0
    4d5a:	bc 01       	movw	r22, r24
    4d5c:	cd 01       	movw	r24, r26
    4d5e:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    4d62:	dc 01       	movw	r26, r24
    4d64:	cb 01       	movw	r24, r22
    4d66:	bc 01       	movw	r22, r24
    4d68:	cd 01       	movw	r24, r26
    4d6a:	25 ee       	ldi	r18, 0xE5	; 229
    4d6c:	3f ef       	ldi	r19, 0xFF	; 255
    4d6e:	4f e9       	ldi	r20, 0x9F	; 159
    4d70:	5b e3       	ldi	r21, 0x3B	; 59
    4d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d76:	dc 01       	movw	r26, r24
    4d78:	cb 01       	movw	r24, r22
    4d7a:	89 83       	std	Y+1, r24	; 0x01
    4d7c:	9a 83       	std	Y+2, r25	; 0x02
    4d7e:	ab 83       	std	Y+3, r26	; 0x03
    4d80:	bc 83       	std	Y+4, r27	; 0x04
	return L_f32Volt ;
    4d82:	89 81       	ldd	r24, Y+1	; 0x01
    4d84:	9a 81       	ldd	r25, Y+2	; 0x02
    4d86:	ab 81       	ldd	r26, Y+3	; 0x03
    4d88:	bc 81       	ldd	r27, Y+4	; 0x04
    4d8a:	bc 01       	movw	r22, r24
    4d8c:	cd 01       	movw	r24, r26
    4d8e:	0f 90       	pop	r0
    4d90:	0f 90       	pop	r0
    4d92:	0f 90       	pop	r0
    4d94:	0f 90       	pop	r0
    4d96:	cf 91       	pop	r28
    4d98:	df 91       	pop	r29
    4d9a:	08 95       	ret

00004d9c <HLED_voidLedInitial>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_int.h"
#include "LED_int.h"

void HLED_voidLedInitial (u8 A_u8LED_ID)
{
    4d9c:	df 93       	push	r29
    4d9e:	cf 93       	push	r28
    4da0:	00 d0       	rcall	.+0      	; 0x4da2 <HLED_voidLedInitial+0x6>
    4da2:	0f 92       	push	r0
    4da4:	cd b7       	in	r28, 0x3d	; 61
    4da6:	de b7       	in	r29, 0x3e	; 62
    4da8:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LED_ID)
    4daa:	89 81       	ldd	r24, Y+1	; 0x01
    4dac:	28 2f       	mov	r18, r24
    4dae:	30 e0       	ldi	r19, 0x00	; 0
    4db0:	3b 83       	std	Y+3, r19	; 0x03
    4db2:	2a 83       	std	Y+2, r18	; 0x02
    4db4:	8a 81       	ldd	r24, Y+2	; 0x02
    4db6:	9b 81       	ldd	r25, Y+3	; 0x03
    4db8:	84 30       	cpi	r24, 0x04	; 4
    4dba:	91 05       	cpc	r25, r1
    4dbc:	e1 f1       	breq	.+120    	; 0x4e36 <HLED_voidLedInitial+0x9a>
    4dbe:	2a 81       	ldd	r18, Y+2	; 0x02
    4dc0:	3b 81       	ldd	r19, Y+3	; 0x03
    4dc2:	25 30       	cpi	r18, 0x05	; 5
    4dc4:	31 05       	cpc	r19, r1
    4dc6:	84 f4       	brge	.+32     	; 0x4de8 <HLED_voidLedInitial+0x4c>
    4dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dca:	9b 81       	ldd	r25, Y+3	; 0x03
    4dcc:	82 30       	cpi	r24, 0x02	; 2
    4dce:	91 05       	cpc	r25, r1
    4dd0:	31 f1       	breq	.+76     	; 0x4e1e <HLED_voidLedInitial+0x82>
    4dd2:	2a 81       	ldd	r18, Y+2	; 0x02
    4dd4:	3b 81       	ldd	r19, Y+3	; 0x03
    4dd6:	23 30       	cpi	r18, 0x03	; 3
    4dd8:	31 05       	cpc	r19, r1
    4dda:	3c f5       	brge	.+78     	; 0x4e2a <HLED_voidLedInitial+0x8e>
    4ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dde:	9b 81       	ldd	r25, Y+3	; 0x03
    4de0:	81 30       	cpi	r24, 0x01	; 1
    4de2:	91 05       	cpc	r25, r1
    4de4:	b1 f0       	breq	.+44     	; 0x4e12 <HLED_voidLedInitial+0x76>
    4de6:	44 c0       	rjmp	.+136    	; 0x4e70 <HLED_voidLedInitial+0xd4>
    4de8:	2a 81       	ldd	r18, Y+2	; 0x02
    4dea:	3b 81       	ldd	r19, Y+3	; 0x03
    4dec:	26 30       	cpi	r18, 0x06	; 6
    4dee:	31 05       	cpc	r19, r1
    4df0:	71 f1       	breq	.+92     	; 0x4e4e <HLED_voidLedInitial+0xb2>
    4df2:	8a 81       	ldd	r24, Y+2	; 0x02
    4df4:	9b 81       	ldd	r25, Y+3	; 0x03
    4df6:	86 30       	cpi	r24, 0x06	; 6
    4df8:	91 05       	cpc	r25, r1
    4dfa:	1c f1       	brlt	.+70     	; 0x4e42 <HLED_voidLedInitial+0xa6>
    4dfc:	2a 81       	ldd	r18, Y+2	; 0x02
    4dfe:	3b 81       	ldd	r19, Y+3	; 0x03
    4e00:	27 30       	cpi	r18, 0x07	; 7
    4e02:	31 05       	cpc	r19, r1
    4e04:	51 f1       	breq	.+84     	; 0x4e5a <HLED_voidLedInitial+0xbe>
    4e06:	8a 81       	ldd	r24, Y+2	; 0x02
    4e08:	9b 81       	ldd	r25, Y+3	; 0x03
    4e0a:	88 30       	cpi	r24, 0x08	; 8
    4e0c:	91 05       	cpc	r25, r1
    4e0e:	59 f1       	breq	.+86     	; 0x4e66 <HLED_voidLedInitial+0xca>
    4e10:	2f c0       	rjmp	.+94     	; 0x4e70 <HLED_voidLedInitial+0xd4>
	{                  /**make direction of LED_1 is output*/
		case LED1_ID : MDIO_voidSetPinDir(LED1_PORT , LED1_PIN , LED_OUTPUT) ; break ;
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	60 e0       	ldi	r22, 0x00	; 0
    4e16:	41 e0       	ldi	r20, 0x01	; 1
    4e18:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
    4e1c:	29 c0       	rjmp	.+82     	; 0x4e70 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_2 is output*/
		case LED2_ID : MDIO_voidSetPinDir(LED2_PORT , LED2_PIN , LED_OUTPUT) ; break ;
    4e1e:	81 e0       	ldi	r24, 0x01	; 1
    4e20:	61 e0       	ldi	r22, 0x01	; 1
    4e22:	41 e0       	ldi	r20, 0x01	; 1
    4e24:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
    4e28:	23 c0       	rjmp	.+70     	; 0x4e70 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_3 is output*/
		case LED3_ID : MDIO_voidSetPinDir(LED3_PORT , LED3_PIN , LED_OUTPUT) ; break ;
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	62 e0       	ldi	r22, 0x02	; 2
    4e2e:	41 e0       	ldi	r20, 0x01	; 1
    4e30:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
    4e34:	1d c0       	rjmp	.+58     	; 0x4e70 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_4 is output*/
		case LED4_ID : MDIO_voidSetPinDir(LED4_PORT , LED4_PIN , LED_OUTPUT) ; break ;
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	63 e0       	ldi	r22, 0x03	; 3
    4e3a:	41 e0       	ldi	r20, 0x01	; 1
    4e3c:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
    4e40:	17 c0       	rjmp	.+46     	; 0x4e70 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_5 is output*/
		case LED5_ID : MDIO_voidSetPinDir(LED5_PORT , LED5_PIN , LED_OUTPUT) ; break ;
    4e42:	81 e0       	ldi	r24, 0x01	; 1
    4e44:	64 e0       	ldi	r22, 0x04	; 4
    4e46:	41 e0       	ldi	r20, 0x01	; 1
    4e48:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
    4e4c:	11 c0       	rjmp	.+34     	; 0x4e70 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_6 is output*/
		case LED6_ID : MDIO_voidSetPinDir(LED6_PORT , LED6_PIN , LED_OUTPUT) ; break ;
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	65 e0       	ldi	r22, 0x05	; 5
    4e52:	41 e0       	ldi	r20, 0x01	; 1
    4e54:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
    4e58:	0b c0       	rjmp	.+22     	; 0x4e70 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_7 is output*/
		case LED7_ID : MDIO_voidSetPinDir(LED7_PORT , LED7_PIN , LED_OUTPUT) ; break ;
    4e5a:	81 e0       	ldi	r24, 0x01	; 1
    4e5c:	66 e0       	ldi	r22, 0x06	; 6
    4e5e:	41 e0       	ldi	r20, 0x01	; 1
    4e60:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
    4e64:	05 c0       	rjmp	.+10     	; 0x4e70 <HLED_voidLedInitial+0xd4>
		
		               /**make direction of LED_8 is output*/
		case LED8_ID : MDIO_voidSetPinDir(LED8_PORT , LED8_PIN , LED_OUTPUT) ; break ;
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	67 e0       	ldi	r22, 0x07	; 7
    4e6a:	41 e0       	ldi	r20, 0x01	; 1
    4e6c:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		default      : /** Error */                                            break ;
	}
}
    4e70:	0f 90       	pop	r0
    4e72:	0f 90       	pop	r0
    4e74:	0f 90       	pop	r0
    4e76:	cf 91       	pop	r28
    4e78:	df 91       	pop	r29
    4e7a:	08 95       	ret

00004e7c <HLED_voidLedOn>:

void HLED_voidLedOn (u8 A_u8LED_ID)
{
    4e7c:	df 93       	push	r29
    4e7e:	cf 93       	push	r28
    4e80:	00 d0       	rcall	.+0      	; 0x4e82 <HLED_voidLedOn+0x6>
    4e82:	0f 92       	push	r0
    4e84:	cd b7       	in	r28, 0x3d	; 61
    4e86:	de b7       	in	r29, 0x3e	; 62
    4e88:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LED_ID)
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	28 2f       	mov	r18, r24
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	3b 83       	std	Y+3, r19	; 0x03
    4e92:	2a 83       	std	Y+2, r18	; 0x02
    4e94:	8a 81       	ldd	r24, Y+2	; 0x02
    4e96:	9b 81       	ldd	r25, Y+3	; 0x03
    4e98:	84 30       	cpi	r24, 0x04	; 4
    4e9a:	91 05       	cpc	r25, r1
    4e9c:	c9 f1       	breq	.+114    	; 0x4f10 <HLED_voidLedOn+0x94>
    4e9e:	2a 81       	ldd	r18, Y+2	; 0x02
    4ea0:	3b 81       	ldd	r19, Y+3	; 0x03
    4ea2:	25 30       	cpi	r18, 0x05	; 5
    4ea4:	31 05       	cpc	r19, r1
    4ea6:	84 f4       	brge	.+32     	; 0x4ec8 <HLED_voidLedOn+0x4c>
    4ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    4eac:	82 30       	cpi	r24, 0x02	; 2
    4eae:	91 05       	cpc	r25, r1
    4eb0:	29 f1       	breq	.+74     	; 0x4efc <HLED_voidLedOn+0x80>
    4eb2:	2a 81       	ldd	r18, Y+2	; 0x02
    4eb4:	3b 81       	ldd	r19, Y+3	; 0x03
    4eb6:	23 30       	cpi	r18, 0x03	; 3
    4eb8:	31 05       	cpc	r19, r1
    4eba:	2c f5       	brge	.+74     	; 0x4f06 <HLED_voidLedOn+0x8a>
    4ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    4ec0:	81 30       	cpi	r24, 0x01	; 1
    4ec2:	91 05       	cpc	r25, r1
    4ec4:	b1 f0       	breq	.+44     	; 0x4ef2 <HLED_voidLedOn+0x76>
    4ec6:	3c c0       	rjmp	.+120    	; 0x4f40 <HLED_voidLedOn+0xc4>
    4ec8:	2a 81       	ldd	r18, Y+2	; 0x02
    4eca:	3b 81       	ldd	r19, Y+3	; 0x03
    4ecc:	26 30       	cpi	r18, 0x06	; 6
    4ece:	31 05       	cpc	r19, r1
    4ed0:	49 f1       	breq	.+82     	; 0x4f24 <HLED_voidLedOn+0xa8>
    4ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ed6:	86 30       	cpi	r24, 0x06	; 6
    4ed8:	91 05       	cpc	r25, r1
    4eda:	fc f0       	brlt	.+62     	; 0x4f1a <HLED_voidLedOn+0x9e>
    4edc:	2a 81       	ldd	r18, Y+2	; 0x02
    4ede:	3b 81       	ldd	r19, Y+3	; 0x03
    4ee0:	27 30       	cpi	r18, 0x07	; 7
    4ee2:	31 05       	cpc	r19, r1
    4ee4:	21 f1       	breq	.+72     	; 0x4f2e <HLED_voidLedOn+0xb2>
    4ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    4eea:	88 30       	cpi	r24, 0x08	; 8
    4eec:	91 05       	cpc	r25, r1
    4eee:	21 f1       	breq	.+72     	; 0x4f38 <HLED_voidLedOn+0xbc>
    4ef0:	27 c0       	rjmp	.+78     	; 0x4f40 <HLED_voidLedOn+0xc4>
	{
		               /**turn on LED_1*/
		case LED1_ID : MDIO_voidSetPinVal(LED1_PORT , LED1_PIN) ; break ;
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	60 e0       	ldi	r22, 0x00	; 0
    4ef6:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    4efa:	22 c0       	rjmp	.+68     	; 0x4f40 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_2*/
		case LED2_ID : MDIO_voidSetPinVal(LED2_PORT , LED2_PIN) ; break ;
    4efc:	81 e0       	ldi	r24, 0x01	; 1
    4efe:	61 e0       	ldi	r22, 0x01	; 1
    4f00:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    4f04:	1d c0       	rjmp	.+58     	; 0x4f40 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_3*/
		case LED3_ID : MDIO_voidSetPinVal(LED3_PORT , LED3_PIN) ; break ;
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	62 e0       	ldi	r22, 0x02	; 2
    4f0a:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    4f0e:	18 c0       	rjmp	.+48     	; 0x4f40 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_4*/
		case LED4_ID : MDIO_voidSetPinVal(LED4_PORT , LED4_PIN) ; break ;
    4f10:	81 e0       	ldi	r24, 0x01	; 1
    4f12:	63 e0       	ldi	r22, 0x03	; 3
    4f14:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    4f18:	13 c0       	rjmp	.+38     	; 0x4f40 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_5*/
		case LED5_ID : MDIO_voidSetPinVal(LED5_PORT , LED5_PIN) ; break ;
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	64 e0       	ldi	r22, 0x04	; 4
    4f1e:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    4f22:	0e c0       	rjmp	.+28     	; 0x4f40 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_6*/
		case LED6_ID : MDIO_voidSetPinVal(LED6_PORT , LED6_PIN) ; break ;
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	65 e0       	ldi	r22, 0x05	; 5
    4f28:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    4f2c:	09 c0       	rjmp	.+18     	; 0x4f40 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_7*/
		case LED7_ID : MDIO_voidSetPinVal(LED7_PORT , LED7_PIN) ; break ;
    4f2e:	81 e0       	ldi	r24, 0x01	; 1
    4f30:	66 e0       	ldi	r22, 0x06	; 6
    4f32:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    4f36:	04 c0       	rjmp	.+8      	; 0x4f40 <HLED_voidLedOn+0xc4>
		
		               /**turn on LED_8*/
		case LED8_ID : MDIO_voidSetPinVal(LED8_PORT , LED8_PIN) ; break ;
    4f38:	81 e0       	ldi	r24, 0x01	; 1
    4f3a:	67 e0       	ldi	r22, 0x07	; 7
    4f3c:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
		default      : /** Error */                               break ;
	}
}
    4f40:	0f 90       	pop	r0
    4f42:	0f 90       	pop	r0
    4f44:	0f 90       	pop	r0
    4f46:	cf 91       	pop	r28
    4f48:	df 91       	pop	r29
    4f4a:	08 95       	ret

00004f4c <HLED_voidLedOff>:

void HLED_voidLedOff (u8 A_u8LED_ID)
{
    4f4c:	df 93       	push	r29
    4f4e:	cf 93       	push	r28
    4f50:	00 d0       	rcall	.+0      	; 0x4f52 <HLED_voidLedOff+0x6>
    4f52:	0f 92       	push	r0
    4f54:	cd b7       	in	r28, 0x3d	; 61
    4f56:	de b7       	in	r29, 0x3e	; 62
    4f58:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LED_ID)
    4f5a:	89 81       	ldd	r24, Y+1	; 0x01
    4f5c:	28 2f       	mov	r18, r24
    4f5e:	30 e0       	ldi	r19, 0x00	; 0
    4f60:	3b 83       	std	Y+3, r19	; 0x03
    4f62:	2a 83       	std	Y+2, r18	; 0x02
    4f64:	8a 81       	ldd	r24, Y+2	; 0x02
    4f66:	9b 81       	ldd	r25, Y+3	; 0x03
    4f68:	84 30       	cpi	r24, 0x04	; 4
    4f6a:	91 05       	cpc	r25, r1
    4f6c:	c9 f1       	breq	.+114    	; 0x4fe0 <HLED_voidLedOff+0x94>
    4f6e:	2a 81       	ldd	r18, Y+2	; 0x02
    4f70:	3b 81       	ldd	r19, Y+3	; 0x03
    4f72:	25 30       	cpi	r18, 0x05	; 5
    4f74:	31 05       	cpc	r19, r1
    4f76:	84 f4       	brge	.+32     	; 0x4f98 <HLED_voidLedOff+0x4c>
    4f78:	8a 81       	ldd	r24, Y+2	; 0x02
    4f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f7c:	82 30       	cpi	r24, 0x02	; 2
    4f7e:	91 05       	cpc	r25, r1
    4f80:	29 f1       	breq	.+74     	; 0x4fcc <HLED_voidLedOff+0x80>
    4f82:	2a 81       	ldd	r18, Y+2	; 0x02
    4f84:	3b 81       	ldd	r19, Y+3	; 0x03
    4f86:	23 30       	cpi	r18, 0x03	; 3
    4f88:	31 05       	cpc	r19, r1
    4f8a:	2c f5       	brge	.+74     	; 0x4fd6 <HLED_voidLedOff+0x8a>
    4f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    4f90:	81 30       	cpi	r24, 0x01	; 1
    4f92:	91 05       	cpc	r25, r1
    4f94:	b1 f0       	breq	.+44     	; 0x4fc2 <HLED_voidLedOff+0x76>
    4f96:	3c c0       	rjmp	.+120    	; 0x5010 <HLED_voidLedOff+0xc4>
    4f98:	2a 81       	ldd	r18, Y+2	; 0x02
    4f9a:	3b 81       	ldd	r19, Y+3	; 0x03
    4f9c:	26 30       	cpi	r18, 0x06	; 6
    4f9e:	31 05       	cpc	r19, r1
    4fa0:	49 f1       	breq	.+82     	; 0x4ff4 <HLED_voidLedOff+0xa8>
    4fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa6:	86 30       	cpi	r24, 0x06	; 6
    4fa8:	91 05       	cpc	r25, r1
    4faa:	fc f0       	brlt	.+62     	; 0x4fea <HLED_voidLedOff+0x9e>
    4fac:	2a 81       	ldd	r18, Y+2	; 0x02
    4fae:	3b 81       	ldd	r19, Y+3	; 0x03
    4fb0:	27 30       	cpi	r18, 0x07	; 7
    4fb2:	31 05       	cpc	r19, r1
    4fb4:	21 f1       	breq	.+72     	; 0x4ffe <HLED_voidLedOff+0xb2>
    4fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    4fba:	88 30       	cpi	r24, 0x08	; 8
    4fbc:	91 05       	cpc	r25, r1
    4fbe:	21 f1       	breq	.+72     	; 0x5008 <HLED_voidLedOff+0xbc>
    4fc0:	27 c0       	rjmp	.+78     	; 0x5010 <HLED_voidLedOff+0xc4>
	{                  /**turn off LED_1*/
		case LED1_ID : MDIO_voidClrPinVal(LED1_PORT , LED1_PIN) ; break ;
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	60 e0       	ldi	r22, 0x00	; 0
    4fc6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    4fca:	22 c0       	rjmp	.+68     	; 0x5010 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_2*/
		case LED2_ID : MDIO_voidClrPinVal(LED2_PORT , LED2_PIN) ; break ;
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	61 e0       	ldi	r22, 0x01	; 1
    4fd0:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    4fd4:	1d c0       	rjmp	.+58     	; 0x5010 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_3*/
		case LED3_ID : MDIO_voidClrPinVal(LED3_PORT , LED3_PIN) ; break ;
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	62 e0       	ldi	r22, 0x02	; 2
    4fda:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    4fde:	18 c0       	rjmp	.+48     	; 0x5010 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_4*/
		case LED4_ID : MDIO_voidClrPinVal(LED4_PORT , LED4_PIN) ; break ;
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	63 e0       	ldi	r22, 0x03	; 3
    4fe4:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    4fe8:	13 c0       	rjmp	.+38     	; 0x5010 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_5*/
		case LED5_ID : MDIO_voidClrPinVal(LED5_PORT , LED5_PIN) ; break ;
    4fea:	81 e0       	ldi	r24, 0x01	; 1
    4fec:	64 e0       	ldi	r22, 0x04	; 4
    4fee:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    4ff2:	0e c0       	rjmp	.+28     	; 0x5010 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_6*/
		case LED6_ID : MDIO_voidClrPinVal(LED6_PORT , LED6_PIN) ; break ;
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	65 e0       	ldi	r22, 0x05	; 5
    4ff8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    4ffc:	09 c0       	rjmp	.+18     	; 0x5010 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_7*/
		case LED7_ID : MDIO_voidClrPinVal(LED7_PORT , LED7_PIN) ; break ;
    4ffe:	81 e0       	ldi	r24, 0x01	; 1
    5000:	66 e0       	ldi	r22, 0x06	; 6
    5002:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    5006:	04 c0       	rjmp	.+8      	; 0x5010 <HLED_voidLedOff+0xc4>
		
		               /**turn off LED_8*/
		case LED8_ID : MDIO_voidClrPinVal(LED8_PORT , LED8_PIN) ; break ;
    5008:	81 e0       	ldi	r24, 0x01	; 1
    500a:	67 e0       	ldi	r22, 0x07	; 7
    500c:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
		default      : /** Error */                               break ;
	}
}
    5010:	0f 90       	pop	r0
    5012:	0f 90       	pop	r0
    5014:	0f 90       	pop	r0
    5016:	cf 91       	pop	r28
    5018:	df 91       	pop	r29
    501a:	08 95       	ret

0000501c <HLED_voidLedToggle>:

void HLED_voidLedToggle (u8 A_u8LED_ID)
{
    501c:	df 93       	push	r29
    501e:	cf 93       	push	r28
    5020:	00 d0       	rcall	.+0      	; 0x5022 <HLED_voidLedToggle+0x6>
    5022:	0f 92       	push	r0
    5024:	cd b7       	in	r28, 0x3d	; 61
    5026:	de b7       	in	r29, 0x3e	; 62
    5028:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LED_ID)
    502a:	89 81       	ldd	r24, Y+1	; 0x01
    502c:	28 2f       	mov	r18, r24
    502e:	30 e0       	ldi	r19, 0x00	; 0
    5030:	3b 83       	std	Y+3, r19	; 0x03
    5032:	2a 83       	std	Y+2, r18	; 0x02
    5034:	8a 81       	ldd	r24, Y+2	; 0x02
    5036:	9b 81       	ldd	r25, Y+3	; 0x03
    5038:	84 30       	cpi	r24, 0x04	; 4
    503a:	91 05       	cpc	r25, r1
    503c:	c9 f1       	breq	.+114    	; 0x50b0 <HLED_voidLedToggle+0x94>
    503e:	2a 81       	ldd	r18, Y+2	; 0x02
    5040:	3b 81       	ldd	r19, Y+3	; 0x03
    5042:	25 30       	cpi	r18, 0x05	; 5
    5044:	31 05       	cpc	r19, r1
    5046:	84 f4       	brge	.+32     	; 0x5068 <HLED_voidLedToggle+0x4c>
    5048:	8a 81       	ldd	r24, Y+2	; 0x02
    504a:	9b 81       	ldd	r25, Y+3	; 0x03
    504c:	82 30       	cpi	r24, 0x02	; 2
    504e:	91 05       	cpc	r25, r1
    5050:	29 f1       	breq	.+74     	; 0x509c <HLED_voidLedToggle+0x80>
    5052:	2a 81       	ldd	r18, Y+2	; 0x02
    5054:	3b 81       	ldd	r19, Y+3	; 0x03
    5056:	23 30       	cpi	r18, 0x03	; 3
    5058:	31 05       	cpc	r19, r1
    505a:	2c f5       	brge	.+74     	; 0x50a6 <HLED_voidLedToggle+0x8a>
    505c:	8a 81       	ldd	r24, Y+2	; 0x02
    505e:	9b 81       	ldd	r25, Y+3	; 0x03
    5060:	81 30       	cpi	r24, 0x01	; 1
    5062:	91 05       	cpc	r25, r1
    5064:	b1 f0       	breq	.+44     	; 0x5092 <HLED_voidLedToggle+0x76>
    5066:	3c c0       	rjmp	.+120    	; 0x50e0 <HLED_voidLedToggle+0xc4>
    5068:	2a 81       	ldd	r18, Y+2	; 0x02
    506a:	3b 81       	ldd	r19, Y+3	; 0x03
    506c:	26 30       	cpi	r18, 0x06	; 6
    506e:	31 05       	cpc	r19, r1
    5070:	49 f1       	breq	.+82     	; 0x50c4 <HLED_voidLedToggle+0xa8>
    5072:	8a 81       	ldd	r24, Y+2	; 0x02
    5074:	9b 81       	ldd	r25, Y+3	; 0x03
    5076:	86 30       	cpi	r24, 0x06	; 6
    5078:	91 05       	cpc	r25, r1
    507a:	fc f0       	brlt	.+62     	; 0x50ba <HLED_voidLedToggle+0x9e>
    507c:	2a 81       	ldd	r18, Y+2	; 0x02
    507e:	3b 81       	ldd	r19, Y+3	; 0x03
    5080:	27 30       	cpi	r18, 0x07	; 7
    5082:	31 05       	cpc	r19, r1
    5084:	21 f1       	breq	.+72     	; 0x50ce <HLED_voidLedToggle+0xb2>
    5086:	8a 81       	ldd	r24, Y+2	; 0x02
    5088:	9b 81       	ldd	r25, Y+3	; 0x03
    508a:	88 30       	cpi	r24, 0x08	; 8
    508c:	91 05       	cpc	r25, r1
    508e:	21 f1       	breq	.+72     	; 0x50d8 <HLED_voidLedToggle+0xbc>
    5090:	27 c0       	rjmp	.+78     	; 0x50e0 <HLED_voidLedToggle+0xc4>
	{
		               /**inverse status of LED_1*/
		case LED1_ID : MDIO_voidTogPinVal(LED1_PORT , LED1_PIN) ; break ;
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	60 e0       	ldi	r22, 0x00	; 0
    5096:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <MDIO_voidTogPinVal>
    509a:	22 c0       	rjmp	.+68     	; 0x50e0 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_2*/
		case LED2_ID : MDIO_voidTogPinVal(LED2_PORT , LED2_PIN) ; break ;
    509c:	81 e0       	ldi	r24, 0x01	; 1
    509e:	61 e0       	ldi	r22, 0x01	; 1
    50a0:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <MDIO_voidTogPinVal>
    50a4:	1d c0       	rjmp	.+58     	; 0x50e0 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_3*/
		case LED3_ID : MDIO_voidTogPinVal(LED3_PORT , LED3_PIN) ; break ;
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	62 e0       	ldi	r22, 0x02	; 2
    50aa:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <MDIO_voidTogPinVal>
    50ae:	18 c0       	rjmp	.+48     	; 0x50e0 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_4*/
		case LED4_ID : MDIO_voidTogPinVal(LED4_PORT , LED4_PIN) ; break ;
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	63 e0       	ldi	r22, 0x03	; 3
    50b4:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <MDIO_voidTogPinVal>
    50b8:	13 c0       	rjmp	.+38     	; 0x50e0 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_5*/
		case LED5_ID : MDIO_voidTogPinVal(LED5_PORT , LED5_PIN) ; break ;
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	64 e0       	ldi	r22, 0x04	; 4
    50be:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <MDIO_voidTogPinVal>
    50c2:	0e c0       	rjmp	.+28     	; 0x50e0 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_6*/
		case LED6_ID : MDIO_voidTogPinVal(LED6_PORT , LED6_PIN) ; break ;
    50c4:	81 e0       	ldi	r24, 0x01	; 1
    50c6:	65 e0       	ldi	r22, 0x05	; 5
    50c8:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <MDIO_voidTogPinVal>
    50cc:	09 c0       	rjmp	.+18     	; 0x50e0 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_7*/
		case LED7_ID : MDIO_voidTogPinVal(LED7_PORT , LED7_PIN) ; break ;
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	66 e0       	ldi	r22, 0x06	; 6
    50d2:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <MDIO_voidTogPinVal>
    50d6:	04 c0       	rjmp	.+8      	; 0x50e0 <HLED_voidLedToggle+0xc4>
		
		               /**inverse status of LED_8*/
		case LED8_ID : MDIO_voidTogPinVal(LED8_PORT , LED8_PIN) ; break ;
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	67 e0       	ldi	r22, 0x07	; 7
    50dc:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <MDIO_voidTogPinVal>
		default      : /** Error */                               break ;
	}
}
    50e0:	0f 90       	pop	r0
    50e2:	0f 90       	pop	r0
    50e4:	0f 90       	pop	r0
    50e6:	cf 91       	pop	r28
    50e8:	df 91       	pop	r29
    50ea:	08 95       	ret

000050ec <HLCD_voidSendCmd>:
#include <util/delay.h>
#include "LCD_conf.h"
#include "LCD_private.h"

void HLCD_voidSendCmd(u8 A_u8CmdID)
{
    50ec:	0f 93       	push	r16
    50ee:	1f 93       	push	r17
    50f0:	df 93       	push	r29
    50f2:	cf 93       	push	r28
    50f4:	cd b7       	in	r28, 0x3d	; 61
    50f6:	de b7       	in	r29, 0x3e	; 62
    50f8:	c7 54       	subi	r28, 0x47	; 71
    50fa:	d0 40       	sbci	r29, 0x00	; 0
    50fc:	0f b6       	in	r0, 0x3f	; 63
    50fe:	f8 94       	cli
    5100:	de bf       	out	0x3e, r29	; 62
    5102:	0f be       	out	0x3f, r0	; 63
    5104:	cd bf       	out	0x3d, r28	; 61
    5106:	fe 01       	movw	r30, r28
    5108:	e9 5b       	subi	r30, 0xB9	; 185
    510a:	ff 4f       	sbci	r31, 0xFF	; 255
    510c:	80 83       	st	Z, r24
	    _delay_ms (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    510e:	84 e0       	ldi	r24, 0x04	; 4
    5110:	64 e0       	ldi	r22, 0x04	; 4
    5112:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	    
	    /**send last four bits of data to last four bit at control register */
	    MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8CmdID >> FOUR_BITS) ;
    5116:	fe 01       	movw	r30, r28
    5118:	e9 5b       	subi	r30, 0xB9	; 185
    511a:	ff 4f       	sbci	r31, 0xFF	; 255
    511c:	80 81       	ld	r24, Z
    511e:	98 2f       	mov	r25, r24
    5120:	92 95       	swap	r25
    5122:	9f 70       	andi	r25, 0x0F	; 15
    5124:	81 e0       	ldi	r24, 0x01	; 1
    5126:	69 2f       	mov	r22, r25
    5128:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <MDIO_voidWriteHighNibble>
	    
	    /**set register select to low */
	    MDIO_voidClrPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    512c:	84 e0       	ldi	r24, 0x04	; 4
    512e:	62 e0       	ldi	r22, 0x02	; 2
    5130:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	    
	    /**set enable to high */
	    MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    5134:	84 e0       	ldi	r24, 0x04	; 4
    5136:	63 e0       	ldi	r22, 0x03	; 3
    5138:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    513c:	fe 01       	movw	r30, r28
    513e:	ed 5b       	subi	r30, 0xBD	; 189
    5140:	ff 4f       	sbci	r31, 0xFF	; 255
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	a0 e0       	ldi	r26, 0x00	; 0
    5148:	b0 e4       	ldi	r27, 0x40	; 64
    514a:	80 83       	st	Z, r24
    514c:	91 83       	std	Z+1, r25	; 0x01
    514e:	a2 83       	std	Z+2, r26	; 0x02
    5150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5152:	8e 01       	movw	r16, r28
    5154:	01 5c       	subi	r16, 0xC1	; 193
    5156:	1f 4f       	sbci	r17, 0xFF	; 255
    5158:	fe 01       	movw	r30, r28
    515a:	ed 5b       	subi	r30, 0xBD	; 189
    515c:	ff 4f       	sbci	r31, 0xFF	; 255
    515e:	60 81       	ld	r22, Z
    5160:	71 81       	ldd	r23, Z+1	; 0x01
    5162:	82 81       	ldd	r24, Z+2	; 0x02
    5164:	93 81       	ldd	r25, Z+3	; 0x03
    5166:	20 e0       	ldi	r18, 0x00	; 0
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	4a ef       	ldi	r20, 0xFA	; 250
    516c:	54 e4       	ldi	r21, 0x44	; 68
    516e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5172:	dc 01       	movw	r26, r24
    5174:	cb 01       	movw	r24, r22
    5176:	f8 01       	movw	r30, r16
    5178:	80 83       	st	Z, r24
    517a:	91 83       	std	Z+1, r25	; 0x01
    517c:	a2 83       	std	Z+2, r26	; 0x02
    517e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5180:	fe 01       	movw	r30, r28
    5182:	ff 96       	adiw	r30, 0x3f	; 63
    5184:	60 81       	ld	r22, Z
    5186:	71 81       	ldd	r23, Z+1	; 0x01
    5188:	82 81       	ldd	r24, Z+2	; 0x02
    518a:	93 81       	ldd	r25, Z+3	; 0x03
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	40 e8       	ldi	r20, 0x80	; 128
    5192:	5f e3       	ldi	r21, 0x3F	; 63
    5194:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5198:	88 23       	and	r24, r24
    519a:	2c f4       	brge	.+10     	; 0x51a6 <HLCD_voidSendCmd+0xba>
		__ticks = 1;
    519c:	81 e0       	ldi	r24, 0x01	; 1
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	9e af       	std	Y+62, r25	; 0x3e
    51a2:	8d af       	std	Y+61, r24	; 0x3d
    51a4:	46 c0       	rjmp	.+140    	; 0x5232 <HLCD_voidSendCmd+0x146>
	else if (__tmp > 65535)
    51a6:	fe 01       	movw	r30, r28
    51a8:	ff 96       	adiw	r30, 0x3f	; 63
    51aa:	60 81       	ld	r22, Z
    51ac:	71 81       	ldd	r23, Z+1	; 0x01
    51ae:	82 81       	ldd	r24, Z+2	; 0x02
    51b0:	93 81       	ldd	r25, Z+3	; 0x03
    51b2:	20 e0       	ldi	r18, 0x00	; 0
    51b4:	3f ef       	ldi	r19, 0xFF	; 255
    51b6:	4f e7       	ldi	r20, 0x7F	; 127
    51b8:	57 e4       	ldi	r21, 0x47	; 71
    51ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    51be:	18 16       	cp	r1, r24
    51c0:	64 f5       	brge	.+88     	; 0x521a <HLCD_voidSendCmd+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51c2:	fe 01       	movw	r30, r28
    51c4:	ed 5b       	subi	r30, 0xBD	; 189
    51c6:	ff 4f       	sbci	r31, 0xFF	; 255
    51c8:	60 81       	ld	r22, Z
    51ca:	71 81       	ldd	r23, Z+1	; 0x01
    51cc:	82 81       	ldd	r24, Z+2	; 0x02
    51ce:	93 81       	ldd	r25, Z+3	; 0x03
    51d0:	20 e0       	ldi	r18, 0x00	; 0
    51d2:	30 e0       	ldi	r19, 0x00	; 0
    51d4:	40 e2       	ldi	r20, 0x20	; 32
    51d6:	51 e4       	ldi	r21, 0x41	; 65
    51d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51dc:	dc 01       	movw	r26, r24
    51de:	cb 01       	movw	r24, r22
    51e0:	bc 01       	movw	r22, r24
    51e2:	cd 01       	movw	r24, r26
    51e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e8:	dc 01       	movw	r26, r24
    51ea:	cb 01       	movw	r24, r22
    51ec:	9e af       	std	Y+62, r25	; 0x3e
    51ee:	8d af       	std	Y+61, r24	; 0x3d
    51f0:	0f c0       	rjmp	.+30     	; 0x5210 <HLCD_voidSendCmd+0x124>
    51f2:	88 ec       	ldi	r24, 0xC8	; 200
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	9c af       	std	Y+60, r25	; 0x3c
    51f8:	8b af       	std	Y+59, r24	; 0x3b
    51fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    51fc:	9c ad       	ldd	r25, Y+60	; 0x3c
    51fe:	01 97       	sbiw	r24, 0x01	; 1
    5200:	f1 f7       	brne	.-4      	; 0x51fe <HLCD_voidSendCmd+0x112>
    5202:	9c af       	std	Y+60, r25	; 0x3c
    5204:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5206:	8d ad       	ldd	r24, Y+61	; 0x3d
    5208:	9e ad       	ldd	r25, Y+62	; 0x3e
    520a:	01 97       	sbiw	r24, 0x01	; 1
    520c:	9e af       	std	Y+62, r25	; 0x3e
    520e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5210:	8d ad       	ldd	r24, Y+61	; 0x3d
    5212:	9e ad       	ldd	r25, Y+62	; 0x3e
    5214:	00 97       	sbiw	r24, 0x00	; 0
    5216:	69 f7       	brne	.-38     	; 0x51f2 <HLCD_voidSendCmd+0x106>
    5218:	16 c0       	rjmp	.+44     	; 0x5246 <HLCD_voidSendCmd+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    521a:	fe 01       	movw	r30, r28
    521c:	ff 96       	adiw	r30, 0x3f	; 63
    521e:	60 81       	ld	r22, Z
    5220:	71 81       	ldd	r23, Z+1	; 0x01
    5222:	82 81       	ldd	r24, Z+2	; 0x02
    5224:	93 81       	ldd	r25, Z+3	; 0x03
    5226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    522a:	dc 01       	movw	r26, r24
    522c:	cb 01       	movw	r24, r22
    522e:	9e af       	std	Y+62, r25	; 0x3e
    5230:	8d af       	std	Y+61, r24	; 0x3d
    5232:	8d ad       	ldd	r24, Y+61	; 0x3d
    5234:	9e ad       	ldd	r25, Y+62	; 0x3e
    5236:	9a af       	std	Y+58, r25	; 0x3a
    5238:	89 af       	std	Y+57, r24	; 0x39
    523a:	89 ad       	ldd	r24, Y+57	; 0x39
    523c:	9a ad       	ldd	r25, Y+58	; 0x3a
    523e:	01 97       	sbiw	r24, 0x01	; 1
    5240:	f1 f7       	brne	.-4      	; 0x523e <HLCD_voidSendCmd+0x152>
    5242:	9a af       	std	Y+58, r25	; 0x3a
    5244:	89 af       	std	Y+57, r24	; 0x39
	    
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    /**set enable to low */
	    MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    5246:	84 e0       	ldi	r24, 0x04	; 4
    5248:	63 e0       	ldi	r22, 0x03	; 3
    524a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    524e:	80 e0       	ldi	r24, 0x00	; 0
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	a0 e0       	ldi	r26, 0x00	; 0
    5254:	b0 e4       	ldi	r27, 0x40	; 64
    5256:	8d ab       	std	Y+53, r24	; 0x35
    5258:	9e ab       	std	Y+54, r25	; 0x36
    525a:	af ab       	std	Y+55, r26	; 0x37
    525c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    525e:	6d a9       	ldd	r22, Y+53	; 0x35
    5260:	7e a9       	ldd	r23, Y+54	; 0x36
    5262:	8f a9       	ldd	r24, Y+55	; 0x37
    5264:	98 ad       	ldd	r25, Y+56	; 0x38
    5266:	20 e0       	ldi	r18, 0x00	; 0
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	4a ef       	ldi	r20, 0xFA	; 250
    526c:	54 e4       	ldi	r21, 0x44	; 68
    526e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5272:	dc 01       	movw	r26, r24
    5274:	cb 01       	movw	r24, r22
    5276:	89 ab       	std	Y+49, r24	; 0x31
    5278:	9a ab       	std	Y+50, r25	; 0x32
    527a:	ab ab       	std	Y+51, r26	; 0x33
    527c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    527e:	69 a9       	ldd	r22, Y+49	; 0x31
    5280:	7a a9       	ldd	r23, Y+50	; 0x32
    5282:	8b a9       	ldd	r24, Y+51	; 0x33
    5284:	9c a9       	ldd	r25, Y+52	; 0x34
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	40 e8       	ldi	r20, 0x80	; 128
    528c:	5f e3       	ldi	r21, 0x3F	; 63
    528e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5292:	88 23       	and	r24, r24
    5294:	2c f4       	brge	.+10     	; 0x52a0 <HLCD_voidSendCmd+0x1b4>
		__ticks = 1;
    5296:	81 e0       	ldi	r24, 0x01	; 1
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	98 ab       	std	Y+48, r25	; 0x30
    529c:	8f a7       	std	Y+47, r24	; 0x2f
    529e:	3f c0       	rjmp	.+126    	; 0x531e <HLCD_voidSendCmd+0x232>
	else if (__tmp > 65535)
    52a0:	69 a9       	ldd	r22, Y+49	; 0x31
    52a2:	7a a9       	ldd	r23, Y+50	; 0x32
    52a4:	8b a9       	ldd	r24, Y+51	; 0x33
    52a6:	9c a9       	ldd	r25, Y+52	; 0x34
    52a8:	20 e0       	ldi	r18, 0x00	; 0
    52aa:	3f ef       	ldi	r19, 0xFF	; 255
    52ac:	4f e7       	ldi	r20, 0x7F	; 127
    52ae:	57 e4       	ldi	r21, 0x47	; 71
    52b0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    52b4:	18 16       	cp	r1, r24
    52b6:	4c f5       	brge	.+82     	; 0x530a <HLCD_voidSendCmd+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52b8:	6d a9       	ldd	r22, Y+53	; 0x35
    52ba:	7e a9       	ldd	r23, Y+54	; 0x36
    52bc:	8f a9       	ldd	r24, Y+55	; 0x37
    52be:	98 ad       	ldd	r25, Y+56	; 0x38
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	40 e2       	ldi	r20, 0x20	; 32
    52c6:	51 e4       	ldi	r21, 0x41	; 65
    52c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52cc:	dc 01       	movw	r26, r24
    52ce:	cb 01       	movw	r24, r22
    52d0:	bc 01       	movw	r22, r24
    52d2:	cd 01       	movw	r24, r26
    52d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52d8:	dc 01       	movw	r26, r24
    52da:	cb 01       	movw	r24, r22
    52dc:	98 ab       	std	Y+48, r25	; 0x30
    52de:	8f a7       	std	Y+47, r24	; 0x2f
    52e0:	0f c0       	rjmp	.+30     	; 0x5300 <HLCD_voidSendCmd+0x214>
    52e2:	88 ec       	ldi	r24, 0xC8	; 200
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	9e a7       	std	Y+46, r25	; 0x2e
    52e8:	8d a7       	std	Y+45, r24	; 0x2d
    52ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    52ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    52ee:	01 97       	sbiw	r24, 0x01	; 1
    52f0:	f1 f7       	brne	.-4      	; 0x52ee <HLCD_voidSendCmd+0x202>
    52f2:	9e a7       	std	Y+46, r25	; 0x2e
    52f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    52f8:	98 a9       	ldd	r25, Y+48	; 0x30
    52fa:	01 97       	sbiw	r24, 0x01	; 1
    52fc:	98 ab       	std	Y+48, r25	; 0x30
    52fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5300:	8f a5       	ldd	r24, Y+47	; 0x2f
    5302:	98 a9       	ldd	r25, Y+48	; 0x30
    5304:	00 97       	sbiw	r24, 0x00	; 0
    5306:	69 f7       	brne	.-38     	; 0x52e2 <HLCD_voidSendCmd+0x1f6>
    5308:	14 c0       	rjmp	.+40     	; 0x5332 <HLCD_voidSendCmd+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    530a:	69 a9       	ldd	r22, Y+49	; 0x31
    530c:	7a a9       	ldd	r23, Y+50	; 0x32
    530e:	8b a9       	ldd	r24, Y+51	; 0x33
    5310:	9c a9       	ldd	r25, Y+52	; 0x34
    5312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5316:	dc 01       	movw	r26, r24
    5318:	cb 01       	movw	r24, r22
    531a:	98 ab       	std	Y+48, r25	; 0x30
    531c:	8f a7       	std	Y+47, r24	; 0x2f
    531e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5320:	98 a9       	ldd	r25, Y+48	; 0x30
    5322:	9c a7       	std	Y+44, r25	; 0x2c
    5324:	8b a7       	std	Y+43, r24	; 0x2b
    5326:	8b a5       	ldd	r24, Y+43	; 0x2b
    5328:	9c a5       	ldd	r25, Y+44	; 0x2c
    532a:	01 97       	sbiw	r24, 0x01	; 1
    532c:	f1 f7       	brne	.-4      	; 0x532a <HLCD_voidSendCmd+0x23e>
    532e:	9c a7       	std	Y+44, r25	; 0x2c
    5330:	8b a7       	std	Y+43, r24	; 0x2b
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    5332:	84 e0       	ldi	r24, 0x04	; 4
    5334:	64 e0       	ldi	r22, 0x04	; 4
    5336:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	    
	    /**send last four bits of data to last four bit at control register */
	    MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8CmdID) ;
    533a:	fe 01       	movw	r30, r28
    533c:	e9 5b       	subi	r30, 0xB9	; 185
    533e:	ff 4f       	sbci	r31, 0xFF	; 255
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	60 81       	ld	r22, Z
    5344:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <MDIO_voidWriteHighNibble>
	    
	    /**set register select to low */
	    MDIO_voidClrPinVal (LCD_RS_PORT , LCD_RS_PIN ) ;
    5348:	84 e0       	ldi	r24, 0x04	; 4
    534a:	62 e0       	ldi	r22, 0x02	; 2
    534c:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	    
	    /**set enable to high */
	    MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    5350:	84 e0       	ldi	r24, 0x04	; 4
    5352:	63 e0       	ldi	r22, 0x03	; 3
    5354:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    5358:	80 e0       	ldi	r24, 0x00	; 0
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	a0 e0       	ldi	r26, 0x00	; 0
    535e:	b0 e4       	ldi	r27, 0x40	; 64
    5360:	8f a3       	std	Y+39, r24	; 0x27
    5362:	98 a7       	std	Y+40, r25	; 0x28
    5364:	a9 a7       	std	Y+41, r26	; 0x29
    5366:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5368:	6f a1       	ldd	r22, Y+39	; 0x27
    536a:	78 a5       	ldd	r23, Y+40	; 0x28
    536c:	89 a5       	ldd	r24, Y+41	; 0x29
    536e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5370:	20 e0       	ldi	r18, 0x00	; 0
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	4a ef       	ldi	r20, 0xFA	; 250
    5376:	54 e4       	ldi	r21, 0x44	; 68
    5378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    537c:	dc 01       	movw	r26, r24
    537e:	cb 01       	movw	r24, r22
    5380:	8b a3       	std	Y+35, r24	; 0x23
    5382:	9c a3       	std	Y+36, r25	; 0x24
    5384:	ad a3       	std	Y+37, r26	; 0x25
    5386:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5388:	6b a1       	ldd	r22, Y+35	; 0x23
    538a:	7c a1       	ldd	r23, Y+36	; 0x24
    538c:	8d a1       	ldd	r24, Y+37	; 0x25
    538e:	9e a1       	ldd	r25, Y+38	; 0x26
    5390:	20 e0       	ldi	r18, 0x00	; 0
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	40 e8       	ldi	r20, 0x80	; 128
    5396:	5f e3       	ldi	r21, 0x3F	; 63
    5398:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    539c:	88 23       	and	r24, r24
    539e:	2c f4       	brge	.+10     	; 0x53aa <HLCD_voidSendCmd+0x2be>
		__ticks = 1;
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	9a a3       	std	Y+34, r25	; 0x22
    53a6:	89 a3       	std	Y+33, r24	; 0x21
    53a8:	3f c0       	rjmp	.+126    	; 0x5428 <HLCD_voidSendCmd+0x33c>
	else if (__tmp > 65535)
    53aa:	6b a1       	ldd	r22, Y+35	; 0x23
    53ac:	7c a1       	ldd	r23, Y+36	; 0x24
    53ae:	8d a1       	ldd	r24, Y+37	; 0x25
    53b0:	9e a1       	ldd	r25, Y+38	; 0x26
    53b2:	20 e0       	ldi	r18, 0x00	; 0
    53b4:	3f ef       	ldi	r19, 0xFF	; 255
    53b6:	4f e7       	ldi	r20, 0x7F	; 127
    53b8:	57 e4       	ldi	r21, 0x47	; 71
    53ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    53be:	18 16       	cp	r1, r24
    53c0:	4c f5       	brge	.+82     	; 0x5414 <HLCD_voidSendCmd+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53c2:	6f a1       	ldd	r22, Y+39	; 0x27
    53c4:	78 a5       	ldd	r23, Y+40	; 0x28
    53c6:	89 a5       	ldd	r24, Y+41	; 0x29
    53c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    53ca:	20 e0       	ldi	r18, 0x00	; 0
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	40 e2       	ldi	r20, 0x20	; 32
    53d0:	51 e4       	ldi	r21, 0x41	; 65
    53d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53d6:	dc 01       	movw	r26, r24
    53d8:	cb 01       	movw	r24, r22
    53da:	bc 01       	movw	r22, r24
    53dc:	cd 01       	movw	r24, r26
    53de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53e2:	dc 01       	movw	r26, r24
    53e4:	cb 01       	movw	r24, r22
    53e6:	9a a3       	std	Y+34, r25	; 0x22
    53e8:	89 a3       	std	Y+33, r24	; 0x21
    53ea:	0f c0       	rjmp	.+30     	; 0x540a <HLCD_voidSendCmd+0x31e>
    53ec:	88 ec       	ldi	r24, 0xC8	; 200
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	98 a3       	std	Y+32, r25	; 0x20
    53f2:	8f 8f       	std	Y+31, r24	; 0x1f
    53f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53f6:	98 a1       	ldd	r25, Y+32	; 0x20
    53f8:	01 97       	sbiw	r24, 0x01	; 1
    53fa:	f1 f7       	brne	.-4      	; 0x53f8 <HLCD_voidSendCmd+0x30c>
    53fc:	98 a3       	std	Y+32, r25	; 0x20
    53fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5400:	89 a1       	ldd	r24, Y+33	; 0x21
    5402:	9a a1       	ldd	r25, Y+34	; 0x22
    5404:	01 97       	sbiw	r24, 0x01	; 1
    5406:	9a a3       	std	Y+34, r25	; 0x22
    5408:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    540a:	89 a1       	ldd	r24, Y+33	; 0x21
    540c:	9a a1       	ldd	r25, Y+34	; 0x22
    540e:	00 97       	sbiw	r24, 0x00	; 0
    5410:	69 f7       	brne	.-38     	; 0x53ec <HLCD_voidSendCmd+0x300>
    5412:	14 c0       	rjmp	.+40     	; 0x543c <HLCD_voidSendCmd+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5414:	6b a1       	ldd	r22, Y+35	; 0x23
    5416:	7c a1       	ldd	r23, Y+36	; 0x24
    5418:	8d a1       	ldd	r24, Y+37	; 0x25
    541a:	9e a1       	ldd	r25, Y+38	; 0x26
    541c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5420:	dc 01       	movw	r26, r24
    5422:	cb 01       	movw	r24, r22
    5424:	9a a3       	std	Y+34, r25	; 0x22
    5426:	89 a3       	std	Y+33, r24	; 0x21
    5428:	89 a1       	ldd	r24, Y+33	; 0x21
    542a:	9a a1       	ldd	r25, Y+34	; 0x22
    542c:	9e 8f       	std	Y+30, r25	; 0x1e
    542e:	8d 8f       	std	Y+29, r24	; 0x1d
    5430:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5432:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5434:	01 97       	sbiw	r24, 0x01	; 1
    5436:	f1 f7       	brne	.-4      	; 0x5434 <HLCD_voidSendCmd+0x348>
    5438:	9e 8f       	std	Y+30, r25	; 0x1e
    543a:	8d 8f       	std	Y+29, r24	; 0x1d
	    
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    /**set enable to low */
	    MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    543c:	84 e0       	ldi	r24, 0x04	; 4
    543e:	63 e0       	ldi	r22, 0x03	; 3
    5440:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	a0 e0       	ldi	r26, 0x00	; 0
    544a:	b0 e4       	ldi	r27, 0x40	; 64
    544c:	89 8f       	std	Y+25, r24	; 0x19
    544e:	9a 8f       	std	Y+26, r25	; 0x1a
    5450:	ab 8f       	std	Y+27, r26	; 0x1b
    5452:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5454:	69 8d       	ldd	r22, Y+25	; 0x19
    5456:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5458:	8b 8d       	ldd	r24, Y+27	; 0x1b
    545a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	4a ef       	ldi	r20, 0xFA	; 250
    5462:	54 e4       	ldi	r21, 0x44	; 68
    5464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
    546c:	8d 8b       	std	Y+21, r24	; 0x15
    546e:	9e 8b       	std	Y+22, r25	; 0x16
    5470:	af 8b       	std	Y+23, r26	; 0x17
    5472:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5474:	6d 89       	ldd	r22, Y+21	; 0x15
    5476:	7e 89       	ldd	r23, Y+22	; 0x16
    5478:	8f 89       	ldd	r24, Y+23	; 0x17
    547a:	98 8d       	ldd	r25, Y+24	; 0x18
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	40 e8       	ldi	r20, 0x80	; 128
    5482:	5f e3       	ldi	r21, 0x3F	; 63
    5484:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5488:	88 23       	and	r24, r24
    548a:	2c f4       	brge	.+10     	; 0x5496 <HLCD_voidSendCmd+0x3aa>
		__ticks = 1;
    548c:	81 e0       	ldi	r24, 0x01	; 1
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	9c 8b       	std	Y+20, r25	; 0x14
    5492:	8b 8b       	std	Y+19, r24	; 0x13
    5494:	3f c0       	rjmp	.+126    	; 0x5514 <HLCD_voidSendCmd+0x428>
	else if (__tmp > 65535)
    5496:	6d 89       	ldd	r22, Y+21	; 0x15
    5498:	7e 89       	ldd	r23, Y+22	; 0x16
    549a:	8f 89       	ldd	r24, Y+23	; 0x17
    549c:	98 8d       	ldd	r25, Y+24	; 0x18
    549e:	20 e0       	ldi	r18, 0x00	; 0
    54a0:	3f ef       	ldi	r19, 0xFF	; 255
    54a2:	4f e7       	ldi	r20, 0x7F	; 127
    54a4:	57 e4       	ldi	r21, 0x47	; 71
    54a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    54aa:	18 16       	cp	r1, r24
    54ac:	4c f5       	brge	.+82     	; 0x5500 <HLCD_voidSendCmd+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54ae:	69 8d       	ldd	r22, Y+25	; 0x19
    54b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	40 e2       	ldi	r20, 0x20	; 32
    54bc:	51 e4       	ldi	r21, 0x41	; 65
    54be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54c2:	dc 01       	movw	r26, r24
    54c4:	cb 01       	movw	r24, r22
    54c6:	bc 01       	movw	r22, r24
    54c8:	cd 01       	movw	r24, r26
    54ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ce:	dc 01       	movw	r26, r24
    54d0:	cb 01       	movw	r24, r22
    54d2:	9c 8b       	std	Y+20, r25	; 0x14
    54d4:	8b 8b       	std	Y+19, r24	; 0x13
    54d6:	0f c0       	rjmp	.+30     	; 0x54f6 <HLCD_voidSendCmd+0x40a>
    54d8:	88 ec       	ldi	r24, 0xC8	; 200
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	9a 8b       	std	Y+18, r25	; 0x12
    54de:	89 8b       	std	Y+17, r24	; 0x11
    54e0:	89 89       	ldd	r24, Y+17	; 0x11
    54e2:	9a 89       	ldd	r25, Y+18	; 0x12
    54e4:	01 97       	sbiw	r24, 0x01	; 1
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <HLCD_voidSendCmd+0x3f8>
    54e8:	9a 8b       	std	Y+18, r25	; 0x12
    54ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54ec:	8b 89       	ldd	r24, Y+19	; 0x13
    54ee:	9c 89       	ldd	r25, Y+20	; 0x14
    54f0:	01 97       	sbiw	r24, 0x01	; 1
    54f2:	9c 8b       	std	Y+20, r25	; 0x14
    54f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54f6:	8b 89       	ldd	r24, Y+19	; 0x13
    54f8:	9c 89       	ldd	r25, Y+20	; 0x14
    54fa:	00 97       	sbiw	r24, 0x00	; 0
    54fc:	69 f7       	brne	.-38     	; 0x54d8 <HLCD_voidSendCmd+0x3ec>
    54fe:	14 c0       	rjmp	.+40     	; 0x5528 <HLCD_voidSendCmd+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5500:	6d 89       	ldd	r22, Y+21	; 0x15
    5502:	7e 89       	ldd	r23, Y+22	; 0x16
    5504:	8f 89       	ldd	r24, Y+23	; 0x17
    5506:	98 8d       	ldd	r25, Y+24	; 0x18
    5508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    550c:	dc 01       	movw	r26, r24
    550e:	cb 01       	movw	r24, r22
    5510:	9c 8b       	std	Y+20, r25	; 0x14
    5512:	8b 8b       	std	Y+19, r24	; 0x13
    5514:	8b 89       	ldd	r24, Y+19	; 0x13
    5516:	9c 89       	ldd	r25, Y+20	; 0x14
    5518:	98 8b       	std	Y+16, r25	; 0x10
    551a:	8f 87       	std	Y+15, r24	; 0x0f
    551c:	8f 85       	ldd	r24, Y+15	; 0x0f
    551e:	98 89       	ldd	r25, Y+16	; 0x10
    5520:	01 97       	sbiw	r24, 0x01	; 1
    5522:	f1 f7       	brne	.-4      	; 0x5520 <HLCD_voidSendCmd+0x434>
    5524:	98 8b       	std	Y+16, r25	; 0x10
    5526:	8f 87       	std	Y+15, r24	; 0x0f
    5528:	80 e0       	ldi	r24, 0x00	; 0
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	a0 e8       	ldi	r26, 0x80	; 128
    552e:	bf e3       	ldi	r27, 0x3F	; 63
    5530:	8b 87       	std	Y+11, r24	; 0x0b
    5532:	9c 87       	std	Y+12, r25	; 0x0c
    5534:	ad 87       	std	Y+13, r26	; 0x0d
    5536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5538:	6b 85       	ldd	r22, Y+11	; 0x0b
    553a:	7c 85       	ldd	r23, Y+12	; 0x0c
    553c:	8d 85       	ldd	r24, Y+13	; 0x0d
    553e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5540:	20 e0       	ldi	r18, 0x00	; 0
    5542:	30 e0       	ldi	r19, 0x00	; 0
    5544:	4a ef       	ldi	r20, 0xFA	; 250
    5546:	54 e4       	ldi	r21, 0x44	; 68
    5548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    554c:	dc 01       	movw	r26, r24
    554e:	cb 01       	movw	r24, r22
    5550:	8f 83       	std	Y+7, r24	; 0x07
    5552:	98 87       	std	Y+8, r25	; 0x08
    5554:	a9 87       	std	Y+9, r26	; 0x09
    5556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5558:	6f 81       	ldd	r22, Y+7	; 0x07
    555a:	78 85       	ldd	r23, Y+8	; 0x08
    555c:	89 85       	ldd	r24, Y+9	; 0x09
    555e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5560:	20 e0       	ldi	r18, 0x00	; 0
    5562:	30 e0       	ldi	r19, 0x00	; 0
    5564:	40 e8       	ldi	r20, 0x80	; 128
    5566:	5f e3       	ldi	r21, 0x3F	; 63
    5568:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    556c:	88 23       	and	r24, r24
    556e:	2c f4       	brge	.+10     	; 0x557a <HLCD_voidSendCmd+0x48e>
		__ticks = 1;
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	9e 83       	std	Y+6, r25	; 0x06
    5576:	8d 83       	std	Y+5, r24	; 0x05
    5578:	3f c0       	rjmp	.+126    	; 0x55f8 <HLCD_voidSendCmd+0x50c>
	else if (__tmp > 65535)
    557a:	6f 81       	ldd	r22, Y+7	; 0x07
    557c:	78 85       	ldd	r23, Y+8	; 0x08
    557e:	89 85       	ldd	r24, Y+9	; 0x09
    5580:	9a 85       	ldd	r25, Y+10	; 0x0a
    5582:	20 e0       	ldi	r18, 0x00	; 0
    5584:	3f ef       	ldi	r19, 0xFF	; 255
    5586:	4f e7       	ldi	r20, 0x7F	; 127
    5588:	57 e4       	ldi	r21, 0x47	; 71
    558a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    558e:	18 16       	cp	r1, r24
    5590:	4c f5       	brge	.+82     	; 0x55e4 <HLCD_voidSendCmd+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5592:	6b 85       	ldd	r22, Y+11	; 0x0b
    5594:	7c 85       	ldd	r23, Y+12	; 0x0c
    5596:	8d 85       	ldd	r24, Y+13	; 0x0d
    5598:	9e 85       	ldd	r25, Y+14	; 0x0e
    559a:	20 e0       	ldi	r18, 0x00	; 0
    559c:	30 e0       	ldi	r19, 0x00	; 0
    559e:	40 e2       	ldi	r20, 0x20	; 32
    55a0:	51 e4       	ldi	r21, 0x41	; 65
    55a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a6:	dc 01       	movw	r26, r24
    55a8:	cb 01       	movw	r24, r22
    55aa:	bc 01       	movw	r22, r24
    55ac:	cd 01       	movw	r24, r26
    55ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55b2:	dc 01       	movw	r26, r24
    55b4:	cb 01       	movw	r24, r22
    55b6:	9e 83       	std	Y+6, r25	; 0x06
    55b8:	8d 83       	std	Y+5, r24	; 0x05
    55ba:	0f c0       	rjmp	.+30     	; 0x55da <HLCD_voidSendCmd+0x4ee>
    55bc:	88 ec       	ldi	r24, 0xC8	; 200
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	9c 83       	std	Y+4, r25	; 0x04
    55c2:	8b 83       	std	Y+3, r24	; 0x03
    55c4:	8b 81       	ldd	r24, Y+3	; 0x03
    55c6:	9c 81       	ldd	r25, Y+4	; 0x04
    55c8:	01 97       	sbiw	r24, 0x01	; 1
    55ca:	f1 f7       	brne	.-4      	; 0x55c8 <HLCD_voidSendCmd+0x4dc>
    55cc:	9c 83       	std	Y+4, r25	; 0x04
    55ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55d0:	8d 81       	ldd	r24, Y+5	; 0x05
    55d2:	9e 81       	ldd	r25, Y+6	; 0x06
    55d4:	01 97       	sbiw	r24, 0x01	; 1
    55d6:	9e 83       	std	Y+6, r25	; 0x06
    55d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55da:	8d 81       	ldd	r24, Y+5	; 0x05
    55dc:	9e 81       	ldd	r25, Y+6	; 0x06
    55de:	00 97       	sbiw	r24, 0x00	; 0
    55e0:	69 f7       	brne	.-38     	; 0x55bc <HLCD_voidSendCmd+0x4d0>
    55e2:	14 c0       	rjmp	.+40     	; 0x560c <HLCD_voidSendCmd+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55e4:	6f 81       	ldd	r22, Y+7	; 0x07
    55e6:	78 85       	ldd	r23, Y+8	; 0x08
    55e8:	89 85       	ldd	r24, Y+9	; 0x09
    55ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    55ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55f0:	dc 01       	movw	r26, r24
    55f2:	cb 01       	movw	r24, r22
    55f4:	9e 83       	std	Y+6, r25	; 0x06
    55f6:	8d 83       	std	Y+5, r24	; 0x05
    55f8:	8d 81       	ldd	r24, Y+5	; 0x05
    55fa:	9e 81       	ldd	r25, Y+6	; 0x06
    55fc:	9a 83       	std	Y+2, r25	; 0x02
    55fe:	89 83       	std	Y+1, r24	; 0x01
    5600:	89 81       	ldd	r24, Y+1	; 0x01
    5602:	9a 81       	ldd	r25, Y+2	; 0x02
    5604:	01 97       	sbiw	r24, 0x01	; 1
    5606:	f1 f7       	brne	.-4      	; 0x5604 <HLCD_voidSendCmd+0x518>
    5608:	9a 83       	std	Y+2, r25	; 0x02
    560a:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms (2) ;
	    #else
	    #error "select write mode"
	    #endif
	    _delay_ms(1) ;
    560c:	c9 5b       	subi	r28, 0xB9	; 185
    560e:	df 4f       	sbci	r29, 0xFF	; 255
    5610:	0f b6       	in	r0, 0x3f	; 63
    5612:	f8 94       	cli
    5614:	de bf       	out	0x3e, r29	; 62
    5616:	0f be       	out	0x3f, r0	; 63
    5618:	cd bf       	out	0x3d, r28	; 61
    561a:	cf 91       	pop	r28
    561c:	df 91       	pop	r29
    561e:	1f 91       	pop	r17
    5620:	0f 91       	pop	r16
    5622:	08 95       	ret

00005624 <HLCD_voidInit>:
#include "LCD_private.h"
#include "LCD_conf.h"
#include "LCD_int.h"

void HLCD_voidInit(void)
{
    5624:	0f 93       	push	r16
    5626:	1f 93       	push	r17
    5628:	df 93       	push	r29
    562a:	cf 93       	push	r28
    562c:	cd b7       	in	r28, 0x3d	; 61
    562e:	de b7       	in	r29, 0x3e	; 62
    5630:	c4 55       	subi	r28, 0x54	; 84
    5632:	d0 40       	sbci	r29, 0x00	; 0
    5634:	0f b6       	in	r0, 0x3f	; 63
    5636:	f8 94       	cli
    5638:	de bf       	out	0x3e, r29	; 62
    563a:	0f be       	out	0x3f, r0	; 63
    563c:	cd bf       	out	0x3d, r28	; 61
    563e:	fe 01       	movw	r30, r28
    5640:	ef 5a       	subi	r30, 0xAF	; 175
    5642:	ff 4f       	sbci	r31, 0xFF	; 255
    5644:	80 e0       	ldi	r24, 0x00	; 0
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	a8 e4       	ldi	r26, 0x48	; 72
    564a:	b3 e4       	ldi	r27, 0x43	; 67
    564c:	80 83       	st	Z, r24
    564e:	91 83       	std	Z+1, r25	; 0x01
    5650:	a2 83       	std	Z+2, r26	; 0x02
    5652:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5654:	8e 01       	movw	r16, r28
    5656:	03 5b       	subi	r16, 0xB3	; 179
    5658:	1f 4f       	sbci	r17, 0xFF	; 255
    565a:	fe 01       	movw	r30, r28
    565c:	ef 5a       	subi	r30, 0xAF	; 175
    565e:	ff 4f       	sbci	r31, 0xFF	; 255
    5660:	60 81       	ld	r22, Z
    5662:	71 81       	ldd	r23, Z+1	; 0x01
    5664:	82 81       	ldd	r24, Z+2	; 0x02
    5666:	93 81       	ldd	r25, Z+3	; 0x03
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	4a ef       	ldi	r20, 0xFA	; 250
    566e:	54 e4       	ldi	r21, 0x44	; 68
    5670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	f8 01       	movw	r30, r16
    567a:	80 83       	st	Z, r24
    567c:	91 83       	std	Z+1, r25	; 0x01
    567e:	a2 83       	std	Z+2, r26	; 0x02
    5680:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5682:	fe 01       	movw	r30, r28
    5684:	e3 5b       	subi	r30, 0xB3	; 179
    5686:	ff 4f       	sbci	r31, 0xFF	; 255
    5688:	60 81       	ld	r22, Z
    568a:	71 81       	ldd	r23, Z+1	; 0x01
    568c:	82 81       	ldd	r24, Z+2	; 0x02
    568e:	93 81       	ldd	r25, Z+3	; 0x03
    5690:	20 e0       	ldi	r18, 0x00	; 0
    5692:	30 e0       	ldi	r19, 0x00	; 0
    5694:	40 e8       	ldi	r20, 0x80	; 128
    5696:	5f e3       	ldi	r21, 0x3F	; 63
    5698:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    569c:	88 23       	and	r24, r24
    569e:	44 f4       	brge	.+16     	; 0x56b0 <HLCD_voidInit+0x8c>
		__ticks = 1;
    56a0:	fe 01       	movw	r30, r28
    56a2:	e5 5b       	subi	r30, 0xB5	; 181
    56a4:	ff 4f       	sbci	r31, 0xFF	; 255
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	91 83       	std	Z+1, r25	; 0x01
    56ac:	80 83       	st	Z, r24
    56ae:	64 c0       	rjmp	.+200    	; 0x5778 <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    56b0:	fe 01       	movw	r30, r28
    56b2:	e3 5b       	subi	r30, 0xB3	; 179
    56b4:	ff 4f       	sbci	r31, 0xFF	; 255
    56b6:	60 81       	ld	r22, Z
    56b8:	71 81       	ldd	r23, Z+1	; 0x01
    56ba:	82 81       	ldd	r24, Z+2	; 0x02
    56bc:	93 81       	ldd	r25, Z+3	; 0x03
    56be:	20 e0       	ldi	r18, 0x00	; 0
    56c0:	3f ef       	ldi	r19, 0xFF	; 255
    56c2:	4f e7       	ldi	r20, 0x7F	; 127
    56c4:	57 e4       	ldi	r21, 0x47	; 71
    56c6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    56ca:	18 16       	cp	r1, r24
    56cc:	0c f0       	brlt	.+2      	; 0x56d0 <HLCD_voidInit+0xac>
    56ce:	43 c0       	rjmp	.+134    	; 0x5756 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56d0:	fe 01       	movw	r30, r28
    56d2:	ef 5a       	subi	r30, 0xAF	; 175
    56d4:	ff 4f       	sbci	r31, 0xFF	; 255
    56d6:	60 81       	ld	r22, Z
    56d8:	71 81       	ldd	r23, Z+1	; 0x01
    56da:	82 81       	ldd	r24, Z+2	; 0x02
    56dc:	93 81       	ldd	r25, Z+3	; 0x03
    56de:	20 e0       	ldi	r18, 0x00	; 0
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	40 e2       	ldi	r20, 0x20	; 32
    56e4:	51 e4       	ldi	r21, 0x41	; 65
    56e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ea:	dc 01       	movw	r26, r24
    56ec:	cb 01       	movw	r24, r22
    56ee:	8e 01       	movw	r16, r28
    56f0:	05 5b       	subi	r16, 0xB5	; 181
    56f2:	1f 4f       	sbci	r17, 0xFF	; 255
    56f4:	bc 01       	movw	r22, r24
    56f6:	cd 01       	movw	r24, r26
    56f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56fc:	dc 01       	movw	r26, r24
    56fe:	cb 01       	movw	r24, r22
    5700:	f8 01       	movw	r30, r16
    5702:	91 83       	std	Z+1, r25	; 0x01
    5704:	80 83       	st	Z, r24
    5706:	1f c0       	rjmp	.+62     	; 0x5746 <HLCD_voidInit+0x122>
    5708:	fe 01       	movw	r30, r28
    570a:	e7 5b       	subi	r30, 0xB7	; 183
    570c:	ff 4f       	sbci	r31, 0xFF	; 255
    570e:	88 ec       	ldi	r24, 0xC8	; 200
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	91 83       	std	Z+1, r25	; 0x01
    5714:	80 83       	st	Z, r24
    5716:	fe 01       	movw	r30, r28
    5718:	e7 5b       	subi	r30, 0xB7	; 183
    571a:	ff 4f       	sbci	r31, 0xFF	; 255
    571c:	80 81       	ld	r24, Z
    571e:	91 81       	ldd	r25, Z+1	; 0x01
    5720:	01 97       	sbiw	r24, 0x01	; 1
    5722:	f1 f7       	brne	.-4      	; 0x5720 <HLCD_voidInit+0xfc>
    5724:	fe 01       	movw	r30, r28
    5726:	e7 5b       	subi	r30, 0xB7	; 183
    5728:	ff 4f       	sbci	r31, 0xFF	; 255
    572a:	91 83       	std	Z+1, r25	; 0x01
    572c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    572e:	de 01       	movw	r26, r28
    5730:	a5 5b       	subi	r26, 0xB5	; 181
    5732:	bf 4f       	sbci	r27, 0xFF	; 255
    5734:	fe 01       	movw	r30, r28
    5736:	e5 5b       	subi	r30, 0xB5	; 181
    5738:	ff 4f       	sbci	r31, 0xFF	; 255
    573a:	80 81       	ld	r24, Z
    573c:	91 81       	ldd	r25, Z+1	; 0x01
    573e:	01 97       	sbiw	r24, 0x01	; 1
    5740:	11 96       	adiw	r26, 0x01	; 1
    5742:	9c 93       	st	X, r25
    5744:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5746:	fe 01       	movw	r30, r28
    5748:	e5 5b       	subi	r30, 0xB5	; 181
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	80 81       	ld	r24, Z
    574e:	91 81       	ldd	r25, Z+1	; 0x01
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	d1 f6       	brne	.-76     	; 0x5708 <HLCD_voidInit+0xe4>
    5754:	27 c0       	rjmp	.+78     	; 0x57a4 <HLCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5756:	8e 01       	movw	r16, r28
    5758:	05 5b       	subi	r16, 0xB5	; 181
    575a:	1f 4f       	sbci	r17, 0xFF	; 255
    575c:	fe 01       	movw	r30, r28
    575e:	e3 5b       	subi	r30, 0xB3	; 179
    5760:	ff 4f       	sbci	r31, 0xFF	; 255
    5762:	60 81       	ld	r22, Z
    5764:	71 81       	ldd	r23, Z+1	; 0x01
    5766:	82 81       	ldd	r24, Z+2	; 0x02
    5768:	93 81       	ldd	r25, Z+3	; 0x03
    576a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    576e:	dc 01       	movw	r26, r24
    5770:	cb 01       	movw	r24, r22
    5772:	f8 01       	movw	r30, r16
    5774:	91 83       	std	Z+1, r25	; 0x01
    5776:	80 83       	st	Z, r24
    5778:	de 01       	movw	r26, r28
    577a:	a9 5b       	subi	r26, 0xB9	; 185
    577c:	bf 4f       	sbci	r27, 0xFF	; 255
    577e:	fe 01       	movw	r30, r28
    5780:	e5 5b       	subi	r30, 0xB5	; 181
    5782:	ff 4f       	sbci	r31, 0xFF	; 255
    5784:	80 81       	ld	r24, Z
    5786:	91 81       	ldd	r25, Z+1	; 0x01
    5788:	8d 93       	st	X+, r24
    578a:	9c 93       	st	X, r25
    578c:	fe 01       	movw	r30, r28
    578e:	e9 5b       	subi	r30, 0xB9	; 185
    5790:	ff 4f       	sbci	r31, 0xFF	; 255
    5792:	80 81       	ld	r24, Z
    5794:	91 81       	ldd	r25, Z+1	; 0x01
    5796:	01 97       	sbiw	r24, 0x01	; 1
    5798:	f1 f7       	brne	.-4      	; 0x5796 <HLCD_voidInit+0x172>
    579a:	fe 01       	movw	r30, r28
    579c:	e9 5b       	subi	r30, 0xB9	; 185
    579e:	ff 4f       	sbci	r31, 0xFF	; 255
    57a0:	91 83       	std	Z+1, r25	; 0x01
    57a2:	80 83       	st	Z, r24
	    _delay_ms (1) ;
		
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /** set direction of DIO_PIN4 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN4 , DIO_HIGH) ;
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	64 e0       	ldi	r22, 0x04	; 4
    57a8:	41 e0       	ldi	r20, 0x01	; 1
    57aa:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN5 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN5 , DIO_HIGH) ;
    57ae:	81 e0       	ldi	r24, 0x01	; 1
    57b0:	65 e0       	ldi	r22, 0x05	; 5
    57b2:	41 e0       	ldi	r20, 0x01	; 1
    57b4:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN6 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN6 , DIO_HIGH) ;
    57b8:	81 e0       	ldi	r24, 0x01	; 1
    57ba:	66 e0       	ldi	r22, 0x06	; 6
    57bc:	41 e0       	ldi	r20, 0x01	; 1
    57be:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN7 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN7 , DIO_HIGH) ;
    57c2:	81 e0       	ldi	r24, 0x01	; 1
    57c4:	67 e0       	ldi	r22, 0x07	; 7
    57c6:	41 e0       	ldi	r20, 0x01	; 1
    57c8:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		
	    /** set direction of register select to be output */
	    MDIO_voidSetPinDir  (LCD_RS_PORT   , LCD_RS_PIN  , DIO_HIGH) ;
    57cc:	84 e0       	ldi	r24, 0x04	; 4
    57ce:	62 e0       	ldi	r22, 0x02	; 2
    57d0:	41 e0       	ldi	r20, 0x01	; 1
    57d2:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		
		/** set direction of Enable pin to be output */
	    MDIO_voidSetPinDir  (LCD_EN_PORT   , LCD_EN_PIN  , DIO_HIGH) ;
    57d6:	84 e0       	ldi	r24, 0x04	; 4
    57d8:	63 e0       	ldi	r22, 0x03	; 3
    57da:	41 e0       	ldi	r20, 0x01	; 1
    57dc:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>

		/** set direction of read/write pin to be output */
	    MDIO_voidSetPinDir  (LCD_RW_PORT   , LCD_RW_PIN  , DIO_HIGH) ;
    57e0:	84 e0       	ldi	r24, 0x04	; 4
    57e2:	64 e0       	ldi	r22, 0x04	; 4
    57e4:	41 e0       	ldi	r20, 0x01	; 1
    57e6:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
	    
	    /** Return home*/
	    HLCD_voidSendCmd (CMD_RETURN_HOME) ;
    57ea:	82 e0       	ldi	r24, 0x02	; 2
    57ec:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
    57f0:	fe 01       	movw	r30, r28
    57f2:	ed 5b       	subi	r30, 0xBD	; 189
    57f4:	ff 4f       	sbci	r31, 0xFF	; 255
    57f6:	80 e0       	ldi	r24, 0x00	; 0
    57f8:	90 e0       	ldi	r25, 0x00	; 0
    57fa:	a0 e2       	ldi	r26, 0x20	; 32
    57fc:	b1 e4       	ldi	r27, 0x41	; 65
    57fe:	80 83       	st	Z, r24
    5800:	91 83       	std	Z+1, r25	; 0x01
    5802:	a2 83       	std	Z+2, r26	; 0x02
    5804:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5806:	8e 01       	movw	r16, r28
    5808:	01 5c       	subi	r16, 0xC1	; 193
    580a:	1f 4f       	sbci	r17, 0xFF	; 255
    580c:	fe 01       	movw	r30, r28
    580e:	ed 5b       	subi	r30, 0xBD	; 189
    5810:	ff 4f       	sbci	r31, 0xFF	; 255
    5812:	60 81       	ld	r22, Z
    5814:	71 81       	ldd	r23, Z+1	; 0x01
    5816:	82 81       	ldd	r24, Z+2	; 0x02
    5818:	93 81       	ldd	r25, Z+3	; 0x03
    581a:	20 e0       	ldi	r18, 0x00	; 0
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	4a ef       	ldi	r20, 0xFA	; 250
    5820:	54 e4       	ldi	r21, 0x44	; 68
    5822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5826:	dc 01       	movw	r26, r24
    5828:	cb 01       	movw	r24, r22
    582a:	f8 01       	movw	r30, r16
    582c:	80 83       	st	Z, r24
    582e:	91 83       	std	Z+1, r25	; 0x01
    5830:	a2 83       	std	Z+2, r26	; 0x02
    5832:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5834:	fe 01       	movw	r30, r28
    5836:	ff 96       	adiw	r30, 0x3f	; 63
    5838:	60 81       	ld	r22, Z
    583a:	71 81       	ldd	r23, Z+1	; 0x01
    583c:	82 81       	ldd	r24, Z+2	; 0x02
    583e:	93 81       	ldd	r25, Z+3	; 0x03
    5840:	20 e0       	ldi	r18, 0x00	; 0
    5842:	30 e0       	ldi	r19, 0x00	; 0
    5844:	40 e8       	ldi	r20, 0x80	; 128
    5846:	5f e3       	ldi	r21, 0x3F	; 63
    5848:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    584c:	88 23       	and	r24, r24
    584e:	2c f4       	brge	.+10     	; 0x585a <HLCD_voidInit+0x236>
		__ticks = 1;
    5850:	81 e0       	ldi	r24, 0x01	; 1
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	9e af       	std	Y+62, r25	; 0x3e
    5856:	8d af       	std	Y+61, r24	; 0x3d
    5858:	46 c0       	rjmp	.+140    	; 0x58e6 <HLCD_voidInit+0x2c2>
	else if (__tmp > 65535)
    585a:	fe 01       	movw	r30, r28
    585c:	ff 96       	adiw	r30, 0x3f	; 63
    585e:	60 81       	ld	r22, Z
    5860:	71 81       	ldd	r23, Z+1	; 0x01
    5862:	82 81       	ldd	r24, Z+2	; 0x02
    5864:	93 81       	ldd	r25, Z+3	; 0x03
    5866:	20 e0       	ldi	r18, 0x00	; 0
    5868:	3f ef       	ldi	r19, 0xFF	; 255
    586a:	4f e7       	ldi	r20, 0x7F	; 127
    586c:	57 e4       	ldi	r21, 0x47	; 71
    586e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5872:	18 16       	cp	r1, r24
    5874:	64 f5       	brge	.+88     	; 0x58ce <HLCD_voidInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5876:	fe 01       	movw	r30, r28
    5878:	ed 5b       	subi	r30, 0xBD	; 189
    587a:	ff 4f       	sbci	r31, 0xFF	; 255
    587c:	60 81       	ld	r22, Z
    587e:	71 81       	ldd	r23, Z+1	; 0x01
    5880:	82 81       	ldd	r24, Z+2	; 0x02
    5882:	93 81       	ldd	r25, Z+3	; 0x03
    5884:	20 e0       	ldi	r18, 0x00	; 0
    5886:	30 e0       	ldi	r19, 0x00	; 0
    5888:	40 e2       	ldi	r20, 0x20	; 32
    588a:	51 e4       	ldi	r21, 0x41	; 65
    588c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5890:	dc 01       	movw	r26, r24
    5892:	cb 01       	movw	r24, r22
    5894:	bc 01       	movw	r22, r24
    5896:	cd 01       	movw	r24, r26
    5898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    589c:	dc 01       	movw	r26, r24
    589e:	cb 01       	movw	r24, r22
    58a0:	9e af       	std	Y+62, r25	; 0x3e
    58a2:	8d af       	std	Y+61, r24	; 0x3d
    58a4:	0f c0       	rjmp	.+30     	; 0x58c4 <HLCD_voidInit+0x2a0>
    58a6:	88 ec       	ldi	r24, 0xC8	; 200
    58a8:	90 e0       	ldi	r25, 0x00	; 0
    58aa:	9c af       	std	Y+60, r25	; 0x3c
    58ac:	8b af       	std	Y+59, r24	; 0x3b
    58ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    58b0:	9c ad       	ldd	r25, Y+60	; 0x3c
    58b2:	01 97       	sbiw	r24, 0x01	; 1
    58b4:	f1 f7       	brne	.-4      	; 0x58b2 <HLCD_voidInit+0x28e>
    58b6:	9c af       	std	Y+60, r25	; 0x3c
    58b8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    58bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    58be:	01 97       	sbiw	r24, 0x01	; 1
    58c0:	9e af       	std	Y+62, r25	; 0x3e
    58c2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    58c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    58c8:	00 97       	sbiw	r24, 0x00	; 0
    58ca:	69 f7       	brne	.-38     	; 0x58a6 <HLCD_voidInit+0x282>
    58cc:	16 c0       	rjmp	.+44     	; 0x58fa <HLCD_voidInit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ce:	fe 01       	movw	r30, r28
    58d0:	ff 96       	adiw	r30, 0x3f	; 63
    58d2:	60 81       	ld	r22, Z
    58d4:	71 81       	ldd	r23, Z+1	; 0x01
    58d6:	82 81       	ldd	r24, Z+2	; 0x02
    58d8:	93 81       	ldd	r25, Z+3	; 0x03
    58da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58de:	dc 01       	movw	r26, r24
    58e0:	cb 01       	movw	r24, r22
    58e2:	9e af       	std	Y+62, r25	; 0x3e
    58e4:	8d af       	std	Y+61, r24	; 0x3d
    58e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    58e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    58ea:	9a af       	std	Y+58, r25	; 0x3a
    58ec:	89 af       	std	Y+57, r24	; 0x39
    58ee:	89 ad       	ldd	r24, Y+57	; 0x39
    58f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    58f2:	01 97       	sbiw	r24, 0x01	; 1
    58f4:	f1 f7       	brne	.-4      	; 0x58f2 <HLCD_voidInit+0x2ce>
    58f6:	9a af       	std	Y+58, r25	; 0x3a
    58f8:	89 af       	std	Y+57, r24	; 0x39
		
		/* Wait for command to settle */
	    _delay_ms (10) ;
	    
	    /** function set */
	    HLCD_voidSendCmd (FOUR_BIT_CONNECTION) ;
    58fa:	88 e2       	ldi	r24, 0x28	; 40
    58fc:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
    5900:	80 e0       	ldi	r24, 0x00	; 0
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	a0 e8       	ldi	r26, 0x80	; 128
    5906:	bf e3       	ldi	r27, 0x3F	; 63
    5908:	8d ab       	std	Y+53, r24	; 0x35
    590a:	9e ab       	std	Y+54, r25	; 0x36
    590c:	af ab       	std	Y+55, r26	; 0x37
    590e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5910:	6d a9       	ldd	r22, Y+53	; 0x35
    5912:	7e a9       	ldd	r23, Y+54	; 0x36
    5914:	8f a9       	ldd	r24, Y+55	; 0x37
    5916:	98 ad       	ldd	r25, Y+56	; 0x38
    5918:	20 e0       	ldi	r18, 0x00	; 0
    591a:	30 e0       	ldi	r19, 0x00	; 0
    591c:	4a ef       	ldi	r20, 0xFA	; 250
    591e:	54 e4       	ldi	r21, 0x44	; 68
    5920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5924:	dc 01       	movw	r26, r24
    5926:	cb 01       	movw	r24, r22
    5928:	89 ab       	std	Y+49, r24	; 0x31
    592a:	9a ab       	std	Y+50, r25	; 0x32
    592c:	ab ab       	std	Y+51, r26	; 0x33
    592e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5930:	69 a9       	ldd	r22, Y+49	; 0x31
    5932:	7a a9       	ldd	r23, Y+50	; 0x32
    5934:	8b a9       	ldd	r24, Y+51	; 0x33
    5936:	9c a9       	ldd	r25, Y+52	; 0x34
    5938:	20 e0       	ldi	r18, 0x00	; 0
    593a:	30 e0       	ldi	r19, 0x00	; 0
    593c:	40 e8       	ldi	r20, 0x80	; 128
    593e:	5f e3       	ldi	r21, 0x3F	; 63
    5940:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5944:	88 23       	and	r24, r24
    5946:	2c f4       	brge	.+10     	; 0x5952 <HLCD_voidInit+0x32e>
		__ticks = 1;
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	98 ab       	std	Y+48, r25	; 0x30
    594e:	8f a7       	std	Y+47, r24	; 0x2f
    5950:	3f c0       	rjmp	.+126    	; 0x59d0 <HLCD_voidInit+0x3ac>
	else if (__tmp > 65535)
    5952:	69 a9       	ldd	r22, Y+49	; 0x31
    5954:	7a a9       	ldd	r23, Y+50	; 0x32
    5956:	8b a9       	ldd	r24, Y+51	; 0x33
    5958:	9c a9       	ldd	r25, Y+52	; 0x34
    595a:	20 e0       	ldi	r18, 0x00	; 0
    595c:	3f ef       	ldi	r19, 0xFF	; 255
    595e:	4f e7       	ldi	r20, 0x7F	; 127
    5960:	57 e4       	ldi	r21, 0x47	; 71
    5962:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5966:	18 16       	cp	r1, r24
    5968:	4c f5       	brge	.+82     	; 0x59bc <HLCD_voidInit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    596a:	6d a9       	ldd	r22, Y+53	; 0x35
    596c:	7e a9       	ldd	r23, Y+54	; 0x36
    596e:	8f a9       	ldd	r24, Y+55	; 0x37
    5970:	98 ad       	ldd	r25, Y+56	; 0x38
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	30 e0       	ldi	r19, 0x00	; 0
    5976:	40 e2       	ldi	r20, 0x20	; 32
    5978:	51 e4       	ldi	r21, 0x41	; 65
    597a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    597e:	dc 01       	movw	r26, r24
    5980:	cb 01       	movw	r24, r22
    5982:	bc 01       	movw	r22, r24
    5984:	cd 01       	movw	r24, r26
    5986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    598a:	dc 01       	movw	r26, r24
    598c:	cb 01       	movw	r24, r22
    598e:	98 ab       	std	Y+48, r25	; 0x30
    5990:	8f a7       	std	Y+47, r24	; 0x2f
    5992:	0f c0       	rjmp	.+30     	; 0x59b2 <HLCD_voidInit+0x38e>
    5994:	88 ec       	ldi	r24, 0xC8	; 200
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	9e a7       	std	Y+46, r25	; 0x2e
    599a:	8d a7       	std	Y+45, r24	; 0x2d
    599c:	8d a5       	ldd	r24, Y+45	; 0x2d
    599e:	9e a5       	ldd	r25, Y+46	; 0x2e
    59a0:	01 97       	sbiw	r24, 0x01	; 1
    59a2:	f1 f7       	brne	.-4      	; 0x59a0 <HLCD_voidInit+0x37c>
    59a4:	9e a7       	std	Y+46, r25	; 0x2e
    59a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    59aa:	98 a9       	ldd	r25, Y+48	; 0x30
    59ac:	01 97       	sbiw	r24, 0x01	; 1
    59ae:	98 ab       	std	Y+48, r25	; 0x30
    59b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    59b4:	98 a9       	ldd	r25, Y+48	; 0x30
    59b6:	00 97       	sbiw	r24, 0x00	; 0
    59b8:	69 f7       	brne	.-38     	; 0x5994 <HLCD_voidInit+0x370>
    59ba:	14 c0       	rjmp	.+40     	; 0x59e4 <HLCD_voidInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59bc:	69 a9       	ldd	r22, Y+49	; 0x31
    59be:	7a a9       	ldd	r23, Y+50	; 0x32
    59c0:	8b a9       	ldd	r24, Y+51	; 0x33
    59c2:	9c a9       	ldd	r25, Y+52	; 0x34
    59c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59c8:	dc 01       	movw	r26, r24
    59ca:	cb 01       	movw	r24, r22
    59cc:	98 ab       	std	Y+48, r25	; 0x30
    59ce:	8f a7       	std	Y+47, r24	; 0x2f
    59d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    59d2:	98 a9       	ldd	r25, Y+48	; 0x30
    59d4:	9c a7       	std	Y+44, r25	; 0x2c
    59d6:	8b a7       	std	Y+43, r24	; 0x2b
    59d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    59da:	9c a5       	ldd	r25, Y+44	; 0x2c
    59dc:	01 97       	sbiw	r24, 0x01	; 1
    59de:	f1 f7       	brne	.-4      	; 0x59dc <HLCD_voidInit+0x3b8>
    59e0:	9c a7       	std	Y+44, r25	; 0x2c
    59e2:	8b a7       	std	Y+43, r24	; 0x2b
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display ON/OFF Control */
	    HLCD_voidSendCmd (CMD_CURSOR_On_DISPLAY_ON) ;
    59e4:	8e e0       	ldi	r24, 0x0E	; 14
    59e6:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
    59ea:	80 e0       	ldi	r24, 0x00	; 0
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	a0 e8       	ldi	r26, 0x80	; 128
    59f0:	bf e3       	ldi	r27, 0x3F	; 63
    59f2:	8f a3       	std	Y+39, r24	; 0x27
    59f4:	98 a7       	std	Y+40, r25	; 0x28
    59f6:	a9 a7       	std	Y+41, r26	; 0x29
    59f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59fa:	6f a1       	ldd	r22, Y+39	; 0x27
    59fc:	78 a5       	ldd	r23, Y+40	; 0x28
    59fe:	89 a5       	ldd	r24, Y+41	; 0x29
    5a00:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a02:	20 e0       	ldi	r18, 0x00	; 0
    5a04:	30 e0       	ldi	r19, 0x00	; 0
    5a06:	4a ef       	ldi	r20, 0xFA	; 250
    5a08:	54 e4       	ldi	r21, 0x44	; 68
    5a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a0e:	dc 01       	movw	r26, r24
    5a10:	cb 01       	movw	r24, r22
    5a12:	8b a3       	std	Y+35, r24	; 0x23
    5a14:	9c a3       	std	Y+36, r25	; 0x24
    5a16:	ad a3       	std	Y+37, r26	; 0x25
    5a18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5a1a:	6b a1       	ldd	r22, Y+35	; 0x23
    5a1c:	7c a1       	ldd	r23, Y+36	; 0x24
    5a1e:	8d a1       	ldd	r24, Y+37	; 0x25
    5a20:	9e a1       	ldd	r25, Y+38	; 0x26
    5a22:	20 e0       	ldi	r18, 0x00	; 0
    5a24:	30 e0       	ldi	r19, 0x00	; 0
    5a26:	40 e8       	ldi	r20, 0x80	; 128
    5a28:	5f e3       	ldi	r21, 0x3F	; 63
    5a2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5a2e:	88 23       	and	r24, r24
    5a30:	2c f4       	brge	.+10     	; 0x5a3c <HLCD_voidInit+0x418>
		__ticks = 1;
    5a32:	81 e0       	ldi	r24, 0x01	; 1
    5a34:	90 e0       	ldi	r25, 0x00	; 0
    5a36:	9a a3       	std	Y+34, r25	; 0x22
    5a38:	89 a3       	std	Y+33, r24	; 0x21
    5a3a:	3f c0       	rjmp	.+126    	; 0x5aba <HLCD_voidInit+0x496>
	else if (__tmp > 65535)
    5a3c:	6b a1       	ldd	r22, Y+35	; 0x23
    5a3e:	7c a1       	ldd	r23, Y+36	; 0x24
    5a40:	8d a1       	ldd	r24, Y+37	; 0x25
    5a42:	9e a1       	ldd	r25, Y+38	; 0x26
    5a44:	20 e0       	ldi	r18, 0x00	; 0
    5a46:	3f ef       	ldi	r19, 0xFF	; 255
    5a48:	4f e7       	ldi	r20, 0x7F	; 127
    5a4a:	57 e4       	ldi	r21, 0x47	; 71
    5a4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5a50:	18 16       	cp	r1, r24
    5a52:	4c f5       	brge	.+82     	; 0x5aa6 <HLCD_voidInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a54:	6f a1       	ldd	r22, Y+39	; 0x27
    5a56:	78 a5       	ldd	r23, Y+40	; 0x28
    5a58:	89 a5       	ldd	r24, Y+41	; 0x29
    5a5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a5c:	20 e0       	ldi	r18, 0x00	; 0
    5a5e:	30 e0       	ldi	r19, 0x00	; 0
    5a60:	40 e2       	ldi	r20, 0x20	; 32
    5a62:	51 e4       	ldi	r21, 0x41	; 65
    5a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a68:	dc 01       	movw	r26, r24
    5a6a:	cb 01       	movw	r24, r22
    5a6c:	bc 01       	movw	r22, r24
    5a6e:	cd 01       	movw	r24, r26
    5a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a74:	dc 01       	movw	r26, r24
    5a76:	cb 01       	movw	r24, r22
    5a78:	9a a3       	std	Y+34, r25	; 0x22
    5a7a:	89 a3       	std	Y+33, r24	; 0x21
    5a7c:	0f c0       	rjmp	.+30     	; 0x5a9c <HLCD_voidInit+0x478>
    5a7e:	88 ec       	ldi	r24, 0xC8	; 200
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	98 a3       	std	Y+32, r25	; 0x20
    5a84:	8f 8f       	std	Y+31, r24	; 0x1f
    5a86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a88:	98 a1       	ldd	r25, Y+32	; 0x20
    5a8a:	01 97       	sbiw	r24, 0x01	; 1
    5a8c:	f1 f7       	brne	.-4      	; 0x5a8a <HLCD_voidInit+0x466>
    5a8e:	98 a3       	std	Y+32, r25	; 0x20
    5a90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a92:	89 a1       	ldd	r24, Y+33	; 0x21
    5a94:	9a a1       	ldd	r25, Y+34	; 0x22
    5a96:	01 97       	sbiw	r24, 0x01	; 1
    5a98:	9a a3       	std	Y+34, r25	; 0x22
    5a9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a9c:	89 a1       	ldd	r24, Y+33	; 0x21
    5a9e:	9a a1       	ldd	r25, Y+34	; 0x22
    5aa0:	00 97       	sbiw	r24, 0x00	; 0
    5aa2:	69 f7       	brne	.-38     	; 0x5a7e <HLCD_voidInit+0x45a>
    5aa4:	14 c0       	rjmp	.+40     	; 0x5ace <HLCD_voidInit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aa6:	6b a1       	ldd	r22, Y+35	; 0x23
    5aa8:	7c a1       	ldd	r23, Y+36	; 0x24
    5aaa:	8d a1       	ldd	r24, Y+37	; 0x25
    5aac:	9e a1       	ldd	r25, Y+38	; 0x26
    5aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ab2:	dc 01       	movw	r26, r24
    5ab4:	cb 01       	movw	r24, r22
    5ab6:	9a a3       	std	Y+34, r25	; 0x22
    5ab8:	89 a3       	std	Y+33, r24	; 0x21
    5aba:	89 a1       	ldd	r24, Y+33	; 0x21
    5abc:	9a a1       	ldd	r25, Y+34	; 0x22
    5abe:	9e 8f       	std	Y+30, r25	; 0x1e
    5ac0:	8d 8f       	std	Y+29, r24	; 0x1d
    5ac2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ac4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5ac6:	01 97       	sbiw	r24, 0x01	; 1
    5ac8:	f1 f7       	brne	.-4      	; 0x5ac6 <HLCD_voidInit+0x4a2>
    5aca:	9e 8f       	std	Y+30, r25	; 0x1e
    5acc:	8d 8f       	std	Y+29, r24	; 0x1d
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display Clear */
	    HLCD_voidSendCmd (CMD_CLEAR) ;
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
    5ad4:	80 e0       	ldi	r24, 0x00	; 0
    5ad6:	90 e0       	ldi	r25, 0x00	; 0
    5ad8:	a0 e2       	ldi	r26, 0x20	; 32
    5ada:	b1 e4       	ldi	r27, 0x41	; 65
    5adc:	89 8f       	std	Y+25, r24	; 0x19
    5ade:	9a 8f       	std	Y+26, r25	; 0x1a
    5ae0:	ab 8f       	std	Y+27, r26	; 0x1b
    5ae2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    5ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5aec:	20 e0       	ldi	r18, 0x00	; 0
    5aee:	30 e0       	ldi	r19, 0x00	; 0
    5af0:	4a ef       	ldi	r20, 0xFA	; 250
    5af2:	54 e4       	ldi	r21, 0x44	; 68
    5af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5af8:	dc 01       	movw	r26, r24
    5afa:	cb 01       	movw	r24, r22
    5afc:	8d 8b       	std	Y+21, r24	; 0x15
    5afe:	9e 8b       	std	Y+22, r25	; 0x16
    5b00:	af 8b       	std	Y+23, r26	; 0x17
    5b02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b04:	6d 89       	ldd	r22, Y+21	; 0x15
    5b06:	7e 89       	ldd	r23, Y+22	; 0x16
    5b08:	8f 89       	ldd	r24, Y+23	; 0x17
    5b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    5b0c:	20 e0       	ldi	r18, 0x00	; 0
    5b0e:	30 e0       	ldi	r19, 0x00	; 0
    5b10:	40 e8       	ldi	r20, 0x80	; 128
    5b12:	5f e3       	ldi	r21, 0x3F	; 63
    5b14:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5b18:	88 23       	and	r24, r24
    5b1a:	2c f4       	brge	.+10     	; 0x5b26 <HLCD_voidInit+0x502>
		__ticks = 1;
    5b1c:	81 e0       	ldi	r24, 0x01	; 1
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	9c 8b       	std	Y+20, r25	; 0x14
    5b22:	8b 8b       	std	Y+19, r24	; 0x13
    5b24:	3f c0       	rjmp	.+126    	; 0x5ba4 <HLCD_voidInit+0x580>
	else if (__tmp > 65535)
    5b26:	6d 89       	ldd	r22, Y+21	; 0x15
    5b28:	7e 89       	ldd	r23, Y+22	; 0x16
    5b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    5b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    5b2e:	20 e0       	ldi	r18, 0x00	; 0
    5b30:	3f ef       	ldi	r19, 0xFF	; 255
    5b32:	4f e7       	ldi	r20, 0x7F	; 127
    5b34:	57 e4       	ldi	r21, 0x47	; 71
    5b36:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5b3a:	18 16       	cp	r1, r24
    5b3c:	4c f5       	brge	.+82     	; 0x5b90 <HLCD_voidInit+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b3e:	69 8d       	ldd	r22, Y+25	; 0x19
    5b40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b46:	20 e0       	ldi	r18, 0x00	; 0
    5b48:	30 e0       	ldi	r19, 0x00	; 0
    5b4a:	40 e2       	ldi	r20, 0x20	; 32
    5b4c:	51 e4       	ldi	r21, 0x41	; 65
    5b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b52:	dc 01       	movw	r26, r24
    5b54:	cb 01       	movw	r24, r22
    5b56:	bc 01       	movw	r22, r24
    5b58:	cd 01       	movw	r24, r26
    5b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b5e:	dc 01       	movw	r26, r24
    5b60:	cb 01       	movw	r24, r22
    5b62:	9c 8b       	std	Y+20, r25	; 0x14
    5b64:	8b 8b       	std	Y+19, r24	; 0x13
    5b66:	0f c0       	rjmp	.+30     	; 0x5b86 <HLCD_voidInit+0x562>
    5b68:	88 ec       	ldi	r24, 0xC8	; 200
    5b6a:	90 e0       	ldi	r25, 0x00	; 0
    5b6c:	9a 8b       	std	Y+18, r25	; 0x12
    5b6e:	89 8b       	std	Y+17, r24	; 0x11
    5b70:	89 89       	ldd	r24, Y+17	; 0x11
    5b72:	9a 89       	ldd	r25, Y+18	; 0x12
    5b74:	01 97       	sbiw	r24, 0x01	; 1
    5b76:	f1 f7       	brne	.-4      	; 0x5b74 <HLCD_voidInit+0x550>
    5b78:	9a 8b       	std	Y+18, r25	; 0x12
    5b7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    5b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    5b80:	01 97       	sbiw	r24, 0x01	; 1
    5b82:	9c 8b       	std	Y+20, r25	; 0x14
    5b84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b86:	8b 89       	ldd	r24, Y+19	; 0x13
    5b88:	9c 89       	ldd	r25, Y+20	; 0x14
    5b8a:	00 97       	sbiw	r24, 0x00	; 0
    5b8c:	69 f7       	brne	.-38     	; 0x5b68 <HLCD_voidInit+0x544>
    5b8e:	14 c0       	rjmp	.+40     	; 0x5bb8 <HLCD_voidInit+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b90:	6d 89       	ldd	r22, Y+21	; 0x15
    5b92:	7e 89       	ldd	r23, Y+22	; 0x16
    5b94:	8f 89       	ldd	r24, Y+23	; 0x17
    5b96:	98 8d       	ldd	r25, Y+24	; 0x18
    5b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b9c:	dc 01       	movw	r26, r24
    5b9e:	cb 01       	movw	r24, r22
    5ba0:	9c 8b       	std	Y+20, r25	; 0x14
    5ba2:	8b 8b       	std	Y+19, r24	; 0x13
    5ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    5ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    5ba8:	98 8b       	std	Y+16, r25	; 0x10
    5baa:	8f 87       	std	Y+15, r24	; 0x0f
    5bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    5bae:	98 89       	ldd	r25, Y+16	; 0x10
    5bb0:	01 97       	sbiw	r24, 0x01	; 1
    5bb2:	f1 f7       	brne	.-4      	; 0x5bb0 <HLCD_voidInit+0x58c>
    5bb4:	98 8b       	std	Y+16, r25	; 0x10
    5bb6:	8f 87       	std	Y+15, r24	; 0x0f
		
		/* Wait for command to settle */
	    _delay_ms (10) ;
	    
	    /** Entry mode set */
	    HLCD_voidSendCmd (CMD_ENTRY_MODE) ;
    5bb8:	86 e0       	ldi	r24, 0x06	; 6
    5bba:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
    5bbe:	80 e0       	ldi	r24, 0x00	; 0
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	a0 e8       	ldi	r26, 0x80	; 128
    5bc4:	bf e3       	ldi	r27, 0x3F	; 63
    5bc6:	8b 87       	std	Y+11, r24	; 0x0b
    5bc8:	9c 87       	std	Y+12, r25	; 0x0c
    5bca:	ad 87       	std	Y+13, r26	; 0x0d
    5bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bd6:	20 e0       	ldi	r18, 0x00	; 0
    5bd8:	30 e0       	ldi	r19, 0x00	; 0
    5bda:	4a ef       	ldi	r20, 0xFA	; 250
    5bdc:	54 e4       	ldi	r21, 0x44	; 68
    5bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5be2:	dc 01       	movw	r26, r24
    5be4:	cb 01       	movw	r24, r22
    5be6:	8f 83       	std	Y+7, r24	; 0x07
    5be8:	98 87       	std	Y+8, r25	; 0x08
    5bea:	a9 87       	std	Y+9, r26	; 0x09
    5bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5bee:	6f 81       	ldd	r22, Y+7	; 0x07
    5bf0:	78 85       	ldd	r23, Y+8	; 0x08
    5bf2:	89 85       	ldd	r24, Y+9	; 0x09
    5bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bf6:	20 e0       	ldi	r18, 0x00	; 0
    5bf8:	30 e0       	ldi	r19, 0x00	; 0
    5bfa:	40 e8       	ldi	r20, 0x80	; 128
    5bfc:	5f e3       	ldi	r21, 0x3F	; 63
    5bfe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5c02:	88 23       	and	r24, r24
    5c04:	2c f4       	brge	.+10     	; 0x5c10 <HLCD_voidInit+0x5ec>
		__ticks = 1;
    5c06:	81 e0       	ldi	r24, 0x01	; 1
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	9e 83       	std	Y+6, r25	; 0x06
    5c0c:	8d 83       	std	Y+5, r24	; 0x05
    5c0e:	3f c0       	rjmp	.+126    	; 0x5c8e <HLCD_voidInit+0x66a>
	else if (__tmp > 65535)
    5c10:	6f 81       	ldd	r22, Y+7	; 0x07
    5c12:	78 85       	ldd	r23, Y+8	; 0x08
    5c14:	89 85       	ldd	r24, Y+9	; 0x09
    5c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c18:	20 e0       	ldi	r18, 0x00	; 0
    5c1a:	3f ef       	ldi	r19, 0xFF	; 255
    5c1c:	4f e7       	ldi	r20, 0x7F	; 127
    5c1e:	57 e4       	ldi	r21, 0x47	; 71
    5c20:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5c24:	18 16       	cp	r1, r24
    5c26:	4c f5       	brge	.+82     	; 0x5c7a <HLCD_voidInit+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c30:	20 e0       	ldi	r18, 0x00	; 0
    5c32:	30 e0       	ldi	r19, 0x00	; 0
    5c34:	40 e2       	ldi	r20, 0x20	; 32
    5c36:	51 e4       	ldi	r21, 0x41	; 65
    5c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c3c:	dc 01       	movw	r26, r24
    5c3e:	cb 01       	movw	r24, r22
    5c40:	bc 01       	movw	r22, r24
    5c42:	cd 01       	movw	r24, r26
    5c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c48:	dc 01       	movw	r26, r24
    5c4a:	cb 01       	movw	r24, r22
    5c4c:	9e 83       	std	Y+6, r25	; 0x06
    5c4e:	8d 83       	std	Y+5, r24	; 0x05
    5c50:	0f c0       	rjmp	.+30     	; 0x5c70 <HLCD_voidInit+0x64c>
    5c52:	88 ec       	ldi	r24, 0xC8	; 200
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	9c 83       	std	Y+4, r25	; 0x04
    5c58:	8b 83       	std	Y+3, r24	; 0x03
    5c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    5c5e:	01 97       	sbiw	r24, 0x01	; 1
    5c60:	f1 f7       	brne	.-4      	; 0x5c5e <HLCD_voidInit+0x63a>
    5c62:	9c 83       	std	Y+4, r25	; 0x04
    5c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c66:	8d 81       	ldd	r24, Y+5	; 0x05
    5c68:	9e 81       	ldd	r25, Y+6	; 0x06
    5c6a:	01 97       	sbiw	r24, 0x01	; 1
    5c6c:	9e 83       	std	Y+6, r25	; 0x06
    5c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c70:	8d 81       	ldd	r24, Y+5	; 0x05
    5c72:	9e 81       	ldd	r25, Y+6	; 0x06
    5c74:	00 97       	sbiw	r24, 0x00	; 0
    5c76:	69 f7       	brne	.-38     	; 0x5c52 <HLCD_voidInit+0x62e>
    5c78:	14 c0       	rjmp	.+40     	; 0x5ca2 <HLCD_voidInit+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    5c7c:	78 85       	ldd	r23, Y+8	; 0x08
    5c7e:	89 85       	ldd	r24, Y+9	; 0x09
    5c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c86:	dc 01       	movw	r26, r24
    5c88:	cb 01       	movw	r24, r22
    5c8a:	9e 83       	std	Y+6, r25	; 0x06
    5c8c:	8d 83       	std	Y+5, r24	; 0x05
    5c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c90:	9e 81       	ldd	r25, Y+6	; 0x06
    5c92:	9a 83       	std	Y+2, r25	; 0x02
    5c94:	89 83       	std	Y+1, r24	; 0x01
    5c96:	89 81       	ldd	r24, Y+1	; 0x01
    5c98:	9a 81       	ldd	r25, Y+2	; 0x02
    5c9a:	01 97       	sbiw	r24, 0x01	; 1
    5c9c:	f1 f7       	brne	.-4      	; 0x5c9a <HLCD_voidInit+0x676>
    5c9e:	9a 83       	std	Y+2, r25	; 0x02
    5ca0:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for command to settle */
	    _delay_ms (1) ;
	#else 
		#error "selecct right mode"
	#endif
}
    5ca2:	cc 5a       	subi	r28, 0xAC	; 172
    5ca4:	df 4f       	sbci	r29, 0xFF	; 255
    5ca6:	0f b6       	in	r0, 0x3f	; 63
    5ca8:	f8 94       	cli
    5caa:	de bf       	out	0x3e, r29	; 62
    5cac:	0f be       	out	0x3f, r0	; 63
    5cae:	cd bf       	out	0x3d, r28	; 61
    5cb0:	cf 91       	pop	r28
    5cb2:	df 91       	pop	r29
    5cb4:	1f 91       	pop	r17
    5cb6:	0f 91       	pop	r16
    5cb8:	08 95       	ret

00005cba <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Char)
{
    5cba:	0f 93       	push	r16
    5cbc:	1f 93       	push	r17
    5cbe:	df 93       	push	r29
    5cc0:	cf 93       	push	r28
    5cc2:	cd b7       	in	r28, 0x3d	; 61
    5cc4:	de b7       	in	r29, 0x3e	; 62
    5cc6:	c7 54       	subi	r28, 0x47	; 71
    5cc8:	d0 40       	sbci	r29, 0x00	; 0
    5cca:	0f b6       	in	r0, 0x3f	; 63
    5ccc:	f8 94       	cli
    5cce:	de bf       	out	0x3e, r29	; 62
    5cd0:	0f be       	out	0x3f, r0	; 63
    5cd2:	cd bf       	out	0x3d, r28	; 61
    5cd4:	fe 01       	movw	r30, r28
    5cd6:	e9 5b       	subi	r30, 0xB9	; 185
    5cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cda:	80 83       	st	Z, r24
		/* Wait for E to settle */
		_delay_ms (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    5cdc:	84 e0       	ldi	r24, 0x04	; 4
    5cde:	64 e0       	ldi	r22, 0x04	; 4
    5ce0:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
		
		/**send last four bits of data to last four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8Char >> FOUR_BITS) ;
    5ce4:	fe 01       	movw	r30, r28
    5ce6:	e9 5b       	subi	r30, 0xB9	; 185
    5ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cea:	80 81       	ld	r24, Z
    5cec:	98 2f       	mov	r25, r24
    5cee:	92 95       	swap	r25
    5cf0:	9f 70       	andi	r25, 0x0F	; 15
    5cf2:	81 e0       	ldi	r24, 0x01	; 1
    5cf4:	69 2f       	mov	r22, r25
    5cf6:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <MDIO_voidWriteHighNibble>
		
		/**set register select to low */
		MDIO_voidSetPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    5cfa:	84 e0       	ldi	r24, 0x04	; 4
    5cfc:	62 e0       	ldi	r22, 0x02	; 2
    5cfe:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
		
		/**set enable to high */
		MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    5d02:	84 e0       	ldi	r24, 0x04	; 4
    5d04:	63 e0       	ldi	r22, 0x03	; 3
    5d06:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    5d0a:	fe 01       	movw	r30, r28
    5d0c:	ed 5b       	subi	r30, 0xBD	; 189
    5d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	a0 e0       	ldi	r26, 0x00	; 0
    5d16:	b0 e4       	ldi	r27, 0x40	; 64
    5d18:	80 83       	st	Z, r24
    5d1a:	91 83       	std	Z+1, r25	; 0x01
    5d1c:	a2 83       	std	Z+2, r26	; 0x02
    5d1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d20:	8e 01       	movw	r16, r28
    5d22:	01 5c       	subi	r16, 0xC1	; 193
    5d24:	1f 4f       	sbci	r17, 0xFF	; 255
    5d26:	fe 01       	movw	r30, r28
    5d28:	ed 5b       	subi	r30, 0xBD	; 189
    5d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d2c:	60 81       	ld	r22, Z
    5d2e:	71 81       	ldd	r23, Z+1	; 0x01
    5d30:	82 81       	ldd	r24, Z+2	; 0x02
    5d32:	93 81       	ldd	r25, Z+3	; 0x03
    5d34:	20 e0       	ldi	r18, 0x00	; 0
    5d36:	30 e0       	ldi	r19, 0x00	; 0
    5d38:	4a ef       	ldi	r20, 0xFA	; 250
    5d3a:	54 e4       	ldi	r21, 0x44	; 68
    5d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d40:	dc 01       	movw	r26, r24
    5d42:	cb 01       	movw	r24, r22
    5d44:	f8 01       	movw	r30, r16
    5d46:	80 83       	st	Z, r24
    5d48:	91 83       	std	Z+1, r25	; 0x01
    5d4a:	a2 83       	std	Z+2, r26	; 0x02
    5d4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d4e:	fe 01       	movw	r30, r28
    5d50:	ff 96       	adiw	r30, 0x3f	; 63
    5d52:	60 81       	ld	r22, Z
    5d54:	71 81       	ldd	r23, Z+1	; 0x01
    5d56:	82 81       	ldd	r24, Z+2	; 0x02
    5d58:	93 81       	ldd	r25, Z+3	; 0x03
    5d5a:	20 e0       	ldi	r18, 0x00	; 0
    5d5c:	30 e0       	ldi	r19, 0x00	; 0
    5d5e:	40 e8       	ldi	r20, 0x80	; 128
    5d60:	5f e3       	ldi	r21, 0x3F	; 63
    5d62:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5d66:	88 23       	and	r24, r24
    5d68:	2c f4       	brge	.+10     	; 0x5d74 <HLCD_voidSendData+0xba>
		__ticks = 1;
    5d6a:	81 e0       	ldi	r24, 0x01	; 1
    5d6c:	90 e0       	ldi	r25, 0x00	; 0
    5d6e:	9e af       	std	Y+62, r25	; 0x3e
    5d70:	8d af       	std	Y+61, r24	; 0x3d
    5d72:	46 c0       	rjmp	.+140    	; 0x5e00 <HLCD_voidSendData+0x146>
	else if (__tmp > 65535)
    5d74:	fe 01       	movw	r30, r28
    5d76:	ff 96       	adiw	r30, 0x3f	; 63
    5d78:	60 81       	ld	r22, Z
    5d7a:	71 81       	ldd	r23, Z+1	; 0x01
    5d7c:	82 81       	ldd	r24, Z+2	; 0x02
    5d7e:	93 81       	ldd	r25, Z+3	; 0x03
    5d80:	20 e0       	ldi	r18, 0x00	; 0
    5d82:	3f ef       	ldi	r19, 0xFF	; 255
    5d84:	4f e7       	ldi	r20, 0x7F	; 127
    5d86:	57 e4       	ldi	r21, 0x47	; 71
    5d88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5d8c:	18 16       	cp	r1, r24
    5d8e:	64 f5       	brge	.+88     	; 0x5de8 <HLCD_voidSendData+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d90:	fe 01       	movw	r30, r28
    5d92:	ed 5b       	subi	r30, 0xBD	; 189
    5d94:	ff 4f       	sbci	r31, 0xFF	; 255
    5d96:	60 81       	ld	r22, Z
    5d98:	71 81       	ldd	r23, Z+1	; 0x01
    5d9a:	82 81       	ldd	r24, Z+2	; 0x02
    5d9c:	93 81       	ldd	r25, Z+3	; 0x03
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	40 e2       	ldi	r20, 0x20	; 32
    5da4:	51 e4       	ldi	r21, 0x41	; 65
    5da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5daa:	dc 01       	movw	r26, r24
    5dac:	cb 01       	movw	r24, r22
    5dae:	bc 01       	movw	r22, r24
    5db0:	cd 01       	movw	r24, r26
    5db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5db6:	dc 01       	movw	r26, r24
    5db8:	cb 01       	movw	r24, r22
    5dba:	9e af       	std	Y+62, r25	; 0x3e
    5dbc:	8d af       	std	Y+61, r24	; 0x3d
    5dbe:	0f c0       	rjmp	.+30     	; 0x5dde <HLCD_voidSendData+0x124>
    5dc0:	88 ec       	ldi	r24, 0xC8	; 200
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	9c af       	std	Y+60, r25	; 0x3c
    5dc6:	8b af       	std	Y+59, r24	; 0x3b
    5dc8:	8b ad       	ldd	r24, Y+59	; 0x3b
    5dca:	9c ad       	ldd	r25, Y+60	; 0x3c
    5dcc:	01 97       	sbiw	r24, 0x01	; 1
    5dce:	f1 f7       	brne	.-4      	; 0x5dcc <HLCD_voidSendData+0x112>
    5dd0:	9c af       	std	Y+60, r25	; 0x3c
    5dd2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    5dd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    5dd8:	01 97       	sbiw	r24, 0x01	; 1
    5dda:	9e af       	std	Y+62, r25	; 0x3e
    5ddc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dde:	8d ad       	ldd	r24, Y+61	; 0x3d
    5de0:	9e ad       	ldd	r25, Y+62	; 0x3e
    5de2:	00 97       	sbiw	r24, 0x00	; 0
    5de4:	69 f7       	brne	.-38     	; 0x5dc0 <HLCD_voidSendData+0x106>
    5de6:	16 c0       	rjmp	.+44     	; 0x5e14 <HLCD_voidSendData+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5de8:	fe 01       	movw	r30, r28
    5dea:	ff 96       	adiw	r30, 0x3f	; 63
    5dec:	60 81       	ld	r22, Z
    5dee:	71 81       	ldd	r23, Z+1	; 0x01
    5df0:	82 81       	ldd	r24, Z+2	; 0x02
    5df2:	93 81       	ldd	r25, Z+3	; 0x03
    5df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5df8:	dc 01       	movw	r26, r24
    5dfa:	cb 01       	movw	r24, r22
    5dfc:	9e af       	std	Y+62, r25	; 0x3e
    5dfe:	8d af       	std	Y+61, r24	; 0x3d
    5e00:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e02:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e04:	9a af       	std	Y+58, r25	; 0x3a
    5e06:	89 af       	std	Y+57, r24	; 0x39
    5e08:	89 ad       	ldd	r24, Y+57	; 0x39
    5e0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    5e0c:	01 97       	sbiw	r24, 0x01	; 1
    5e0e:	f1 f7       	brne	.-4      	; 0x5e0c <HLCD_voidSendData+0x152>
    5e10:	9a af       	std	Y+58, r25	; 0x3a
    5e12:	89 af       	std	Y+57, r24	; 0x39
		
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    5e14:	84 e0       	ldi	r24, 0x04	; 4
    5e16:	63 e0       	ldi	r22, 0x03	; 3
    5e18:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	a0 e0       	ldi	r26, 0x00	; 0
    5e22:	b0 e4       	ldi	r27, 0x40	; 64
    5e24:	8d ab       	std	Y+53, r24	; 0x35
    5e26:	9e ab       	std	Y+54, r25	; 0x36
    5e28:	af ab       	std	Y+55, r26	; 0x37
    5e2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e2c:	6d a9       	ldd	r22, Y+53	; 0x35
    5e2e:	7e a9       	ldd	r23, Y+54	; 0x36
    5e30:	8f a9       	ldd	r24, Y+55	; 0x37
    5e32:	98 ad       	ldd	r25, Y+56	; 0x38
    5e34:	20 e0       	ldi	r18, 0x00	; 0
    5e36:	30 e0       	ldi	r19, 0x00	; 0
    5e38:	4a ef       	ldi	r20, 0xFA	; 250
    5e3a:	54 e4       	ldi	r21, 0x44	; 68
    5e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e40:	dc 01       	movw	r26, r24
    5e42:	cb 01       	movw	r24, r22
    5e44:	89 ab       	std	Y+49, r24	; 0x31
    5e46:	9a ab       	std	Y+50, r25	; 0x32
    5e48:	ab ab       	std	Y+51, r26	; 0x33
    5e4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5e4c:	69 a9       	ldd	r22, Y+49	; 0x31
    5e4e:	7a a9       	ldd	r23, Y+50	; 0x32
    5e50:	8b a9       	ldd	r24, Y+51	; 0x33
    5e52:	9c a9       	ldd	r25, Y+52	; 0x34
    5e54:	20 e0       	ldi	r18, 0x00	; 0
    5e56:	30 e0       	ldi	r19, 0x00	; 0
    5e58:	40 e8       	ldi	r20, 0x80	; 128
    5e5a:	5f e3       	ldi	r21, 0x3F	; 63
    5e5c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5e60:	88 23       	and	r24, r24
    5e62:	2c f4       	brge	.+10     	; 0x5e6e <HLCD_voidSendData+0x1b4>
		__ticks = 1;
    5e64:	81 e0       	ldi	r24, 0x01	; 1
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	98 ab       	std	Y+48, r25	; 0x30
    5e6a:	8f a7       	std	Y+47, r24	; 0x2f
    5e6c:	3f c0       	rjmp	.+126    	; 0x5eec <HLCD_voidSendData+0x232>
	else if (__tmp > 65535)
    5e6e:	69 a9       	ldd	r22, Y+49	; 0x31
    5e70:	7a a9       	ldd	r23, Y+50	; 0x32
    5e72:	8b a9       	ldd	r24, Y+51	; 0x33
    5e74:	9c a9       	ldd	r25, Y+52	; 0x34
    5e76:	20 e0       	ldi	r18, 0x00	; 0
    5e78:	3f ef       	ldi	r19, 0xFF	; 255
    5e7a:	4f e7       	ldi	r20, 0x7F	; 127
    5e7c:	57 e4       	ldi	r21, 0x47	; 71
    5e7e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5e82:	18 16       	cp	r1, r24
    5e84:	4c f5       	brge	.+82     	; 0x5ed8 <HLCD_voidSendData+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e86:	6d a9       	ldd	r22, Y+53	; 0x35
    5e88:	7e a9       	ldd	r23, Y+54	; 0x36
    5e8a:	8f a9       	ldd	r24, Y+55	; 0x37
    5e8c:	98 ad       	ldd	r25, Y+56	; 0x38
    5e8e:	20 e0       	ldi	r18, 0x00	; 0
    5e90:	30 e0       	ldi	r19, 0x00	; 0
    5e92:	40 e2       	ldi	r20, 0x20	; 32
    5e94:	51 e4       	ldi	r21, 0x41	; 65
    5e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e9a:	dc 01       	movw	r26, r24
    5e9c:	cb 01       	movw	r24, r22
    5e9e:	bc 01       	movw	r22, r24
    5ea0:	cd 01       	movw	r24, r26
    5ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ea6:	dc 01       	movw	r26, r24
    5ea8:	cb 01       	movw	r24, r22
    5eaa:	98 ab       	std	Y+48, r25	; 0x30
    5eac:	8f a7       	std	Y+47, r24	; 0x2f
    5eae:	0f c0       	rjmp	.+30     	; 0x5ece <HLCD_voidSendData+0x214>
    5eb0:	88 ec       	ldi	r24, 0xC8	; 200
    5eb2:	90 e0       	ldi	r25, 0x00	; 0
    5eb4:	9e a7       	std	Y+46, r25	; 0x2e
    5eb6:	8d a7       	std	Y+45, r24	; 0x2d
    5eb8:	8d a5       	ldd	r24, Y+45	; 0x2d
    5eba:	9e a5       	ldd	r25, Y+46	; 0x2e
    5ebc:	01 97       	sbiw	r24, 0x01	; 1
    5ebe:	f1 f7       	brne	.-4      	; 0x5ebc <HLCD_voidSendData+0x202>
    5ec0:	9e a7       	std	Y+46, r25	; 0x2e
    5ec2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ec4:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ec6:	98 a9       	ldd	r25, Y+48	; 0x30
    5ec8:	01 97       	sbiw	r24, 0x01	; 1
    5eca:	98 ab       	std	Y+48, r25	; 0x30
    5ecc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    5ed2:	00 97       	sbiw	r24, 0x00	; 0
    5ed4:	69 f7       	brne	.-38     	; 0x5eb0 <HLCD_voidSendData+0x1f6>
    5ed6:	14 c0       	rjmp	.+40     	; 0x5f00 <HLCD_voidSendData+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ed8:	69 a9       	ldd	r22, Y+49	; 0x31
    5eda:	7a a9       	ldd	r23, Y+50	; 0x32
    5edc:	8b a9       	ldd	r24, Y+51	; 0x33
    5ede:	9c a9       	ldd	r25, Y+52	; 0x34
    5ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ee4:	dc 01       	movw	r26, r24
    5ee6:	cb 01       	movw	r24, r22
    5ee8:	98 ab       	std	Y+48, r25	; 0x30
    5eea:	8f a7       	std	Y+47, r24	; 0x2f
    5eec:	8f a5       	ldd	r24, Y+47	; 0x2f
    5eee:	98 a9       	ldd	r25, Y+48	; 0x30
    5ef0:	9c a7       	std	Y+44, r25	; 0x2c
    5ef2:	8b a7       	std	Y+43, r24	; 0x2b
    5ef4:	8b a5       	ldd	r24, Y+43	; 0x2b
    5ef6:	9c a5       	ldd	r25, Y+44	; 0x2c
    5ef8:	01 97       	sbiw	r24, 0x01	; 1
    5efa:	f1 f7       	brne	.-4      	; 0x5ef8 <HLCD_voidSendData+0x23e>
    5efc:	9c a7       	std	Y+44, r25	; 0x2c
    5efe:	8b a7       	std	Y+43, r24	; 0x2b
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		
		/**set read/write to low */
		MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    5f00:	84 e0       	ldi	r24, 0x04	; 4
    5f02:	64 e0       	ldi	r22, 0x04	; 4
    5f04:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
		
		/**send last four bits of data to last four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8Char) ;
    5f08:	fe 01       	movw	r30, r28
    5f0a:	e9 5b       	subi	r30, 0xB9	; 185
    5f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f0e:	81 e0       	ldi	r24, 0x01	; 1
    5f10:	60 81       	ld	r22, Z
    5f12:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <MDIO_voidWriteHighNibble>
		
		/**set register select to low */
		MDIO_voidSetPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    5f16:	84 e0       	ldi	r24, 0x04	; 4
    5f18:	62 e0       	ldi	r22, 0x02	; 2
    5f1a:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
		
		/**set enable to high */
		MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    5f1e:	84 e0       	ldi	r24, 0x04	; 4
    5f20:	63 e0       	ldi	r22, 0x03	; 3
    5f22:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
    5f26:	80 e0       	ldi	r24, 0x00	; 0
    5f28:	90 e0       	ldi	r25, 0x00	; 0
    5f2a:	a0 e0       	ldi	r26, 0x00	; 0
    5f2c:	b0 e4       	ldi	r27, 0x40	; 64
    5f2e:	8f a3       	std	Y+39, r24	; 0x27
    5f30:	98 a7       	std	Y+40, r25	; 0x28
    5f32:	a9 a7       	std	Y+41, r26	; 0x29
    5f34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f36:	6f a1       	ldd	r22, Y+39	; 0x27
    5f38:	78 a5       	ldd	r23, Y+40	; 0x28
    5f3a:	89 a5       	ldd	r24, Y+41	; 0x29
    5f3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f3e:	20 e0       	ldi	r18, 0x00	; 0
    5f40:	30 e0       	ldi	r19, 0x00	; 0
    5f42:	4a ef       	ldi	r20, 0xFA	; 250
    5f44:	54 e4       	ldi	r21, 0x44	; 68
    5f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f4a:	dc 01       	movw	r26, r24
    5f4c:	cb 01       	movw	r24, r22
    5f4e:	8b a3       	std	Y+35, r24	; 0x23
    5f50:	9c a3       	std	Y+36, r25	; 0x24
    5f52:	ad a3       	std	Y+37, r26	; 0x25
    5f54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5f56:	6b a1       	ldd	r22, Y+35	; 0x23
    5f58:	7c a1       	ldd	r23, Y+36	; 0x24
    5f5a:	8d a1       	ldd	r24, Y+37	; 0x25
    5f5c:	9e a1       	ldd	r25, Y+38	; 0x26
    5f5e:	20 e0       	ldi	r18, 0x00	; 0
    5f60:	30 e0       	ldi	r19, 0x00	; 0
    5f62:	40 e8       	ldi	r20, 0x80	; 128
    5f64:	5f e3       	ldi	r21, 0x3F	; 63
    5f66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5f6a:	88 23       	and	r24, r24
    5f6c:	2c f4       	brge	.+10     	; 0x5f78 <HLCD_voidSendData+0x2be>
		__ticks = 1;
    5f6e:	81 e0       	ldi	r24, 0x01	; 1
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	9a a3       	std	Y+34, r25	; 0x22
    5f74:	89 a3       	std	Y+33, r24	; 0x21
    5f76:	3f c0       	rjmp	.+126    	; 0x5ff6 <HLCD_voidSendData+0x33c>
	else if (__tmp > 65535)
    5f78:	6b a1       	ldd	r22, Y+35	; 0x23
    5f7a:	7c a1       	ldd	r23, Y+36	; 0x24
    5f7c:	8d a1       	ldd	r24, Y+37	; 0x25
    5f7e:	9e a1       	ldd	r25, Y+38	; 0x26
    5f80:	20 e0       	ldi	r18, 0x00	; 0
    5f82:	3f ef       	ldi	r19, 0xFF	; 255
    5f84:	4f e7       	ldi	r20, 0x7F	; 127
    5f86:	57 e4       	ldi	r21, 0x47	; 71
    5f88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5f8c:	18 16       	cp	r1, r24
    5f8e:	4c f5       	brge	.+82     	; 0x5fe2 <HLCD_voidSendData+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f90:	6f a1       	ldd	r22, Y+39	; 0x27
    5f92:	78 a5       	ldd	r23, Y+40	; 0x28
    5f94:	89 a5       	ldd	r24, Y+41	; 0x29
    5f96:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f98:	20 e0       	ldi	r18, 0x00	; 0
    5f9a:	30 e0       	ldi	r19, 0x00	; 0
    5f9c:	40 e2       	ldi	r20, 0x20	; 32
    5f9e:	51 e4       	ldi	r21, 0x41	; 65
    5fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fa4:	dc 01       	movw	r26, r24
    5fa6:	cb 01       	movw	r24, r22
    5fa8:	bc 01       	movw	r22, r24
    5faa:	cd 01       	movw	r24, r26
    5fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fb0:	dc 01       	movw	r26, r24
    5fb2:	cb 01       	movw	r24, r22
    5fb4:	9a a3       	std	Y+34, r25	; 0x22
    5fb6:	89 a3       	std	Y+33, r24	; 0x21
    5fb8:	0f c0       	rjmp	.+30     	; 0x5fd8 <HLCD_voidSendData+0x31e>
    5fba:	88 ec       	ldi	r24, 0xC8	; 200
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	98 a3       	std	Y+32, r25	; 0x20
    5fc0:	8f 8f       	std	Y+31, r24	; 0x1f
    5fc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5fc4:	98 a1       	ldd	r25, Y+32	; 0x20
    5fc6:	01 97       	sbiw	r24, 0x01	; 1
    5fc8:	f1 f7       	brne	.-4      	; 0x5fc6 <HLCD_voidSendData+0x30c>
    5fca:	98 a3       	std	Y+32, r25	; 0x20
    5fcc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fce:	89 a1       	ldd	r24, Y+33	; 0x21
    5fd0:	9a a1       	ldd	r25, Y+34	; 0x22
    5fd2:	01 97       	sbiw	r24, 0x01	; 1
    5fd4:	9a a3       	std	Y+34, r25	; 0x22
    5fd6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    5fda:	9a a1       	ldd	r25, Y+34	; 0x22
    5fdc:	00 97       	sbiw	r24, 0x00	; 0
    5fde:	69 f7       	brne	.-38     	; 0x5fba <HLCD_voidSendData+0x300>
    5fe0:	14 c0       	rjmp	.+40     	; 0x600a <HLCD_voidSendData+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fe2:	6b a1       	ldd	r22, Y+35	; 0x23
    5fe4:	7c a1       	ldd	r23, Y+36	; 0x24
    5fe6:	8d a1       	ldd	r24, Y+37	; 0x25
    5fe8:	9e a1       	ldd	r25, Y+38	; 0x26
    5fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fee:	dc 01       	movw	r26, r24
    5ff0:	cb 01       	movw	r24, r22
    5ff2:	9a a3       	std	Y+34, r25	; 0x22
    5ff4:	89 a3       	std	Y+33, r24	; 0x21
    5ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    5ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    5ffa:	9e 8f       	std	Y+30, r25	; 0x1e
    5ffc:	8d 8f       	std	Y+29, r24	; 0x1d
    5ffe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6000:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6002:	01 97       	sbiw	r24, 0x01	; 1
    6004:	f1 f7       	brne	.-4      	; 0x6002 <HLCD_voidSendData+0x348>
    6006:	9e 8f       	std	Y+30, r25	; 0x1e
    6008:	8d 8f       	std	Y+29, r24	; 0x1d
		
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    600a:	84 e0       	ldi	r24, 0x04	; 4
    600c:	63 e0       	ldi	r22, 0x03	; 3
    600e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
    6012:	80 e0       	ldi	r24, 0x00	; 0
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	a0 e0       	ldi	r26, 0x00	; 0
    6018:	b0 e4       	ldi	r27, 0x40	; 64
    601a:	89 8f       	std	Y+25, r24	; 0x19
    601c:	9a 8f       	std	Y+26, r25	; 0x1a
    601e:	ab 8f       	std	Y+27, r26	; 0x1b
    6020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6022:	69 8d       	ldd	r22, Y+25	; 0x19
    6024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    602a:	20 e0       	ldi	r18, 0x00	; 0
    602c:	30 e0       	ldi	r19, 0x00	; 0
    602e:	4a ef       	ldi	r20, 0xFA	; 250
    6030:	54 e4       	ldi	r21, 0x44	; 68
    6032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6036:	dc 01       	movw	r26, r24
    6038:	cb 01       	movw	r24, r22
    603a:	8d 8b       	std	Y+21, r24	; 0x15
    603c:	9e 8b       	std	Y+22, r25	; 0x16
    603e:	af 8b       	std	Y+23, r26	; 0x17
    6040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6042:	6d 89       	ldd	r22, Y+21	; 0x15
    6044:	7e 89       	ldd	r23, Y+22	; 0x16
    6046:	8f 89       	ldd	r24, Y+23	; 0x17
    6048:	98 8d       	ldd	r25, Y+24	; 0x18
    604a:	20 e0       	ldi	r18, 0x00	; 0
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	40 e8       	ldi	r20, 0x80	; 128
    6050:	5f e3       	ldi	r21, 0x3F	; 63
    6052:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6056:	88 23       	and	r24, r24
    6058:	2c f4       	brge	.+10     	; 0x6064 <HLCD_voidSendData+0x3aa>
		__ticks = 1;
    605a:	81 e0       	ldi	r24, 0x01	; 1
    605c:	90 e0       	ldi	r25, 0x00	; 0
    605e:	9c 8b       	std	Y+20, r25	; 0x14
    6060:	8b 8b       	std	Y+19, r24	; 0x13
    6062:	3f c0       	rjmp	.+126    	; 0x60e2 <HLCD_voidSendData+0x428>
	else if (__tmp > 65535)
    6064:	6d 89       	ldd	r22, Y+21	; 0x15
    6066:	7e 89       	ldd	r23, Y+22	; 0x16
    6068:	8f 89       	ldd	r24, Y+23	; 0x17
    606a:	98 8d       	ldd	r25, Y+24	; 0x18
    606c:	20 e0       	ldi	r18, 0x00	; 0
    606e:	3f ef       	ldi	r19, 0xFF	; 255
    6070:	4f e7       	ldi	r20, 0x7F	; 127
    6072:	57 e4       	ldi	r21, 0x47	; 71
    6074:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6078:	18 16       	cp	r1, r24
    607a:	4c f5       	brge	.+82     	; 0x60ce <HLCD_voidSendData+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    607c:	69 8d       	ldd	r22, Y+25	; 0x19
    607e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6084:	20 e0       	ldi	r18, 0x00	; 0
    6086:	30 e0       	ldi	r19, 0x00	; 0
    6088:	40 e2       	ldi	r20, 0x20	; 32
    608a:	51 e4       	ldi	r21, 0x41	; 65
    608c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6090:	dc 01       	movw	r26, r24
    6092:	cb 01       	movw	r24, r22
    6094:	bc 01       	movw	r22, r24
    6096:	cd 01       	movw	r24, r26
    6098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    609c:	dc 01       	movw	r26, r24
    609e:	cb 01       	movw	r24, r22
    60a0:	9c 8b       	std	Y+20, r25	; 0x14
    60a2:	8b 8b       	std	Y+19, r24	; 0x13
    60a4:	0f c0       	rjmp	.+30     	; 0x60c4 <HLCD_voidSendData+0x40a>
    60a6:	88 ec       	ldi	r24, 0xC8	; 200
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	9a 8b       	std	Y+18, r25	; 0x12
    60ac:	89 8b       	std	Y+17, r24	; 0x11
    60ae:	89 89       	ldd	r24, Y+17	; 0x11
    60b0:	9a 89       	ldd	r25, Y+18	; 0x12
    60b2:	01 97       	sbiw	r24, 0x01	; 1
    60b4:	f1 f7       	brne	.-4      	; 0x60b2 <HLCD_voidSendData+0x3f8>
    60b6:	9a 8b       	std	Y+18, r25	; 0x12
    60b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60ba:	8b 89       	ldd	r24, Y+19	; 0x13
    60bc:	9c 89       	ldd	r25, Y+20	; 0x14
    60be:	01 97       	sbiw	r24, 0x01	; 1
    60c0:	9c 8b       	std	Y+20, r25	; 0x14
    60c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60c4:	8b 89       	ldd	r24, Y+19	; 0x13
    60c6:	9c 89       	ldd	r25, Y+20	; 0x14
    60c8:	00 97       	sbiw	r24, 0x00	; 0
    60ca:	69 f7       	brne	.-38     	; 0x60a6 <HLCD_voidSendData+0x3ec>
    60cc:	14 c0       	rjmp	.+40     	; 0x60f6 <HLCD_voidSendData+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60ce:	6d 89       	ldd	r22, Y+21	; 0x15
    60d0:	7e 89       	ldd	r23, Y+22	; 0x16
    60d2:	8f 89       	ldd	r24, Y+23	; 0x17
    60d4:	98 8d       	ldd	r25, Y+24	; 0x18
    60d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60da:	dc 01       	movw	r26, r24
    60dc:	cb 01       	movw	r24, r22
    60de:	9c 8b       	std	Y+20, r25	; 0x14
    60e0:	8b 8b       	std	Y+19, r24	; 0x13
    60e2:	8b 89       	ldd	r24, Y+19	; 0x13
    60e4:	9c 89       	ldd	r25, Y+20	; 0x14
    60e6:	98 8b       	std	Y+16, r25	; 0x10
    60e8:	8f 87       	std	Y+15, r24	; 0x0f
    60ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    60ec:	98 89       	ldd	r25, Y+16	; 0x10
    60ee:	01 97       	sbiw	r24, 0x01	; 1
    60f0:	f1 f7       	brne	.-4      	; 0x60ee <HLCD_voidSendData+0x434>
    60f2:	98 8b       	std	Y+16, r25	; 0x10
    60f4:	8f 87       	std	Y+15, r24	; 0x0f
    60f6:	80 e0       	ldi	r24, 0x00	; 0
    60f8:	90 e0       	ldi	r25, 0x00	; 0
    60fa:	a0 e8       	ldi	r26, 0x80	; 128
    60fc:	bf e3       	ldi	r27, 0x3F	; 63
    60fe:	8b 87       	std	Y+11, r24	; 0x0b
    6100:	9c 87       	std	Y+12, r25	; 0x0c
    6102:	ad 87       	std	Y+13, r26	; 0x0d
    6104:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6106:	6b 85       	ldd	r22, Y+11	; 0x0b
    6108:	7c 85       	ldd	r23, Y+12	; 0x0c
    610a:	8d 85       	ldd	r24, Y+13	; 0x0d
    610c:	9e 85       	ldd	r25, Y+14	; 0x0e
    610e:	20 e0       	ldi	r18, 0x00	; 0
    6110:	30 e0       	ldi	r19, 0x00	; 0
    6112:	4a ef       	ldi	r20, 0xFA	; 250
    6114:	54 e4       	ldi	r21, 0x44	; 68
    6116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    611a:	dc 01       	movw	r26, r24
    611c:	cb 01       	movw	r24, r22
    611e:	8f 83       	std	Y+7, r24	; 0x07
    6120:	98 87       	std	Y+8, r25	; 0x08
    6122:	a9 87       	std	Y+9, r26	; 0x09
    6124:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6126:	6f 81       	ldd	r22, Y+7	; 0x07
    6128:	78 85       	ldd	r23, Y+8	; 0x08
    612a:	89 85       	ldd	r24, Y+9	; 0x09
    612c:	9a 85       	ldd	r25, Y+10	; 0x0a
    612e:	20 e0       	ldi	r18, 0x00	; 0
    6130:	30 e0       	ldi	r19, 0x00	; 0
    6132:	40 e8       	ldi	r20, 0x80	; 128
    6134:	5f e3       	ldi	r21, 0x3F	; 63
    6136:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    613a:	88 23       	and	r24, r24
    613c:	2c f4       	brge	.+10     	; 0x6148 <HLCD_voidSendData+0x48e>
		__ticks = 1;
    613e:	81 e0       	ldi	r24, 0x01	; 1
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	9e 83       	std	Y+6, r25	; 0x06
    6144:	8d 83       	std	Y+5, r24	; 0x05
    6146:	3f c0       	rjmp	.+126    	; 0x61c6 <HLCD_voidSendData+0x50c>
	else if (__tmp > 65535)
    6148:	6f 81       	ldd	r22, Y+7	; 0x07
    614a:	78 85       	ldd	r23, Y+8	; 0x08
    614c:	89 85       	ldd	r24, Y+9	; 0x09
    614e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6150:	20 e0       	ldi	r18, 0x00	; 0
    6152:	3f ef       	ldi	r19, 0xFF	; 255
    6154:	4f e7       	ldi	r20, 0x7F	; 127
    6156:	57 e4       	ldi	r21, 0x47	; 71
    6158:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    615c:	18 16       	cp	r1, r24
    615e:	4c f5       	brge	.+82     	; 0x61b2 <HLCD_voidSendData+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6160:	6b 85       	ldd	r22, Y+11	; 0x0b
    6162:	7c 85       	ldd	r23, Y+12	; 0x0c
    6164:	8d 85       	ldd	r24, Y+13	; 0x0d
    6166:	9e 85       	ldd	r25, Y+14	; 0x0e
    6168:	20 e0       	ldi	r18, 0x00	; 0
    616a:	30 e0       	ldi	r19, 0x00	; 0
    616c:	40 e2       	ldi	r20, 0x20	; 32
    616e:	51 e4       	ldi	r21, 0x41	; 65
    6170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6174:	dc 01       	movw	r26, r24
    6176:	cb 01       	movw	r24, r22
    6178:	bc 01       	movw	r22, r24
    617a:	cd 01       	movw	r24, r26
    617c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6180:	dc 01       	movw	r26, r24
    6182:	cb 01       	movw	r24, r22
    6184:	9e 83       	std	Y+6, r25	; 0x06
    6186:	8d 83       	std	Y+5, r24	; 0x05
    6188:	0f c0       	rjmp	.+30     	; 0x61a8 <HLCD_voidSendData+0x4ee>
    618a:	88 ec       	ldi	r24, 0xC8	; 200
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	9c 83       	std	Y+4, r25	; 0x04
    6190:	8b 83       	std	Y+3, r24	; 0x03
    6192:	8b 81       	ldd	r24, Y+3	; 0x03
    6194:	9c 81       	ldd	r25, Y+4	; 0x04
    6196:	01 97       	sbiw	r24, 0x01	; 1
    6198:	f1 f7       	brne	.-4      	; 0x6196 <HLCD_voidSendData+0x4dc>
    619a:	9c 83       	std	Y+4, r25	; 0x04
    619c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    619e:	8d 81       	ldd	r24, Y+5	; 0x05
    61a0:	9e 81       	ldd	r25, Y+6	; 0x06
    61a2:	01 97       	sbiw	r24, 0x01	; 1
    61a4:	9e 83       	std	Y+6, r25	; 0x06
    61a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61a8:	8d 81       	ldd	r24, Y+5	; 0x05
    61aa:	9e 81       	ldd	r25, Y+6	; 0x06
    61ac:	00 97       	sbiw	r24, 0x00	; 0
    61ae:	69 f7       	brne	.-38     	; 0x618a <HLCD_voidSendData+0x4d0>
    61b0:	14 c0       	rjmp	.+40     	; 0x61da <HLCD_voidSendData+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61b2:	6f 81       	ldd	r22, Y+7	; 0x07
    61b4:	78 85       	ldd	r23, Y+8	; 0x08
    61b6:	89 85       	ldd	r24, Y+9	; 0x09
    61b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    61ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61be:	dc 01       	movw	r26, r24
    61c0:	cb 01       	movw	r24, r22
    61c2:	9e 83       	std	Y+6, r25	; 0x06
    61c4:	8d 83       	std	Y+5, r24	; 0x05
    61c6:	8d 81       	ldd	r24, Y+5	; 0x05
    61c8:	9e 81       	ldd	r25, Y+6	; 0x06
    61ca:	9a 83       	std	Y+2, r25	; 0x02
    61cc:	89 83       	std	Y+1, r24	; 0x01
    61ce:	89 81       	ldd	r24, Y+1	; 0x01
    61d0:	9a 81       	ldd	r25, Y+2	; 0x02
    61d2:	01 97       	sbiw	r24, 0x01	; 1
    61d4:	f1 f7       	brne	.-4      	; 0x61d2 <HLCD_voidSendData+0x518>
    61d6:	9a 83       	std	Y+2, r25	; 0x02
    61d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (2) ;
	#else 
		 #error "select write mode"
	#endif
	_delay_ms(1) ;
}
    61da:	c9 5b       	subi	r28, 0xB9	; 185
    61dc:	df 4f       	sbci	r29, 0xFF	; 255
    61de:	0f b6       	in	r0, 0x3f	; 63
    61e0:	f8 94       	cli
    61e2:	de bf       	out	0x3e, r29	; 62
    61e4:	0f be       	out	0x3f, r0	; 63
    61e6:	cd bf       	out	0x3d, r28	; 61
    61e8:	cf 91       	pop	r28
    61ea:	df 91       	pop	r29
    61ec:	1f 91       	pop	r17
    61ee:	0f 91       	pop	r16
    61f0:	08 95       	ret

000061f2 <HLCD_voidDispStr>:

void HLCD_voidDispStr(u8* A_Pu8String)
{
    61f2:	df 93       	push	r29
    61f4:	cf 93       	push	r28
    61f6:	00 d0       	rcall	.+0      	; 0x61f8 <HLCD_voidDispStr+0x6>
    61f8:	0f 92       	push	r0
    61fa:	cd b7       	in	r28, 0x3d	; 61
    61fc:	de b7       	in	r29, 0x3e	; 62
    61fe:	9b 83       	std	Y+3, r25	; 0x03
    6200:	8a 83       	std	Y+2, r24	; 0x02
	/**Local loop index */
	u8 L_u8Index = 0 ;
    6202:	19 82       	std	Y+1, r1	; 0x01
    6204:	0e c0       	rjmp	.+28     	; 0x6222 <HLCD_voidDispStr+0x30>
	while (A_Pu8String [L_u8Index] != '\0')
	{
		/* Write Character on LCD */
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
    6206:	89 81       	ldd	r24, Y+1	; 0x01
    6208:	28 2f       	mov	r18, r24
    620a:	30 e0       	ldi	r19, 0x00	; 0
    620c:	8a 81       	ldd	r24, Y+2	; 0x02
    620e:	9b 81       	ldd	r25, Y+3	; 0x03
    6210:	fc 01       	movw	r30, r24
    6212:	e2 0f       	add	r30, r18
    6214:	f3 1f       	adc	r31, r19
    6216:	80 81       	ld	r24, Z
    6218:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <HLCD_voidSendData>
		
		/* Increment local loop index */
		L_u8Index ++ ;
    621c:	89 81       	ldd	r24, Y+1	; 0x01
    621e:	8f 5f       	subi	r24, 0xFF	; 255
    6220:	89 83       	std	Y+1, r24	; 0x01

void HLCD_voidDispStr(u8* A_Pu8String)
{
	/**Local loop index */
	u8 L_u8Index = 0 ;
	while (A_Pu8String [L_u8Index] != '\0')
    6222:	89 81       	ldd	r24, Y+1	; 0x01
    6224:	28 2f       	mov	r18, r24
    6226:	30 e0       	ldi	r19, 0x00	; 0
    6228:	8a 81       	ldd	r24, Y+2	; 0x02
    622a:	9b 81       	ldd	r25, Y+3	; 0x03
    622c:	fc 01       	movw	r30, r24
    622e:	e2 0f       	add	r30, r18
    6230:	f3 1f       	adc	r31, r19
    6232:	80 81       	ld	r24, Z
    6234:	88 23       	and	r24, r24
    6236:	39 f7       	brne	.-50     	; 0x6206 <HLCD_voidDispStr+0x14>
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
		
		/* Increment local loop index */
		L_u8Index ++ ;
	}
}
    6238:	0f 90       	pop	r0
    623a:	0f 90       	pop	r0
    623c:	0f 90       	pop	r0
    623e:	cf 91       	pop	r28
    6240:	df 91       	pop	r29
    6242:	08 95       	ret

00006244 <HLCD_voidDispIntNum>:

void HLCD_voidDispIntNum(u32 A_u32Number)
{
    6244:	df 93       	push	r29
    6246:	cf 93       	push	r28
    6248:	cd b7       	in	r28, 0x3d	; 61
    624a:	de b7       	in	r29, 0x3e	; 62
    624c:	a4 97       	sbiw	r28, 0x24	; 36
    624e:	0f b6       	in	r0, 0x3f	; 63
    6250:	f8 94       	cli
    6252:	de bf       	out	0x3e, r29	; 62
    6254:	0f be       	out	0x3f, r0	; 63
    6256:	cd bf       	out	0x3d, r28	; 61
    6258:	69 a3       	std	Y+33, r22	; 0x21
    625a:	7a a3       	std	Y+34, r23	; 0x22
    625c:	8b a3       	std	Y+35, r24	; 0x23
    625e:	9c a3       	std	Y+36, r25	; 0x24
	if (A_u32Number < MIN_INT_NUM && A_u32Number > MAX_INT_NUM)
    6260:	89 a1       	ldd	r24, Y+33	; 0x21
    6262:	9a a1       	ldd	r25, Y+34	; 0x22
    6264:	ab a1       	ldd	r26, Y+35	; 0x23
    6266:	bc a1       	ldd	r27, Y+36	; 0x24
    6268:	81 30       	cpi	r24, 0x01	; 1
    626a:	26 e3       	ldi	r18, 0x36	; 54
    626c:	92 07       	cpc	r25, r18
    626e:	25 e6       	ldi	r18, 0x65	; 101
    6270:	a2 07       	cpc	r26, r18
    6272:	24 ec       	ldi	r18, 0xC4	; 196
    6274:	b2 07       	cpc	r27, r18
    6276:	98 f4       	brcc	.+38     	; 0x629e <HLCD_voidDispIntNum+0x5a>
    6278:	89 a1       	ldd	r24, Y+33	; 0x21
    627a:	9a a1       	ldd	r25, Y+34	; 0x22
    627c:	ab a1       	ldd	r26, Y+35	; 0x23
    627e:	bc a1       	ldd	r27, Y+36	; 0x24
    6280:	80 30       	cpi	r24, 0x00	; 0
    6282:	2a ec       	ldi	r18, 0xCA	; 202
    6284:	92 07       	cpc	r25, r18
    6286:	2a e9       	ldi	r18, 0x9A	; 154
    6288:	a2 07       	cpc	r26, r18
    628a:	2b e3       	ldi	r18, 0x3B	; 59
    628c:	b2 07       	cpc	r27, r18
    628e:	38 f0       	brcs	.+14     	; 0x629e <HLCD_voidDispIntNum+0x5a>
	{
		/**
		 * if the integer is more than MAX_INT_NUM or less than MIN_INT_NUM
		          **** "Overflow !!!!" will be displayed
		 */
		HLCD_voidClrScreen () ;
    6290:	0e 94 1a 32 	call	0x6434	; 0x6434 <HLCD_voidClrScreen>
		HLCD_voidDispStr ("Overflow !!!!") ;
    6294:	80 e6       	ldi	r24, 0x60	; 96
    6296:	90 e0       	ldi	r25, 0x00	; 0
    6298:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <HLCD_voidDispStr>
    629c:	1a c0       	rjmp	.+52     	; 0x62d2 <HLCD_voidDispIntNum+0x8e>
	}
	else
	{
		/**array to stored conversion character*/
	    s8* L_Ps8String [16] = {0} ;
    629e:	80 e2       	ldi	r24, 0x20	; 32
    62a0:	fe 01       	movw	r30, r28
    62a2:	31 96       	adiw	r30, 0x01	; 1
    62a4:	df 01       	movw	r26, r30
    62a6:	28 2f       	mov	r18, r24
    62a8:	1d 92       	st	X+, r1
    62aa:	2a 95       	dec	r18
    62ac:	e9 f7       	brne	.-6      	; 0x62a8 <HLCD_voidDispIntNum+0x64>

		/** convert integer to string*/
	    ltoa (A_u32Number , (s8*)L_Ps8String , BASE) ;
    62ae:	89 a1       	ldd	r24, Y+33	; 0x21
    62b0:	9a a1       	ldd	r25, Y+34	; 0x22
    62b2:	ab a1       	ldd	r26, Y+35	; 0x23
    62b4:	bc a1       	ldd	r27, Y+36	; 0x24
    62b6:	9e 01       	movw	r18, r28
    62b8:	2f 5f       	subi	r18, 0xFF	; 255
    62ba:	3f 4f       	sbci	r19, 0xFF	; 255
    62bc:	bc 01       	movw	r22, r24
    62be:	cd 01       	movw	r24, r26
    62c0:	a9 01       	movw	r20, r18
    62c2:	2a e0       	ldi	r18, 0x0A	; 10
    62c4:	30 e0       	ldi	r19, 0x00	; 0
    62c6:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <ltoa>

		/**display number after convesion*/
	    HLCD_voidDispStr ((u8*)L_Ps8String) ;
    62ca:	ce 01       	movw	r24, r28
    62cc:	01 96       	adiw	r24, 0x01	; 1
    62ce:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <HLCD_voidDispStr>
	}
}
    62d2:	a4 96       	adiw	r28, 0x24	; 36
    62d4:	0f b6       	in	r0, 0x3f	; 63
    62d6:	f8 94       	cli
    62d8:	de bf       	out	0x3e, r29	; 62
    62da:	0f be       	out	0x3f, r0	; 63
    62dc:	cd bf       	out	0x3d, r28	; 61
    62de:	cf 91       	pop	r28
    62e0:	df 91       	pop	r29
    62e2:	08 95       	ret

000062e4 <HLCD_voidDispFloatNum>:

void HLCD_voidDispFloatNum(f32 A_f32Number , u8 A_u8AfterDigit)
{
    62e4:	ef 92       	push	r14
    62e6:	ff 92       	push	r15
    62e8:	0f 93       	push	r16
    62ea:	1f 93       	push	r17
    62ec:	df 93       	push	r29
    62ee:	cf 93       	push	r28
    62f0:	cd b7       	in	r28, 0x3d	; 61
    62f2:	de b7       	in	r29, 0x3e	; 62
    62f4:	28 97       	sbiw	r28, 0x08	; 8
    62f6:	0f b6       	in	r0, 0x3f	; 63
    62f8:	f8 94       	cli
    62fa:	de bf       	out	0x3e, r29	; 62
    62fc:	0f be       	out	0x3f, r0	; 63
    62fe:	cd bf       	out	0x3d, r28	; 61
    6300:	6c 83       	std	Y+4, r22	; 0x04
    6302:	7d 83       	std	Y+5, r23	; 0x05
    6304:	8e 83       	std	Y+6, r24	; 0x06
    6306:	9f 83       	std	Y+7, r25	; 0x07
    6308:	48 87       	std	Y+8, r20	; 0x08
	u16 L_u16AfterDigit = 1 ;
    630a:	81 e0       	ldi	r24, 0x01	; 1
    630c:	90 e0       	ldi	r25, 0x00	; 0
    630e:	9b 83       	std	Y+3, r25	; 0x03
    6310:	8a 83       	std	Y+2, r24	; 0x02
	u8  L_u8Iterator = 0 ;
    6312:	19 82       	std	Y+1, r1	; 0x01
	/** display integer part */
    HLCD_voidDispIntNum ((u32)A_f32Number) ;
    6314:	6c 81       	ldd	r22, Y+4	; 0x04
    6316:	7d 81       	ldd	r23, Y+5	; 0x05
    6318:	8e 81       	ldd	r24, Y+6	; 0x06
    631a:	9f 81       	ldd	r25, Y+7	; 0x07
    631c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6320:	dc 01       	movw	r26, r24
    6322:	cb 01       	movw	r24, r22
    6324:	bc 01       	movw	r22, r24
    6326:	cd 01       	movw	r24, r26
    6328:	0e 94 22 31 	call	0x6244	; 0x6244 <HLCD_voidDispIntNum>

	/** display dot */
	HLCD_voidSendData   (',') ;
    632c:	8c e2       	ldi	r24, 0x2C	; 44
    632e:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <HLCD_voidSendData>

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
    6332:	19 82       	std	Y+1, r1	; 0x01
    6334:	11 c0       	rjmp	.+34     	; 0x6358 <HLCD_voidDispFloatNum+0x74>
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
    6336:	8a 81       	ldd	r24, Y+2	; 0x02
    6338:	9b 81       	ldd	r25, Y+3	; 0x03
    633a:	9c 01       	movw	r18, r24
    633c:	22 0f       	add	r18, r18
    633e:	33 1f       	adc	r19, r19
    6340:	c9 01       	movw	r24, r18
    6342:	88 0f       	add	r24, r24
    6344:	99 1f       	adc	r25, r25
    6346:	88 0f       	add	r24, r24
    6348:	99 1f       	adc	r25, r25
    634a:	82 0f       	add	r24, r18
    634c:	93 1f       	adc	r25, r19
    634e:	9b 83       	std	Y+3, r25	; 0x03
    6350:	8a 83       	std	Y+2, r24	; 0x02
    HLCD_voidDispIntNum ((u32)A_f32Number) ;

	/** display dot */
	HLCD_voidSendData   (',') ;

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
    6352:	89 81       	ldd	r24, Y+1	; 0x01
    6354:	8f 5f       	subi	r24, 0xFF	; 255
    6356:	89 83       	std	Y+1, r24	; 0x01
    6358:	99 81       	ldd	r25, Y+1	; 0x01
    635a:	88 85       	ldd	r24, Y+8	; 0x08
    635c:	98 17       	cp	r25, r24
    635e:	58 f3       	brcs	.-42     	; 0x6336 <HLCD_voidDispFloatNum+0x52>
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
	}

	/** display fraction part */
	HLCD_voidDispIntNum ((A_f32Number - (u32) A_f32Number) * L_u16AfterDigit) ;
    6360:	6c 81       	ldd	r22, Y+4	; 0x04
    6362:	7d 81       	ldd	r23, Y+5	; 0x05
    6364:	8e 81       	ldd	r24, Y+6	; 0x06
    6366:	9f 81       	ldd	r25, Y+7	; 0x07
    6368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    636c:	dc 01       	movw	r26, r24
    636e:	cb 01       	movw	r24, r22
    6370:	bc 01       	movw	r22, r24
    6372:	cd 01       	movw	r24, r26
    6374:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    6378:	9b 01       	movw	r18, r22
    637a:	ac 01       	movw	r20, r24
    637c:	6c 81       	ldd	r22, Y+4	; 0x04
    637e:	7d 81       	ldd	r23, Y+5	; 0x05
    6380:	8e 81       	ldd	r24, Y+6	; 0x06
    6382:	9f 81       	ldd	r25, Y+7	; 0x07
    6384:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    6388:	dc 01       	movw	r26, r24
    638a:	cb 01       	movw	r24, r22
    638c:	7c 01       	movw	r14, r24
    638e:	8d 01       	movw	r16, r26
    6390:	8a 81       	ldd	r24, Y+2	; 0x02
    6392:	9b 81       	ldd	r25, Y+3	; 0x03
    6394:	cc 01       	movw	r24, r24
    6396:	a0 e0       	ldi	r26, 0x00	; 0
    6398:	b0 e0       	ldi	r27, 0x00	; 0
    639a:	bc 01       	movw	r22, r24
    639c:	cd 01       	movw	r24, r26
    639e:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    63a2:	9b 01       	movw	r18, r22
    63a4:	ac 01       	movw	r20, r24
    63a6:	c8 01       	movw	r24, r16
    63a8:	b7 01       	movw	r22, r14
    63aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63ae:	dc 01       	movw	r26, r24
    63b0:	cb 01       	movw	r24, r22
    63b2:	bc 01       	movw	r22, r24
    63b4:	cd 01       	movw	r24, r26
    63b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63ba:	dc 01       	movw	r26, r24
    63bc:	cb 01       	movw	r24, r22
    63be:	bc 01       	movw	r22, r24
    63c0:	cd 01       	movw	r24, r26
    63c2:	0e 94 22 31 	call	0x6244	; 0x6244 <HLCD_voidDispIntNum>
}
    63c6:	28 96       	adiw	r28, 0x08	; 8
    63c8:	0f b6       	in	r0, 0x3f	; 63
    63ca:	f8 94       	cli
    63cc:	de bf       	out	0x3e, r29	; 62
    63ce:	0f be       	out	0x3f, r0	; 63
    63d0:	cd bf       	out	0x3d, r28	; 61
    63d2:	cf 91       	pop	r28
    63d4:	df 91       	pop	r29
    63d6:	1f 91       	pop	r17
    63d8:	0f 91       	pop	r16
    63da:	ff 90       	pop	r15
    63dc:	ef 90       	pop	r14
    63de:	08 95       	ret

000063e0 <HLCD_voidMovCursor>:

void HLCD_voidMovCursor(u8 A_u8RowId, u8 A_u8ColId)
{
    63e0:	df 93       	push	r29
    63e2:	cf 93       	push	r28
    63e4:	00 d0       	rcall	.+0      	; 0x63e6 <HLCD_voidMovCursor+0x6>
    63e6:	0f 92       	push	r0
    63e8:	cd b7       	in	r28, 0x3d	; 61
    63ea:	de b7       	in	r29, 0x3e	; 62
    63ec:	8a 83       	std	Y+2, r24	; 0x02
    63ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DDRAMAddress ;
	
	/**if the row and col are out of range 
	         *** Do nothing
	  */
	if (A_u8RowId >= MIN_NUM_OF_ROW && A_u8RowId <= MAX_NUM_OF_ROW &&
    63f0:	8a 81       	ldd	r24, Y+2	; 0x02
    63f2:	88 23       	and	r24, r24
    63f4:	c9 f0       	breq	.+50     	; 0x6428 <HLCD_voidMovCursor+0x48>
    63f6:	8a 81       	ldd	r24, Y+2	; 0x02
    63f8:	83 30       	cpi	r24, 0x03	; 3
    63fa:	b0 f4       	brcc	.+44     	; 0x6428 <HLCD_voidMovCursor+0x48>
    63fc:	8b 81       	ldd	r24, Y+3	; 0x03
    63fe:	88 23       	and	r24, r24
    6400:	99 f0       	breq	.+38     	; 0x6428 <HLCD_voidMovCursor+0x48>
    6402:	8b 81       	ldd	r24, Y+3	; 0x03
    6404:	81 31       	cpi	r24, 0x11	; 17
    6406:	80 f4       	brcc	.+32     	; 0x6428 <HLCD_voidMovCursor+0x48>
	A_u8ColId >= MIN_NUM_OF_COL && A_u8ColId <= MAX_NUM_OF_COL)
	{
		/**for first row*/
		if (A_u8RowId == LCD_ROW1)
    6408:	8a 81       	ldd	r24, Y+2	; 0x02
    640a:	81 30       	cpi	r24, 0x01	; 1
    640c:	21 f4       	brne	.+8      	; 0x6416 <HLCD_voidMovCursor+0x36>
		{
			L_u8DDRAMAddress = FIRST_ROW_ADDRESS + A_u8ColId - 1 ;
    640e:	8b 81       	ldd	r24, Y+3	; 0x03
    6410:	81 58       	subi	r24, 0x81	; 129
    6412:	89 83       	std	Y+1, r24	; 0x01
    6414:	06 c0       	rjmp	.+12     	; 0x6422 <HLCD_voidMovCursor+0x42>
		}
		
		/**for second row*/
		else if (A_u8RowId == LCD_ROW2)
    6416:	8a 81       	ldd	r24, Y+2	; 0x02
    6418:	82 30       	cpi	r24, 0x02	; 2
    641a:	19 f4       	brne	.+6      	; 0x6422 <HLCD_voidMovCursor+0x42>
		{
			L_u8DDRAMAddress = SECOND_ROW_ADDRESS + A_u8ColId - 1 ;
    641c:	8b 81       	ldd	r24, Y+3	; 0x03
    641e:	81 54       	subi	r24, 0x41	; 65
    6420:	89 83       	std	Y+1, r24	; 0x01
		}
		
		/**set DDRAM address*/
		HLCD_voidSendCmd (L_u8DDRAMAddress) ;
    6422:	89 81       	ldd	r24, Y+1	; 0x01
    6424:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
	}
	else
	{
		/** DO Nothing */
	}
}
    6428:	0f 90       	pop	r0
    642a:	0f 90       	pop	r0
    642c:	0f 90       	pop	r0
    642e:	cf 91       	pop	r28
    6430:	df 91       	pop	r29
    6432:	08 95       	ret

00006434 <HLCD_voidClrScreen>:

void HLCD_voidClrScreen (void)
{
    6434:	df 93       	push	r29
    6436:	cf 93       	push	r28
    6438:	cd b7       	in	r28, 0x3d	; 61
    643a:	de b7       	in	r29, 0x3e	; 62
	/**clear data and move cursor to first position*/
	HLCD_voidSendCmd (CMD_CLEAR) ;
    643c:	81 e0       	ldi	r24, 0x01	; 1
    643e:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
}
    6442:	cf 91       	pop	r28
    6444:	df 91       	pop	r29
    6446:	08 95       	ret

00006448 <HLCD_voidShiftDisplayRight>:

void HLCD_voidShiftDisplayRight(void)
{
    6448:	df 93       	push	r29
    644a:	cf 93       	push	r28
    644c:	cd b7       	in	r28, 0x3d	; 61
    644e:	de b7       	in	r29, 0x3e	; 62
	/**shift display to right*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_RIGHT) ;
    6450:	8c e1       	ldi	r24, 0x1C	; 28
    6452:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
}
    6456:	cf 91       	pop	r28
    6458:	df 91       	pop	r29
    645a:	08 95       	ret

0000645c <HLCD_voidShiftDisplayLeft>:

void HLCD_voidShiftDisplayLeft(void)
{
    645c:	df 93       	push	r29
    645e:	cf 93       	push	r28
    6460:	cd b7       	in	r28, 0x3d	; 61
    6462:	de b7       	in	r29, 0x3e	; 62
	/**shift display to left*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_LEFT) ;
    6464:	88 e1       	ldi	r24, 0x18	; 24
    6466:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
}
    646a:	cf 91       	pop	r28
    646c:	df 91       	pop	r29
    646e:	08 95       	ret

00006470 <HLCD_voidDispSpecialChar>:

void HLCD_voidDispSpecialChar(u8 * A_u8Array, u8 A_u8Block, u8 A_u8RowId, u8 A_u8ColId)
{
    6470:	df 93       	push	r29
    6472:	cf 93       	push	r28
    6474:	00 d0       	rcall	.+0      	; 0x6476 <HLCD_voidDispSpecialChar+0x6>
    6476:	00 d0       	rcall	.+0      	; 0x6478 <HLCD_voidDispSpecialChar+0x8>
    6478:	00 d0       	rcall	.+0      	; 0x647a <HLCD_voidDispSpecialChar+0xa>
    647a:	cd b7       	in	r28, 0x3d	; 61
    647c:	de b7       	in	r29, 0x3e	; 62
    647e:	9b 83       	std	Y+3, r25	; 0x03
    6480:	8a 83       	std	Y+2, r24	; 0x02
    6482:	6c 83       	std	Y+4, r22	; 0x04
    6484:	4d 83       	std	Y+5, r20	; 0x05
    6486:	2e 83       	std	Y+6, r18	; 0x06
	/**iterator for for loop*/
	u8 L_u8Iterator ;
	
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
    6488:	8c 81       	ldd	r24, Y+4	; 0x04
    648a:	88 2f       	mov	r24, r24
    648c:	90 e0       	ldi	r25, 0x00	; 0
    648e:	08 96       	adiw	r24, 0x08	; 8
    6490:	88 0f       	add	r24, r24
    6492:	99 1f       	adc	r25, r25
    6494:	88 0f       	add	r24, r24
    6496:	99 1f       	adc	r25, r25
    6498:	88 0f       	add	r24, r24
    649a:	99 1f       	adc	r25, r25
    649c:	0e 94 76 28 	call	0x50ec	; 0x50ec <HLCD_voidSendCmd>
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
    64a0:	19 82       	std	Y+1, r1	; 0x01
    64a2:	0e c0       	rjmp	.+28     	; 0x64c0 <HLCD_voidDispSpecialChar+0x50>
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
    64a4:	89 81       	ldd	r24, Y+1	; 0x01
    64a6:	28 2f       	mov	r18, r24
    64a8:	30 e0       	ldi	r19, 0x00	; 0
    64aa:	8a 81       	ldd	r24, Y+2	; 0x02
    64ac:	9b 81       	ldd	r25, Y+3	; 0x03
    64ae:	fc 01       	movw	r30, r24
    64b0:	e2 0f       	add	r30, r18
    64b2:	f3 1f       	adc	r31, r19
    64b4:	80 81       	ld	r24, Z
    64b6:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <HLCD_voidSendData>
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
    64ba:	89 81       	ldd	r24, Y+1	; 0x01
    64bc:	8f 5f       	subi	r24, 0xFF	; 255
    64be:	89 83       	std	Y+1, r24	; 0x01
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
    64c0:	89 81       	ldd	r24, Y+1	; 0x01
    64c2:	88 30       	cpi	r24, 0x08	; 8
    64c4:	78 f3       	brcs	.-34     	; 0x64a4 <HLCD_voidDispSpecialChar+0x34>
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
		 }
    
	/* Move the cursor to required position */
	HLCD_voidMovCursor (A_u8RowId , A_u8ColId) ;
    64c6:	8d 81       	ldd	r24, Y+5	; 0x05
    64c8:	6e 81       	ldd	r22, Y+6	; 0x06
    64ca:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <HLCD_voidMovCursor>
	
	/* Set the block to be displayed */
	HLCD_voidSendData (A_u8Block) ;
    64ce:	8c 81       	ldd	r24, Y+4	; 0x04
    64d0:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <HLCD_voidSendData>
}
    64d4:	26 96       	adiw	r28, 0x06	; 6
    64d6:	0f b6       	in	r0, 0x3f	; 63
    64d8:	f8 94       	cli
    64da:	de bf       	out	0x3e, r29	; 62
    64dc:	0f be       	out	0x3f, r0	; 63
    64de:	cd bf       	out	0x3d, r28	; 61
    64e0:	cf 91       	pop	r28
    64e2:	df 91       	pop	r29
    64e4:	08 95       	ret

000064e6 <HKP_voidKpInt>:
#include "KP_int.h"
#define F_CPU 8000000UL
#include <util/delay.h>

void HKP_voidKpInt (void) 
{
    64e6:	df 93       	push	r29
    64e8:	cf 93       	push	r28
    64ea:	cd b7       	in	r28, 0x3d	; 61
    64ec:	de b7       	in	r29, 0x3e	; 62
	/* Set Columns as Output & High */
	#if   COL_START == DIO_PIN0 && ROW_START == DIO_PIN4
	      /** first four pins of port are output
	          second four pins of port are input */   
	      MDIO_voidSetPortDir (KP_PORT , LOW_NIBBLE_OUTPUT) ;
    64ee:	81 e0       	ldi	r24, 0x01	; 1
    64f0:	6f e0       	ldi	r22, 0x0F	; 15
    64f2:	0e 94 20 1c 	call	0x3840	; 0x3840 <MDIO_voidSetPortDir>
	
	/** Set Rows as Inputs & Pulled up */
	#if   ROW_START == DIO_PIN4 && COL_START == DIO_PIN0
	      /** first four pins of port are output
	          second four pins of port are input */
	      MDIO_voidSetPortDir (KP_PORT , LOW_NIBBLE_OUTPUT) ;
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	6f e0       	ldi	r22, 0x0F	; 15
    64fa:	0e 94 20 1c 	call	0x3840	; 0x3840 <MDIO_voidSetPortDir>
		  
		  /** first four pins of port are high
	          and  active internal pullup for second four pins of port */
	      MDIO_voidSetPortVal (KP_PORT , ALL_PINS_ONE) ;
    64fe:	81 e0       	ldi	r24, 0x01	; 1
    6500:	6f ef       	ldi	r22, 0xFF	; 255
    6502:	0e 94 de 1b 	call	0x37bc	; 0x37bc <MDIO_voidSetPortVal>
		      and first four pins of port are high */
	      MDIO_voidSetPortVal (KP_PORT , ALL_PINS_ONE) ;
	#else
		#error "Select right connections of Column start and Row start"
	#endif
}
    6506:	cf 91       	pop	r28
    6508:	df 91       	pop	r29
    650a:	08 95       	ret

0000650c <HKP_u8GetPressedKey>:

u8 HKP_u8GetPressedKey (void)
{
    650c:	df 93       	push	r29
    650e:	cf 93       	push	r28
    6510:	cd b7       	in	r28, 0x3d	; 61
    6512:	de b7       	in	r29, 0x3e	; 62
    6514:	62 97       	sbiw	r28, 0x12	; 18
    6516:	0f b6       	in	r0, 0x3f	; 63
    6518:	f8 94       	cli
    651a:	de bf       	out	0x3e, r29	; 62
    651c:	0f be       	out	0x3f, r0	; 63
    651e:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8Column ;
	u8 L_u8Row    ;
    u8 L_u8PinVal ;
    u8 L_u8PressedKey = NOT_PRESSED;
    6520:	8f ef       	ldi	r24, 0xFF	; 255
    6522:	8f 87       	std	Y+15, r24	; 0x0f
	
	/**external loop to active current column that be checked */
	for (L_u8Column = COL_START ; L_u8Column <= COL_END ; L_u8Column ++)
    6524:	1a 8a       	std	Y+18, r1	; 0x12
    6526:	ab c0       	rjmp	.+342    	; 0x667e <HKP_u8GetPressedKey+0x172>
	{
		/**active current column by make it output low */
		MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;
    6528:	81 e0       	ldi	r24, 0x01	; 1
    652a:	6a 89       	ldd	r22, Y+18	; 0x12
    652c:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
		
		/**internal loop to loop to each row 
		   and check pressed key that common current row and current column */
		for (L_u8Row = ROW_START ; L_u8Row <= ROW_END ; L_u8Row ++)
    6530:	84 e0       	ldi	r24, 0x04	; 4
    6532:	89 8b       	std	Y+17, r24	; 0x11
    6534:	99 c0       	rjmp	.+306    	; 0x6668 <HKP_u8GetPressedKey+0x15c>
		{
			
			/** read value of key that common current row and current column */
			L_u8PinVal = MDIO_u8GetPinVal (KP_PORT , L_u8Row) ;
    6536:	81 e0       	ldi	r24, 0x01	; 1
    6538:	69 89       	ldd	r22, Y+17	; 0x11
    653a:	0e 94 33 1b 	call	0x3666	; 0x3666 <MDIO_u8GetPinVal>
    653e:	88 8b       	std	Y+16, r24	; 0x10
			
			/** if key is pressed ====> (MDIO_u8GetPinVal == 0) */
			if (L_u8PinVal == PRESSED)
    6540:	88 89       	ldd	r24, Y+16	; 0x10
    6542:	88 23       	and	r24, r24
    6544:	09 f0       	breq	.+2      	; 0x6548 <HKP_u8GetPressedKey+0x3c>
    6546:	8d c0       	rjmp	.+282    	; 0x6662 <HKP_u8GetPressedKey+0x156>
			{
				/**get the value of the pressed key*/
				L_u8PressedKey = G_u8SwitchVal [L_u8Column - COL_START][L_u8Row - ROW_START] ;
    6548:	8a 89       	ldd	r24, Y+18	; 0x12
    654a:	48 2f       	mov	r20, r24
    654c:	50 e0       	ldi	r21, 0x00	; 0
    654e:	89 89       	ldd	r24, Y+17	; 0x11
    6550:	88 2f       	mov	r24, r24
    6552:	90 e0       	ldi	r25, 0x00	; 0
    6554:	9c 01       	movw	r18, r24
    6556:	24 50       	subi	r18, 0x04	; 4
    6558:	30 40       	sbci	r19, 0x00	; 0
    655a:	ca 01       	movw	r24, r20
    655c:	88 0f       	add	r24, r24
    655e:	99 1f       	adc	r25, r25
    6560:	88 0f       	add	r24, r24
    6562:	99 1f       	adc	r25, r25
    6564:	82 0f       	add	r24, r18
    6566:	93 1f       	adc	r25, r19
    6568:	fc 01       	movw	r30, r24
    656a:	ec 57       	subi	r30, 0x7C	; 124
    656c:	fe 4f       	sbci	r31, 0xFE	; 254
    656e:	80 81       	ld	r24, Z
    6570:	8f 87       	std	Y+15, r24	; 0x0f
				
				/**wait untill leave the button */
				while (MDIO_u8GetPinVal (KP_PORT , L_u8Row) == PRESSED) ;
    6572:	81 e0       	ldi	r24, 0x01	; 1
    6574:	69 89       	ldd	r22, Y+17	; 0x11
    6576:	0e 94 33 1b 	call	0x3666	; 0x3666 <MDIO_u8GetPinVal>
    657a:	88 23       	and	r24, r24
    657c:	d1 f3       	breq	.-12     	; 0x6572 <HKP_u8GetPressedKey+0x66>
    657e:	80 e0       	ldi	r24, 0x00	; 0
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	a0 ea       	ldi	r26, 0xA0	; 160
    6584:	b1 e4       	ldi	r27, 0x41	; 65
    6586:	8b 87       	std	Y+11, r24	; 0x0b
    6588:	9c 87       	std	Y+12, r25	; 0x0c
    658a:	ad 87       	std	Y+13, r26	; 0x0d
    658c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    658e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6590:	7c 85       	ldd	r23, Y+12	; 0x0c
    6592:	8d 85       	ldd	r24, Y+13	; 0x0d
    6594:	9e 85       	ldd	r25, Y+14	; 0x0e
    6596:	20 e0       	ldi	r18, 0x00	; 0
    6598:	30 e0       	ldi	r19, 0x00	; 0
    659a:	4a ef       	ldi	r20, 0xFA	; 250
    659c:	54 e4       	ldi	r21, 0x44	; 68
    659e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65a2:	dc 01       	movw	r26, r24
    65a4:	cb 01       	movw	r24, r22
    65a6:	8f 83       	std	Y+7, r24	; 0x07
    65a8:	98 87       	std	Y+8, r25	; 0x08
    65aa:	a9 87       	std	Y+9, r26	; 0x09
    65ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    65ae:	6f 81       	ldd	r22, Y+7	; 0x07
    65b0:	78 85       	ldd	r23, Y+8	; 0x08
    65b2:	89 85       	ldd	r24, Y+9	; 0x09
    65b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    65b6:	20 e0       	ldi	r18, 0x00	; 0
    65b8:	30 e0       	ldi	r19, 0x00	; 0
    65ba:	40 e8       	ldi	r20, 0x80	; 128
    65bc:	5f e3       	ldi	r21, 0x3F	; 63
    65be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    65c2:	88 23       	and	r24, r24
    65c4:	2c f4       	brge	.+10     	; 0x65d0 <HKP_u8GetPressedKey+0xc4>
		__ticks = 1;
    65c6:	81 e0       	ldi	r24, 0x01	; 1
    65c8:	90 e0       	ldi	r25, 0x00	; 0
    65ca:	9e 83       	std	Y+6, r25	; 0x06
    65cc:	8d 83       	std	Y+5, r24	; 0x05
    65ce:	3f c0       	rjmp	.+126    	; 0x664e <HKP_u8GetPressedKey+0x142>
	else if (__tmp > 65535)
    65d0:	6f 81       	ldd	r22, Y+7	; 0x07
    65d2:	78 85       	ldd	r23, Y+8	; 0x08
    65d4:	89 85       	ldd	r24, Y+9	; 0x09
    65d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    65d8:	20 e0       	ldi	r18, 0x00	; 0
    65da:	3f ef       	ldi	r19, 0xFF	; 255
    65dc:	4f e7       	ldi	r20, 0x7F	; 127
    65de:	57 e4       	ldi	r21, 0x47	; 71
    65e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    65e4:	18 16       	cp	r1, r24
    65e6:	4c f5       	brge	.+82     	; 0x663a <HKP_u8GetPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    65ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    65ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    65ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    65f0:	20 e0       	ldi	r18, 0x00	; 0
    65f2:	30 e0       	ldi	r19, 0x00	; 0
    65f4:	40 e2       	ldi	r20, 0x20	; 32
    65f6:	51 e4       	ldi	r21, 0x41	; 65
    65f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65fc:	dc 01       	movw	r26, r24
    65fe:	cb 01       	movw	r24, r22
    6600:	bc 01       	movw	r22, r24
    6602:	cd 01       	movw	r24, r26
    6604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6608:	dc 01       	movw	r26, r24
    660a:	cb 01       	movw	r24, r22
    660c:	9e 83       	std	Y+6, r25	; 0x06
    660e:	8d 83       	std	Y+5, r24	; 0x05
    6610:	0f c0       	rjmp	.+30     	; 0x6630 <HKP_u8GetPressedKey+0x124>
    6612:	88 ec       	ldi	r24, 0xC8	; 200
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	9c 83       	std	Y+4, r25	; 0x04
    6618:	8b 83       	std	Y+3, r24	; 0x03
    661a:	8b 81       	ldd	r24, Y+3	; 0x03
    661c:	9c 81       	ldd	r25, Y+4	; 0x04
    661e:	01 97       	sbiw	r24, 0x01	; 1
    6620:	f1 f7       	brne	.-4      	; 0x661e <HKP_u8GetPressedKey+0x112>
    6622:	9c 83       	std	Y+4, r25	; 0x04
    6624:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6626:	8d 81       	ldd	r24, Y+5	; 0x05
    6628:	9e 81       	ldd	r25, Y+6	; 0x06
    662a:	01 97       	sbiw	r24, 0x01	; 1
    662c:	9e 83       	std	Y+6, r25	; 0x06
    662e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6630:	8d 81       	ldd	r24, Y+5	; 0x05
    6632:	9e 81       	ldd	r25, Y+6	; 0x06
    6634:	00 97       	sbiw	r24, 0x00	; 0
    6636:	69 f7       	brne	.-38     	; 0x6612 <HKP_u8GetPressedKey+0x106>
    6638:	14 c0       	rjmp	.+40     	; 0x6662 <HKP_u8GetPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    663a:	6f 81       	ldd	r22, Y+7	; 0x07
    663c:	78 85       	ldd	r23, Y+8	; 0x08
    663e:	89 85       	ldd	r24, Y+9	; 0x09
    6640:	9a 85       	ldd	r25, Y+10	; 0x0a
    6642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6646:	dc 01       	movw	r26, r24
    6648:	cb 01       	movw	r24, r22
    664a:	9e 83       	std	Y+6, r25	; 0x06
    664c:	8d 83       	std	Y+5, r24	; 0x05
    664e:	8d 81       	ldd	r24, Y+5	; 0x05
    6650:	9e 81       	ldd	r25, Y+6	; 0x06
    6652:	9a 83       	std	Y+2, r25	; 0x02
    6654:	89 83       	std	Y+1, r24	; 0x01
    6656:	89 81       	ldd	r24, Y+1	; 0x01
    6658:	9a 81       	ldd	r25, Y+2	; 0x02
    665a:	01 97       	sbiw	r24, 0x01	; 1
    665c:	f1 f7       	brne	.-4      	; 0x665a <HKP_u8GetPressedKey+0x14e>
    665e:	9a 83       	std	Y+2, r25	; 0x02
    6660:	89 83       	std	Y+1, r24	; 0x01
		/**active current column by make it output low */
		MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;
		
		/**internal loop to loop to each row 
		   and check pressed key that common current row and current column */
		for (L_u8Row = ROW_START ; L_u8Row <= ROW_END ; L_u8Row ++)
    6662:	89 89       	ldd	r24, Y+17	; 0x11
    6664:	8f 5f       	subi	r24, 0xFF	; 255
    6666:	89 8b       	std	Y+17, r24	; 0x11
    6668:	89 89       	ldd	r24, Y+17	; 0x11
    666a:	88 30       	cpi	r24, 0x08	; 8
    666c:	08 f4       	brcc	.+2      	; 0x6670 <HKP_u8GetPressedKey+0x164>
    666e:	63 cf       	rjmp	.-314    	; 0x6536 <HKP_u8GetPressedKey+0x2a>
				_delay_ms (DELAY_FOR_DRBOUNCING) ;
			}
		}
		
		/**deactive current column by make it output low */
		MDIO_voidSetPinVal (KP_PORT , L_u8Column) ;
    6670:	81 e0       	ldi	r24, 0x01	; 1
    6672:	6a 89       	ldd	r22, Y+18	; 0x12
    6674:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
	u8 L_u8Row    ;
    u8 L_u8PinVal ;
    u8 L_u8PressedKey = NOT_PRESSED;
	
	/**external loop to active current column that be checked */
	for (L_u8Column = COL_START ; L_u8Column <= COL_END ; L_u8Column ++)
    6678:	8a 89       	ldd	r24, Y+18	; 0x12
    667a:	8f 5f       	subi	r24, 0xFF	; 255
    667c:	8a 8b       	std	Y+18, r24	; 0x12
    667e:	8a 89       	ldd	r24, Y+18	; 0x12
    6680:	84 30       	cpi	r24, 0x04	; 4
    6682:	08 f4       	brcc	.+2      	; 0x6686 <HKP_u8GetPressedKey+0x17a>
    6684:	51 cf       	rjmp	.-350    	; 0x6528 <HKP_u8GetPressedKey+0x1c>
		}
		
		/**deactive current column by make it output low */
		MDIO_voidSetPinVal (KP_PORT , L_u8Column) ;
	}
	return L_u8PressedKey ;
    6686:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    6688:	62 96       	adiw	r28, 0x12	; 18
    668a:	0f b6       	in	r0, 0x3f	; 63
    668c:	f8 94       	cli
    668e:	de bf       	out	0x3e, r29	; 62
    6690:	0f be       	out	0x3f, r0	; 63
    6692:	cd bf       	out	0x3d, r28	; 61
    6694:	cf 91       	pop	r28
    6696:	df 91       	pop	r29
    6698:	08 95       	ret

0000669a <HEEPROM_voidInit>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/I2C/I2C_int.h"
#include "EEPROM_init.h"

void HEEPROM_voidInit (u32 A_u32Scl)
{
    669a:	df 93       	push	r29
    669c:	cf 93       	push	r28
    669e:	00 d0       	rcall	.+0      	; 0x66a0 <HEEPROM_voidInit+0x6>
    66a0:	00 d0       	rcall	.+0      	; 0x66a2 <HEEPROM_voidInit+0x8>
    66a2:	cd b7       	in	r28, 0x3d	; 61
    66a4:	de b7       	in	r29, 0x3e	; 62
    66a6:	69 83       	std	Y+1, r22	; 0x01
    66a8:	7a 83       	std	Y+2, r23	; 0x02
    66aa:	8b 83       	std	Y+3, r24	; 0x03
    66ac:	9c 83       	std	Y+4, r25	; 0x04
	MTWI_voidMasterInt(A_u32Scl) ;
    66ae:	89 81       	ldd	r24, Y+1	; 0x01
    66b0:	9a 81       	ldd	r25, Y+2	; 0x02
    66b2:	ab 81       	ldd	r26, Y+3	; 0x03
    66b4:	bc 81       	ldd	r27, Y+4	; 0x04
    66b6:	bc 01       	movw	r22, r24
    66b8:	cd 01       	movw	r24, r26
    66ba:	0e 94 a0 13 	call	0x2740	; 0x2740 <MTWI_voidMasterInt>
}
    66be:	0f 90       	pop	r0
    66c0:	0f 90       	pop	r0
    66c2:	0f 90       	pop	r0
    66c4:	0f 90       	pop	r0
    66c6:	cf 91       	pop	r28
    66c8:	df 91       	pop	r29
    66ca:	08 95       	ret

000066cc <HEEPROM_voidWriteByte>:

void HEEPROM_voidWriteByte (u16 A_u16Address , u8 A_u8Data)
{
    66cc:	df 93       	push	r29
    66ce:	cf 93       	push	r28
    66d0:	00 d0       	rcall	.+0      	; 0x66d2 <HEEPROM_voidWriteByte+0x6>
    66d2:	00 d0       	rcall	.+0      	; 0x66d4 <HEEPROM_voidWriteByte+0x8>
    66d4:	cd b7       	in	r28, 0x3d	; 61
    66d6:	de b7       	in	r29, 0x3e	; 62
    66d8:	9b 83       	std	Y+3, r25	; 0x03
    66da:	8a 83       	std	Y+2, r24	; 0x02
    66dc:	6c 83       	std	Y+4, r22	; 0x04
	u8 L_u8WordAddress ;
	L_u8WordAddress = ((0b10100000) | ((A_u16Address>>8)<<1)) ;
    66de:	8a 81       	ldd	r24, Y+2	; 0x02
    66e0:	9b 81       	ldd	r25, Y+3	; 0x03
    66e2:	89 2f       	mov	r24, r25
    66e4:	99 27       	eor	r25, r25
    66e6:	88 0f       	add	r24, r24
    66e8:	80 6a       	ori	r24, 0xA0	; 160
    66ea:	89 83       	std	Y+1, r24	; 0x01
	MTWI_voidMasterSendStartCondition() ;
    66ec:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <MTWI_voidMasterSendStartCondition>
	MTWI_voidMasterSendAddress(L_u8WordAddress) ;
    66f0:	89 81       	ldd	r24, Y+1	; 0x01
    66f2:	0e 94 20 15 	call	0x2a40	; 0x2a40 <MTWI_voidMasterSendAddress>
	MTWI_voidMasterSendData((u8)A_u16Address) ;
    66f6:	8a 81       	ldd	r24, Y+2	; 0x02
    66f8:	0e 94 6e 15 	call	0x2adc	; 0x2adc <MTWI_voidMasterSendData>
	MTWI_voidMasterSendData(A_u8Data) ;
    66fc:	8c 81       	ldd	r24, Y+4	; 0x04
    66fe:	0e 94 6e 15 	call	0x2adc	; 0x2adc <MTWI_voidMasterSendData>
	MTWI_voidMasterSendStopCondition() ;
    6702:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <MTWI_voidMasterSendStopCondition>
}
    6706:	0f 90       	pop	r0
    6708:	0f 90       	pop	r0
    670a:	0f 90       	pop	r0
    670c:	0f 90       	pop	r0
    670e:	cf 91       	pop	r28
    6710:	df 91       	pop	r29
    6712:	08 95       	ret

00006714 <HEEPROM_u8ReadByte>:

u8 HEEPROM_u8ReadByte (u16 A_u16Address)
{
    6714:	df 93       	push	r29
    6716:	cf 93       	push	r28
    6718:	00 d0       	rcall	.+0      	; 0x671a <HEEPROM_u8ReadByte+0x6>
    671a:	00 d0       	rcall	.+0      	; 0x671c <HEEPROM_u8ReadByte+0x8>
    671c:	cd b7       	in	r28, 0x3d	; 61
    671e:	de b7       	in	r29, 0x3e	; 62
    6720:	9c 83       	std	Y+4, r25	; 0x04
    6722:	8b 83       	std	Y+3, r24	; 0x03
	u8 L_u8WordAddress ;
	u8 L_u8ReturnByte ;
	L_u8WordAddress = ((0b10100000) | ((A_u16Address>>8)<<1)) ;
    6724:	8b 81       	ldd	r24, Y+3	; 0x03
    6726:	9c 81       	ldd	r25, Y+4	; 0x04
    6728:	89 2f       	mov	r24, r25
    672a:	99 27       	eor	r25, r25
    672c:	88 0f       	add	r24, r24
    672e:	80 6a       	ori	r24, 0xA0	; 160
    6730:	8a 83       	std	Y+2, r24	; 0x02
	MTWI_voidMasterSendStartCondition() ;
    6732:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <MTWI_voidMasterSendStartCondition>
	MTWI_voidMasterSendAddress(L_u8WordAddress) ;
    6736:	8a 81       	ldd	r24, Y+2	; 0x02
    6738:	0e 94 20 15 	call	0x2a40	; 0x2a40 <MTWI_voidMasterSendAddress>
	MTWI_voidMasterSendData((u8)A_u16Address) ;
    673c:	8b 81       	ldd	r24, Y+3	; 0x03
    673e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <MTWI_voidMasterSendData>
	MTWI_voidMasterSendRepetedStartCondition() ;
    6742:	0e 94 82 14 	call	0x2904	; 0x2904 <MTWI_voidMasterSendRepetedStartCondition>
	L_u8WordAddress = ((0b10100001) | ((A_u16Address>>8)<<1)) ;
    6746:	8b 81       	ldd	r24, Y+3	; 0x03
    6748:	9c 81       	ldd	r25, Y+4	; 0x04
    674a:	89 2f       	mov	r24, r25
    674c:	99 27       	eor	r25, r25
    674e:	88 0f       	add	r24, r24
    6750:	81 6a       	ori	r24, 0xA1	; 161
    6752:	8a 83       	std	Y+2, r24	; 0x02
	MTWI_voidMasterSendAddressToRead(L_u8WordAddress) ;
    6754:	8a 81       	ldd	r24, Y+2	; 0x02
    6756:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <MTWI_voidMasterSendAddressToRead>
	L_u8ReturnByte = MTWI_voidMasterReadDataWithNACK() ;
    675a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <MTWI_voidMasterReadDataWithNACK>
    675e:	89 83       	std	Y+1, r24	; 0x01
	MTWI_voidMasterSendStopCondition() ;
    6760:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <MTWI_voidMasterSendStopCondition>
	return L_u8ReturnByte ;
    6764:	89 81       	ldd	r24, Y+1	; 0x01
}
    6766:	0f 90       	pop	r0
    6768:	0f 90       	pop	r0
    676a:	0f 90       	pop	r0
    676c:	0f 90       	pop	r0
    676e:	cf 91       	pop	r28
    6770:	df 91       	pop	r29
    6772:	08 95       	ret

00006774 <HDC_voidInt>:
#include "DCMotor_int.h"
#include "DCMotor_conf.h"


void HDC_voidInt   (void) 
{
    6774:	df 93       	push	r29
    6776:	cf 93       	push	r28
    6778:	cd b7       	in	r28, 0x3d	; 61
    677a:	de b7       	in	r29, 0x3e	; 62
	#if PIN_DC_T1 == PIN_DC_T2
	    #error "PIN_DC_T1 & PIN_DC_T2 are the same pin"
	#else
		/** Set direction of PORT_DC_T1 to output */
	    MDIO_voidSetPinDir (PORT_DC_T1 , PIN_DC_T1 , DIO_HIGH) ;
    677c:	81 e0       	ldi	r24, 0x01	; 1
    677e:	60 e0       	ldi	r22, 0x00	; 0
    6780:	41 e0       	ldi	r20, 0x01	; 1
    6782:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
		/** Set direction of PORT_DC_T2 to output */
	    MDIO_voidSetPinDir (PORT_DC_T2 , PIN_DC_T2 , DIO_HIGH) ;
    6786:	81 e0       	ldi	r24, 0x01	; 1
    6788:	61 e0       	ldi	r22, 0x01	; 1
    678a:	41 e0       	ldi	r20, 0x01	; 1
    678c:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
	#endif
}
    6790:	cf 91       	pop	r28
    6792:	df 91       	pop	r29
    6794:	08 95       	ret

00006796 <HDC_voidRoCw>:
void HDC_voidRoCw  (void) 
{
    6796:	df 93       	push	r29
    6798:	cf 93       	push	r28
    679a:	cd b7       	in	r28, 0x3d	; 61
    679c:	de b7       	in	r29, 0x3e	; 62
	#if PIN_DC_T1 == PIN_DC_T2
	    #error "PIN_DC_T1 & PIN_DC_T2 are the same pin"
	#else
		/** value of PIN_DC_T1 is one & value of PIN_DC_T2 is zero */
	    MDIO_voidSetPinVal (PORT_DC_T1 , PIN_DC_T1) ;
    679e:	81 e0       	ldi	r24, 0x01	; 1
    67a0:	60 e0       	ldi	r22, 0x00	; 0
    67a2:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
	    MDIO_voidClrPinVal (PORT_DC_T2 , PIN_DC_T2) ;
    67a6:	81 e0       	ldi	r24, 0x01	; 1
    67a8:	61 e0       	ldi	r22, 0x01	; 1
    67aa:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	#endif
}
    67ae:	cf 91       	pop	r28
    67b0:	df 91       	pop	r29
    67b2:	08 95       	ret

000067b4 <HDC_voidRoCcw>:
void HDC_voidRoCcw (void) 
{
    67b4:	df 93       	push	r29
    67b6:	cf 93       	push	r28
    67b8:	cd b7       	in	r28, 0x3d	; 61
    67ba:	de b7       	in	r29, 0x3e	; 62
	#if PIN_DC_T1 == PIN_DC_T2
	    #error "PIN_DC_T1 & PIN_DC_T2 are the same pin"
	#else
		/** value of PIN_DC_T1 is zero & value of PIN_DC_T2 is one */
	    MDIO_voidClrPinVal (PORT_DC_T1 , PIN_DC_T1) ;
    67bc:	81 e0       	ldi	r24, 0x01	; 1
    67be:	60 e0       	ldi	r22, 0x00	; 0
    67c0:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	    MDIO_voidSetPinVal (PORT_DC_T2 , PIN_DC_T2) ;
    67c4:	81 e0       	ldi	r24, 0x01	; 1
    67c6:	61 e0       	ldi	r22, 0x01	; 1
    67c8:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
	#endif
}
    67cc:	cf 91       	pop	r28
    67ce:	df 91       	pop	r29
    67d0:	08 95       	ret

000067d2 <HDC_voidStop>:
void HDC_voidStop  (void) 
{
    67d2:	df 93       	push	r29
    67d4:	cf 93       	push	r28
    67d6:	cd b7       	in	r28, 0x3d	; 61
    67d8:	de b7       	in	r29, 0x3e	; 62
	#if PIN_DC_T1 == PIN_DC_T2
	    #error "PIN_DC_T1 & PIN_DC_T2 are the same pin"
	#else
		/** value of PIN_DC_T1 is zero & value of PIN_DC_T2 is zero */
	    MDIO_voidClrPinVal (PORT_DC_T1 , PIN_DC_T1) ;
    67da:	81 e0       	ldi	r24, 0x01	; 1
    67dc:	60 e0       	ldi	r22, 0x00	; 0
    67de:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	    MDIO_voidClrPinVal (PORT_DC_T2 , PIN_DC_T2) ;
    67e2:	81 e0       	ldi	r24, 0x01	; 1
    67e4:	61 e0       	ldi	r22, 0x01	; 1
    67e6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
	#endif
    67ea:	cf 91       	pop	r28
    67ec:	df 91       	pop	r29
    67ee:	08 95       	ret

000067f0 <HBUZZER_voidBUZZERInitial>:
#include "BUZZER_int.h"
#include "BUZZER_private.h"
#include "BUZZER_conf.h"

void HBUZZER_voidBUZZERInitial (void)
{
    67f0:	df 93       	push	r29
    67f2:	cf 93       	push	r28
    67f4:	cd b7       	in	r28, 0x3d	; 61
    67f6:	de b7       	in	r29, 0x3e	; 62
	/** select direction of buzzer as output */
    MDIO_voidSetPinDir(BUZZER_PORT , BUZZER_PIN , BUZZER_OUTPUT) ; 
    67f8:	81 e0       	ldi	r24, 0x01	; 1
    67fa:	60 e0       	ldi	r22, 0x00	; 0
    67fc:	41 e0       	ldi	r20, 0x01	; 1
    67fe:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <MDIO_voidSetPinDir>
}
    6802:	cf 91       	pop	r28
    6804:	df 91       	pop	r29
    6806:	08 95       	ret

00006808 <HBUZZER_voidBUZZEROn>:

void HBUZZER_voidBUZZEROn (void)
{
    6808:	df 93       	push	r29
    680a:	cf 93       	push	r28
    680c:	cd b7       	in	r28, 0x3d	; 61
    680e:	de b7       	in	r29, 0x3e	; 62
	/**make buzzer on (it's pin is high)*/
	MDIO_voidSetPinVal(BUZZER_PORT , BUZZER_PIN) ; 
    6810:	81 e0       	ldi	r24, 0x01	; 1
    6812:	60 e0       	ldi	r22, 0x00	; 0
    6814:	0e 94 b5 1a 	call	0x356a	; 0x356a <MDIO_voidSetPinVal>
}
    6818:	cf 91       	pop	r28
    681a:	df 91       	pop	r29
    681c:	08 95       	ret

0000681e <HBUZZER_voidBUZZEROff>:

void HBUZZER_voidBUZZEROff (void)
{
    681e:	df 93       	push	r29
    6820:	cf 93       	push	r28
    6822:	cd b7       	in	r28, 0x3d	; 61
    6824:	de b7       	in	r29, 0x3e	; 62
	/**make buzzer off (it's pin is low)*/
	MDIO_voidClrPinVal(BUZZER_PORT , BUZZER_PIN) ; 
    6826:	81 e0       	ldi	r24, 0x01	; 1
    6828:	60 e0       	ldi	r22, 0x00	; 0
    682a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <MDIO_voidClrPinVal>
}
    682e:	cf 91       	pop	r28
    6830:	df 91       	pop	r29
    6832:	08 95       	ret

00006834 <HBUZZER_voidBUZZERToggle>:

void HBUZZER_voidBUZZERToggle (void)
{
    6834:	df 93       	push	r29
    6836:	cf 93       	push	r28
    6838:	cd b7       	in	r28, 0x3d	; 61
    683a:	de b7       	in	r29, 0x3e	; 62
	/**inverse the status of buzzer*/
	MDIO_voidTogPinVal(BUZZER_PORT , BUZZER_PIN) ; 
    683c:	81 e0       	ldi	r24, 0x01	; 1
    683e:	60 e0       	ldi	r22, 0x00	; 0
    6840:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <MDIO_voidTogPinVal>
}
    6844:	cf 91       	pop	r28
    6846:	df 91       	pop	r29
    6848:	08 95       	ret

0000684a <main>:
u8 User_Password[50];
u8 i=0,flag1=0;
u8 flag2=0;
u8 flag3=0;
u8 key;
int main(){
    684a:	1f 93       	push	r17
    684c:	df 93       	push	r29
    684e:	cf 93       	push	r28
    6850:	cd b7       	in	r28, 0x3d	; 61
    6852:	de b7       	in	r29, 0x3e	; 62
    6854:	ac 97       	sbiw	r28, 0x2c	; 44
    6856:	0f b6       	in	r0, 0x3f	; 63
    6858:	f8 94       	cli
    685a:	de bf       	out	0x3e, r29	; 62
    685c:	0f be       	out	0x3f, r0	; 63
    685e:	cd bf       	out	0x3d, r28	; 61
	EEPROM_writeByte (0x21 ,'1') ;
    6860:	81 e2       	ldi	r24, 0x21	; 33
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	61 e3       	ldi	r22, 0x31	; 49
    6866:	0e 94 10 17 	call	0x2e20	; 0x2e20 <EEPROM_writeByte>
	EEPROM_writeByte (0x22 ,'2') ;
    686a:	82 e2       	ldi	r24, 0x22	; 34
    686c:	90 e0       	ldi	r25, 0x00	; 0
    686e:	62 e3       	ldi	r22, 0x32	; 50
    6870:	0e 94 10 17 	call	0x2e20	; 0x2e20 <EEPROM_writeByte>
	EEPROM_writeByte (0x23 ,'3') ;
    6874:	83 e2       	ldi	r24, 0x23	; 35
    6876:	90 e0       	ldi	r25, 0x00	; 0
    6878:	63 e3       	ldi	r22, 0x33	; 51
    687a:	0e 94 10 17 	call	0x2e20	; 0x2e20 <EEPROM_writeByte>
	EEPROM_writeByte (0x24 ,'4') ;
    687e:	84 e2       	ldi	r24, 0x24	; 36
    6880:	90 e0       	ldi	r25, 0x00	; 0
    6882:	64 e3       	ldi	r22, 0x34	; 52
    6884:	0e 94 10 17 	call	0x2e20	; 0x2e20 <EEPROM_writeByte>
	HLCD_voidInit();
    6888:	0e 94 12 2b 	call	0x5624	; 0x5624 <HLCD_voidInit>
	HKP_voidKpInt();
    688c:	0e 94 73 32 	call	0x64e6	; 0x64e6 <HKP_voidKpInt>
	MUART_voidInit();
    6890:	0e 94 5d 08 	call	0x10ba	; 0x10ba <MUART_voidInit>
	//LEDS

	DIO_PinMode(PC_0,OUTPUT);
    6894:	84 e1       	ldi	r24, 0x14	; 20
    6896:	61 e0       	ldi	r22, 0x01	; 1
    6898:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <DIO_PinMode>
	DIO_PinMode(PC_1,OUTPUT);
    689c:	85 e1       	ldi	r24, 0x15	; 21
    689e:	61 e0       	ldi	r22, 0x01	; 1
    68a0:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <DIO_PinMode>

	HSevo_voidMoveTO(0);
    68a4:	60 e0       	ldi	r22, 0x00	; 0
    68a6:	70 e0       	ldi	r23, 0x00	; 0
    68a8:	80 e0       	ldi	r24, 0x00	; 0
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	0e 94 80 22 	call	0x4500	; 0x4500 <HSevo_voidMoveTO>

	while(1){
		key=HKP_u8GetPressedKey();
    68b0:	0e 94 86 32 	call	0x650c	; 0x650c <HKP_u8GetPressedKey>
    68b4:	80 93 fa 01 	sts	0x01FA, r24
		if(key!=255 && flag1==0){
    68b8:	80 91 fa 01 	lds	r24, 0x01FA
    68bc:	8f 3f       	cpi	r24, 0xFF	; 255
    68be:	59 f1       	breq	.+86     	; 0x6916 <main+0xcc>
    68c0:	80 91 f5 01 	lds	r24, 0x01F5
    68c4:	88 23       	and	r24, r24
    68c6:	39 f5       	brne	.+78     	; 0x6916 <main+0xcc>
			HLCD_voidSendData(key);
    68c8:	80 91 fa 01 	lds	r24, 0x01FA
    68cc:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <HLCD_voidSendData>
			if(key!='=')
    68d0:	80 91 fa 01 	lds	r24, 0x01FA
    68d4:	8d 33       	cpi	r24, 0x3D	; 61
    68d6:	d1 f0       	breq	.+52     	; 0x690c <main+0xc2>
			{
			User_Password[i]=key;
    68d8:	80 91 f4 01 	lds	r24, 0x01F4
    68dc:	88 2f       	mov	r24, r24
    68de:	90 e0       	ldi	r25, 0x00	; 0
    68e0:	20 91 fa 01 	lds	r18, 0x01FA
    68e4:	fc 01       	movw	r30, r24
    68e6:	e5 50       	subi	r30, 0x05	; 5
    68e8:	fe 4f       	sbci	r31, 0xFE	; 254
    68ea:	20 83       	st	Z, r18
			HLCD_voidSendData(User_Password[i]);
    68ec:	80 91 f4 01 	lds	r24, 0x01F4
    68f0:	88 2f       	mov	r24, r24
    68f2:	90 e0       	ldi	r25, 0x00	; 0
    68f4:	fc 01       	movw	r30, r24
    68f6:	e5 50       	subi	r30, 0x05	; 5
    68f8:	fe 4f       	sbci	r31, 0xFE	; 254
    68fa:	80 81       	ld	r24, Z
    68fc:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <HLCD_voidSendData>
			i++;
    6900:	80 91 f4 01 	lds	r24, 0x01F4
    6904:	8f 5f       	subi	r24, 0xFF	; 255
    6906:	80 93 f4 01 	sts	0x01F4, r24
    690a:	05 c0       	rjmp	.+10     	; 0x6916 <main+0xcc>
			}
			else {
				flag1=1;
    690c:	81 e0       	ldi	r24, 0x01	; 1
    690e:	80 93 f5 01 	sts	0x01F5, r24
				i=0;
    6912:	10 92 f4 01 	sts	0x01F4, r1
			}
		}
		//start check
		if(flag1==1){
    6916:	80 91 f5 01 	lds	r24, 0x01F5
    691a:	81 30       	cpi	r24, 0x01	; 1
    691c:	e9 f4       	brne	.+58     	; 0x6958 <main+0x10e>
			for(int i=0;i<4;i++){
    691e:	1c a6       	std	Y+44, r1	; 0x2c
    6920:	1b a6       	std	Y+43, r1	; 0x2b
    6922:	15 c0       	rjmp	.+42     	; 0x694e <main+0x104>
				if(User_Password[i]!=EEPROM_readByte(0x21+i))
    6924:	8b a5       	ldd	r24, Y+43	; 0x2b
    6926:	9c a5       	ldd	r25, Y+44	; 0x2c
    6928:	fc 01       	movw	r30, r24
    692a:	e5 50       	subi	r30, 0x05	; 5
    692c:	fe 4f       	sbci	r31, 0xFE	; 254
    692e:	10 81       	ld	r17, Z
    6930:	8b a5       	ldd	r24, Y+43	; 0x2b
    6932:	9c a5       	ldd	r25, Y+44	; 0x2c
    6934:	81 96       	adiw	r24, 0x21	; 33
    6936:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <EEPROM_readByte>
    693a:	18 17       	cp	r17, r24
    693c:	19 f0       	breq	.+6      	; 0x6944 <main+0xfa>
				{
					flag2=1;
    693e:	81 e0       	ldi	r24, 0x01	; 1
    6940:	80 93 f6 01 	sts	0x01F6, r24
				i=0;
			}
		}
		//start check
		if(flag1==1){
			for(int i=0;i<4;i++){
    6944:	8b a5       	ldd	r24, Y+43	; 0x2b
    6946:	9c a5       	ldd	r25, Y+44	; 0x2c
    6948:	01 96       	adiw	r24, 0x01	; 1
    694a:	9c a7       	std	Y+44, r25	; 0x2c
    694c:	8b a7       	std	Y+43, r24	; 0x2b
    694e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6950:	9c a5       	ldd	r25, Y+44	; 0x2c
    6952:	84 30       	cpi	r24, 0x04	; 4
    6954:	91 05       	cpc	r25, r1
    6956:	34 f3       	brlt	.-52     	; 0x6924 <main+0xda>
				{
					flag2=1;
				}
			}
		}
		if(flag1==1 && flag3==0){
    6958:	80 91 f5 01 	lds	r24, 0x01F5
    695c:	81 30       	cpi	r24, 0x01	; 1
    695e:	09 f0       	breq	.+2      	; 0x6962 <main+0x118>
    6960:	a7 cf       	rjmp	.-178    	; 0x68b0 <main+0x66>
    6962:	80 91 f7 01 	lds	r24, 0x01F7
    6966:	88 23       	and	r24, r24
    6968:	09 f0       	breq	.+2      	; 0x696c <main+0x122>
    696a:	a2 cf       	rjmp	.-188    	; 0x68b0 <main+0x66>
		if(flag2==0){
    696c:	80 91 f6 01 	lds	r24, 0x01F6
    6970:	88 23       	and	r24, r24
    6972:	09 f0       	breq	.+2      	; 0x6976 <main+0x12c>
    6974:	04 c1       	rjmp	.+520    	; 0x6b7e <main+0x334>
			DIO_digitalWrite(PC_0,HIGH);
    6976:	84 e1       	ldi	r24, 0x14	; 20
    6978:	61 e0       	ldi	r22, 0x01	; 1
    697a:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <DIO_digitalWrite>
			DIO_digitalWrite(PC_1,LOW);
    697e:	85 e1       	ldi	r24, 0x15	; 21
    6980:	60 e0       	ldi	r22, 0x00	; 0
    6982:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <DIO_digitalWrite>
    6986:	80 e0       	ldi	r24, 0x00	; 0
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	af e2       	ldi	r26, 0x2F	; 47
    698c:	b4 e4       	ldi	r27, 0x44	; 68
    698e:	8f a3       	std	Y+39, r24	; 0x27
    6990:	98 a7       	std	Y+40, r25	; 0x28
    6992:	a9 a7       	std	Y+41, r26	; 0x29
    6994:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6996:	6f a1       	ldd	r22, Y+39	; 0x27
    6998:	78 a5       	ldd	r23, Y+40	; 0x28
    699a:	89 a5       	ldd	r24, Y+41	; 0x29
    699c:	9a a5       	ldd	r25, Y+42	; 0x2a
    699e:	20 e0       	ldi	r18, 0x00	; 0
    69a0:	30 e0       	ldi	r19, 0x00	; 0
    69a2:	4a ef       	ldi	r20, 0xFA	; 250
    69a4:	54 e4       	ldi	r21, 0x44	; 68
    69a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69aa:	dc 01       	movw	r26, r24
    69ac:	cb 01       	movw	r24, r22
    69ae:	8b a3       	std	Y+35, r24	; 0x23
    69b0:	9c a3       	std	Y+36, r25	; 0x24
    69b2:	ad a3       	std	Y+37, r26	; 0x25
    69b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    69b6:	6b a1       	ldd	r22, Y+35	; 0x23
    69b8:	7c a1       	ldd	r23, Y+36	; 0x24
    69ba:	8d a1       	ldd	r24, Y+37	; 0x25
    69bc:	9e a1       	ldd	r25, Y+38	; 0x26
    69be:	20 e0       	ldi	r18, 0x00	; 0
    69c0:	30 e0       	ldi	r19, 0x00	; 0
    69c2:	40 e8       	ldi	r20, 0x80	; 128
    69c4:	5f e3       	ldi	r21, 0x3F	; 63
    69c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    69ca:	88 23       	and	r24, r24
    69cc:	2c f4       	brge	.+10     	; 0x69d8 <main+0x18e>
		__ticks = 1;
    69ce:	81 e0       	ldi	r24, 0x01	; 1
    69d0:	90 e0       	ldi	r25, 0x00	; 0
    69d2:	9a a3       	std	Y+34, r25	; 0x22
    69d4:	89 a3       	std	Y+33, r24	; 0x21
    69d6:	3f c0       	rjmp	.+126    	; 0x6a56 <main+0x20c>
	else if (__tmp > 65535)
    69d8:	6b a1       	ldd	r22, Y+35	; 0x23
    69da:	7c a1       	ldd	r23, Y+36	; 0x24
    69dc:	8d a1       	ldd	r24, Y+37	; 0x25
    69de:	9e a1       	ldd	r25, Y+38	; 0x26
    69e0:	20 e0       	ldi	r18, 0x00	; 0
    69e2:	3f ef       	ldi	r19, 0xFF	; 255
    69e4:	4f e7       	ldi	r20, 0x7F	; 127
    69e6:	57 e4       	ldi	r21, 0x47	; 71
    69e8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    69ec:	18 16       	cp	r1, r24
    69ee:	4c f5       	brge	.+82     	; 0x6a42 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69f0:	6f a1       	ldd	r22, Y+39	; 0x27
    69f2:	78 a5       	ldd	r23, Y+40	; 0x28
    69f4:	89 a5       	ldd	r24, Y+41	; 0x29
    69f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    69f8:	20 e0       	ldi	r18, 0x00	; 0
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	40 e2       	ldi	r20, 0x20	; 32
    69fe:	51 e4       	ldi	r21, 0x41	; 65
    6a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a04:	dc 01       	movw	r26, r24
    6a06:	cb 01       	movw	r24, r22
    6a08:	bc 01       	movw	r22, r24
    6a0a:	cd 01       	movw	r24, r26
    6a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a10:	dc 01       	movw	r26, r24
    6a12:	cb 01       	movw	r24, r22
    6a14:	9a a3       	std	Y+34, r25	; 0x22
    6a16:	89 a3       	std	Y+33, r24	; 0x21
    6a18:	0f c0       	rjmp	.+30     	; 0x6a38 <main+0x1ee>
    6a1a:	88 ec       	ldi	r24, 0xC8	; 200
    6a1c:	90 e0       	ldi	r25, 0x00	; 0
    6a1e:	98 a3       	std	Y+32, r25	; 0x20
    6a20:	8f 8f       	std	Y+31, r24	; 0x1f
    6a22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a24:	98 a1       	ldd	r25, Y+32	; 0x20
    6a26:	01 97       	sbiw	r24, 0x01	; 1
    6a28:	f1 f7       	brne	.-4      	; 0x6a26 <main+0x1dc>
    6a2a:	98 a3       	std	Y+32, r25	; 0x20
    6a2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a2e:	89 a1       	ldd	r24, Y+33	; 0x21
    6a30:	9a a1       	ldd	r25, Y+34	; 0x22
    6a32:	01 97       	sbiw	r24, 0x01	; 1
    6a34:	9a a3       	std	Y+34, r25	; 0x22
    6a36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a38:	89 a1       	ldd	r24, Y+33	; 0x21
    6a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    6a3c:	00 97       	sbiw	r24, 0x00	; 0
    6a3e:	69 f7       	brne	.-38     	; 0x6a1a <main+0x1d0>
    6a40:	14 c0       	rjmp	.+40     	; 0x6a6a <main+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a42:	6b a1       	ldd	r22, Y+35	; 0x23
    6a44:	7c a1       	ldd	r23, Y+36	; 0x24
    6a46:	8d a1       	ldd	r24, Y+37	; 0x25
    6a48:	9e a1       	ldd	r25, Y+38	; 0x26
    6a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a4e:	dc 01       	movw	r26, r24
    6a50:	cb 01       	movw	r24, r22
    6a52:	9a a3       	std	Y+34, r25	; 0x22
    6a54:	89 a3       	std	Y+33, r24	; 0x21
    6a56:	89 a1       	ldd	r24, Y+33	; 0x21
    6a58:	9a a1       	ldd	r25, Y+34	; 0x22
    6a5a:	9e 8f       	std	Y+30, r25	; 0x1e
    6a5c:	8d 8f       	std	Y+29, r24	; 0x1d
    6a5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6a60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6a62:	01 97       	sbiw	r24, 0x01	; 1
    6a64:	f1 f7       	brne	.-4      	; 0x6a62 <main+0x218>
    6a66:	9e 8f       	std	Y+30, r25	; 0x1e
    6a68:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(700);
			DIO_digitalWrite(PC_0,LOW);
    6a6a:	84 e1       	ldi	r24, 0x14	; 20
    6a6c:	60 e0       	ldi	r22, 0x00	; 0
    6a6e:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <DIO_digitalWrite>
			DIO_digitalWrite(PC_1,LOW);
    6a72:	85 e1       	ldi	r24, 0x15	; 21
    6a74:	60 e0       	ldi	r22, 0x00	; 0
    6a76:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <DIO_digitalWrite>
			MUART_voidSendData('A');
    6a7a:	81 e4       	ldi	r24, 0x41	; 65
    6a7c:	0e 94 03 09 	call	0x1206	; 0x1206 <MUART_voidSendData>
			HSevo_voidMoveTO(90);
    6a80:	60 e0       	ldi	r22, 0x00	; 0
    6a82:	70 e0       	ldi	r23, 0x00	; 0
    6a84:	84 eb       	ldi	r24, 0xB4	; 180
    6a86:	92 e4       	ldi	r25, 0x42	; 66
    6a88:	0e 94 80 22 	call	0x4500	; 0x4500 <HSevo_voidMoveTO>
    6a8c:	80 e0       	ldi	r24, 0x00	; 0
    6a8e:	90 e0       	ldi	r25, 0x00	; 0
    6a90:	aa e7       	ldi	r26, 0x7A	; 122
    6a92:	b4 e4       	ldi	r27, 0x44	; 68
    6a94:	89 8f       	std	Y+25, r24	; 0x19
    6a96:	9a 8f       	std	Y+26, r25	; 0x1a
    6a98:	ab 8f       	std	Y+27, r26	; 0x1b
    6a9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a9c:	69 8d       	ldd	r22, Y+25	; 0x19
    6a9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6aa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6aa4:	20 e0       	ldi	r18, 0x00	; 0
    6aa6:	30 e0       	ldi	r19, 0x00	; 0
    6aa8:	4a ef       	ldi	r20, 0xFA	; 250
    6aaa:	54 e4       	ldi	r21, 0x44	; 68
    6aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ab0:	dc 01       	movw	r26, r24
    6ab2:	cb 01       	movw	r24, r22
    6ab4:	8d 8b       	std	Y+21, r24	; 0x15
    6ab6:	9e 8b       	std	Y+22, r25	; 0x16
    6ab8:	af 8b       	std	Y+23, r26	; 0x17
    6aba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6abc:	6d 89       	ldd	r22, Y+21	; 0x15
    6abe:	7e 89       	ldd	r23, Y+22	; 0x16
    6ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    6ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    6ac4:	20 e0       	ldi	r18, 0x00	; 0
    6ac6:	30 e0       	ldi	r19, 0x00	; 0
    6ac8:	40 e8       	ldi	r20, 0x80	; 128
    6aca:	5f e3       	ldi	r21, 0x3F	; 63
    6acc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6ad0:	88 23       	and	r24, r24
    6ad2:	2c f4       	brge	.+10     	; 0x6ade <main+0x294>
		__ticks = 1;
    6ad4:	81 e0       	ldi	r24, 0x01	; 1
    6ad6:	90 e0       	ldi	r25, 0x00	; 0
    6ad8:	9c 8b       	std	Y+20, r25	; 0x14
    6ada:	8b 8b       	std	Y+19, r24	; 0x13
    6adc:	3f c0       	rjmp	.+126    	; 0x6b5c <main+0x312>
	else if (__tmp > 65535)
    6ade:	6d 89       	ldd	r22, Y+21	; 0x15
    6ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    6ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    6ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    6ae6:	20 e0       	ldi	r18, 0x00	; 0
    6ae8:	3f ef       	ldi	r19, 0xFF	; 255
    6aea:	4f e7       	ldi	r20, 0x7F	; 127
    6aec:	57 e4       	ldi	r21, 0x47	; 71
    6aee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6af2:	18 16       	cp	r1, r24
    6af4:	4c f5       	brge	.+82     	; 0x6b48 <main+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6af6:	69 8d       	ldd	r22, Y+25	; 0x19
    6af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6afe:	20 e0       	ldi	r18, 0x00	; 0
    6b00:	30 e0       	ldi	r19, 0x00	; 0
    6b02:	40 e2       	ldi	r20, 0x20	; 32
    6b04:	51 e4       	ldi	r21, 0x41	; 65
    6b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b0a:	dc 01       	movw	r26, r24
    6b0c:	cb 01       	movw	r24, r22
    6b0e:	bc 01       	movw	r22, r24
    6b10:	cd 01       	movw	r24, r26
    6b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b16:	dc 01       	movw	r26, r24
    6b18:	cb 01       	movw	r24, r22
    6b1a:	9c 8b       	std	Y+20, r25	; 0x14
    6b1c:	8b 8b       	std	Y+19, r24	; 0x13
    6b1e:	0f c0       	rjmp	.+30     	; 0x6b3e <main+0x2f4>
    6b20:	88 ec       	ldi	r24, 0xC8	; 200
    6b22:	90 e0       	ldi	r25, 0x00	; 0
    6b24:	9a 8b       	std	Y+18, r25	; 0x12
    6b26:	89 8b       	std	Y+17, r24	; 0x11
    6b28:	89 89       	ldd	r24, Y+17	; 0x11
    6b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    6b2c:	01 97       	sbiw	r24, 0x01	; 1
    6b2e:	f1 f7       	brne	.-4      	; 0x6b2c <main+0x2e2>
    6b30:	9a 8b       	std	Y+18, r25	; 0x12
    6b32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b34:	8b 89       	ldd	r24, Y+19	; 0x13
    6b36:	9c 89       	ldd	r25, Y+20	; 0x14
    6b38:	01 97       	sbiw	r24, 0x01	; 1
    6b3a:	9c 8b       	std	Y+20, r25	; 0x14
    6b3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    6b40:	9c 89       	ldd	r25, Y+20	; 0x14
    6b42:	00 97       	sbiw	r24, 0x00	; 0
    6b44:	69 f7       	brne	.-38     	; 0x6b20 <main+0x2d6>
    6b46:	14 c0       	rjmp	.+40     	; 0x6b70 <main+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b48:	6d 89       	ldd	r22, Y+21	; 0x15
    6b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    6b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    6b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    6b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b54:	dc 01       	movw	r26, r24
    6b56:	cb 01       	movw	r24, r22
    6b58:	9c 8b       	std	Y+20, r25	; 0x14
    6b5a:	8b 8b       	std	Y+19, r24	; 0x13
    6b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    6b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    6b60:	98 8b       	std	Y+16, r25	; 0x10
    6b62:	8f 87       	std	Y+15, r24	; 0x0f
    6b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b66:	98 89       	ldd	r25, Y+16	; 0x10
    6b68:	01 97       	sbiw	r24, 0x01	; 1
    6b6a:	f1 f7       	brne	.-4      	; 0x6b68 <main+0x31e>
    6b6c:	98 8b       	std	Y+16, r25	; 0x10
    6b6e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			HSevo_voidMoveTO(0);
    6b70:	60 e0       	ldi	r22, 0x00	; 0
    6b72:	70 e0       	ldi	r23, 0x00	; 0
    6b74:	80 e0       	ldi	r24, 0x00	; 0
    6b76:	90 e0       	ldi	r25, 0x00	; 0
    6b78:	0e 94 80 22 	call	0x4500	; 0x4500 <HSevo_voidMoveTO>
    6b7c:	85 c0       	rjmp	.+266    	; 0x6c88 <main+0x43e>
		}
		else{
			DIO_digitalWrite(PC_0,LOW);
    6b7e:	84 e1       	ldi	r24, 0x14	; 20
    6b80:	60 e0       	ldi	r22, 0x00	; 0
    6b82:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <DIO_digitalWrite>
			DIO_digitalWrite(PC_1,HIGH);
    6b86:	85 e1       	ldi	r24, 0x15	; 21
    6b88:	61 e0       	ldi	r22, 0x01	; 1
    6b8a:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <DIO_digitalWrite>
    6b8e:	80 e0       	ldi	r24, 0x00	; 0
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	af e2       	ldi	r26, 0x2F	; 47
    6b94:	b4 e4       	ldi	r27, 0x44	; 68
    6b96:	8b 87       	std	Y+11, r24	; 0x0b
    6b98:	9c 87       	std	Y+12, r25	; 0x0c
    6b9a:	ad 87       	std	Y+13, r26	; 0x0d
    6b9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ba6:	20 e0       	ldi	r18, 0x00	; 0
    6ba8:	30 e0       	ldi	r19, 0x00	; 0
    6baa:	4a ef       	ldi	r20, 0xFA	; 250
    6bac:	54 e4       	ldi	r21, 0x44	; 68
    6bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bb2:	dc 01       	movw	r26, r24
    6bb4:	cb 01       	movw	r24, r22
    6bb6:	8f 83       	std	Y+7, r24	; 0x07
    6bb8:	98 87       	std	Y+8, r25	; 0x08
    6bba:	a9 87       	std	Y+9, r26	; 0x09
    6bbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    6bc0:	78 85       	ldd	r23, Y+8	; 0x08
    6bc2:	89 85       	ldd	r24, Y+9	; 0x09
    6bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bc6:	20 e0       	ldi	r18, 0x00	; 0
    6bc8:	30 e0       	ldi	r19, 0x00	; 0
    6bca:	40 e8       	ldi	r20, 0x80	; 128
    6bcc:	5f e3       	ldi	r21, 0x3F	; 63
    6bce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6bd2:	88 23       	and	r24, r24
    6bd4:	2c f4       	brge	.+10     	; 0x6be0 <main+0x396>
		__ticks = 1;
    6bd6:	81 e0       	ldi	r24, 0x01	; 1
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	9e 83       	std	Y+6, r25	; 0x06
    6bdc:	8d 83       	std	Y+5, r24	; 0x05
    6bde:	3f c0       	rjmp	.+126    	; 0x6c5e <main+0x414>
	else if (__tmp > 65535)
    6be0:	6f 81       	ldd	r22, Y+7	; 0x07
    6be2:	78 85       	ldd	r23, Y+8	; 0x08
    6be4:	89 85       	ldd	r24, Y+9	; 0x09
    6be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6be8:	20 e0       	ldi	r18, 0x00	; 0
    6bea:	3f ef       	ldi	r19, 0xFF	; 255
    6bec:	4f e7       	ldi	r20, 0x7F	; 127
    6bee:	57 e4       	ldi	r21, 0x47	; 71
    6bf0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6bf4:	18 16       	cp	r1, r24
    6bf6:	4c f5       	brge	.+82     	; 0x6c4a <main+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    6bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    6bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c00:	20 e0       	ldi	r18, 0x00	; 0
    6c02:	30 e0       	ldi	r19, 0x00	; 0
    6c04:	40 e2       	ldi	r20, 0x20	; 32
    6c06:	51 e4       	ldi	r21, 0x41	; 65
    6c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c0c:	dc 01       	movw	r26, r24
    6c0e:	cb 01       	movw	r24, r22
    6c10:	bc 01       	movw	r22, r24
    6c12:	cd 01       	movw	r24, r26
    6c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c18:	dc 01       	movw	r26, r24
    6c1a:	cb 01       	movw	r24, r22
    6c1c:	9e 83       	std	Y+6, r25	; 0x06
    6c1e:	8d 83       	std	Y+5, r24	; 0x05
    6c20:	0f c0       	rjmp	.+30     	; 0x6c40 <main+0x3f6>
    6c22:	88 ec       	ldi	r24, 0xC8	; 200
    6c24:	90 e0       	ldi	r25, 0x00	; 0
    6c26:	9c 83       	std	Y+4, r25	; 0x04
    6c28:	8b 83       	std	Y+3, r24	; 0x03
    6c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    6c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    6c2e:	01 97       	sbiw	r24, 0x01	; 1
    6c30:	f1 f7       	brne	.-4      	; 0x6c2e <main+0x3e4>
    6c32:	9c 83       	std	Y+4, r25	; 0x04
    6c34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c36:	8d 81       	ldd	r24, Y+5	; 0x05
    6c38:	9e 81       	ldd	r25, Y+6	; 0x06
    6c3a:	01 97       	sbiw	r24, 0x01	; 1
    6c3c:	9e 83       	std	Y+6, r25	; 0x06
    6c3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c40:	8d 81       	ldd	r24, Y+5	; 0x05
    6c42:	9e 81       	ldd	r25, Y+6	; 0x06
    6c44:	00 97       	sbiw	r24, 0x00	; 0
    6c46:	69 f7       	brne	.-38     	; 0x6c22 <main+0x3d8>
    6c48:	14 c0       	rjmp	.+40     	; 0x6c72 <main+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    6c4c:	78 85       	ldd	r23, Y+8	; 0x08
    6c4e:	89 85       	ldd	r24, Y+9	; 0x09
    6c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c56:	dc 01       	movw	r26, r24
    6c58:	cb 01       	movw	r24, r22
    6c5a:	9e 83       	std	Y+6, r25	; 0x06
    6c5c:	8d 83       	std	Y+5, r24	; 0x05
    6c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    6c60:	9e 81       	ldd	r25, Y+6	; 0x06
    6c62:	9a 83       	std	Y+2, r25	; 0x02
    6c64:	89 83       	std	Y+1, r24	; 0x01
    6c66:	89 81       	ldd	r24, Y+1	; 0x01
    6c68:	9a 81       	ldd	r25, Y+2	; 0x02
    6c6a:	01 97       	sbiw	r24, 0x01	; 1
    6c6c:	f1 f7       	brne	.-4      	; 0x6c6a <main+0x420>
    6c6e:	9a 83       	std	Y+2, r25	; 0x02
    6c70:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(700);
			DIO_digitalWrite(PC_0,LOW);
    6c72:	84 e1       	ldi	r24, 0x14	; 20
    6c74:	60 e0       	ldi	r22, 0x00	; 0
    6c76:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <DIO_digitalWrite>
			DIO_digitalWrite(PC_1,LOW);
    6c7a:	85 e1       	ldi	r24, 0x15	; 21
    6c7c:	60 e0       	ldi	r22, 0x00	; 0
    6c7e:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <DIO_digitalWrite>
			MUART_voidSendData('G');
    6c82:	87 e4       	ldi	r24, 0x47	; 71
    6c84:	0e 94 03 09 	call	0x1206	; 0x1206 <MUART_voidSendData>
		}
		flag2=0;
    6c88:	10 92 f6 01 	sts	0x01F6, r1
		flag1=0;
    6c8c:	10 92 f5 01 	sts	0x01F5, r1
		flag3=0;
    6c90:	10 92 f7 01 	sts	0x01F7, r1
    6c94:	0d ce       	rjmp	.-998    	; 0x68b0 <main+0x66>

00006c96 <__mulsi3>:
    6c96:	62 9f       	mul	r22, r18
    6c98:	d0 01       	movw	r26, r0
    6c9a:	73 9f       	mul	r23, r19
    6c9c:	f0 01       	movw	r30, r0
    6c9e:	82 9f       	mul	r24, r18
    6ca0:	e0 0d       	add	r30, r0
    6ca2:	f1 1d       	adc	r31, r1
    6ca4:	64 9f       	mul	r22, r20
    6ca6:	e0 0d       	add	r30, r0
    6ca8:	f1 1d       	adc	r31, r1
    6caa:	92 9f       	mul	r25, r18
    6cac:	f0 0d       	add	r31, r0
    6cae:	83 9f       	mul	r24, r19
    6cb0:	f0 0d       	add	r31, r0
    6cb2:	74 9f       	mul	r23, r20
    6cb4:	f0 0d       	add	r31, r0
    6cb6:	65 9f       	mul	r22, r21
    6cb8:	f0 0d       	add	r31, r0
    6cba:	99 27       	eor	r25, r25
    6cbc:	72 9f       	mul	r23, r18
    6cbe:	b0 0d       	add	r27, r0
    6cc0:	e1 1d       	adc	r30, r1
    6cc2:	f9 1f       	adc	r31, r25
    6cc4:	63 9f       	mul	r22, r19
    6cc6:	b0 0d       	add	r27, r0
    6cc8:	e1 1d       	adc	r30, r1
    6cca:	f9 1f       	adc	r31, r25
    6ccc:	bd 01       	movw	r22, r26
    6cce:	cf 01       	movw	r24, r30
    6cd0:	11 24       	eor	r1, r1
    6cd2:	08 95       	ret

00006cd4 <__udivmodqi4>:
    6cd4:	99 1b       	sub	r25, r25
    6cd6:	79 e0       	ldi	r23, 0x09	; 9
    6cd8:	04 c0       	rjmp	.+8      	; 0x6ce2 <__udivmodqi4_ep>

00006cda <__udivmodqi4_loop>:
    6cda:	99 1f       	adc	r25, r25
    6cdc:	96 17       	cp	r25, r22
    6cde:	08 f0       	brcs	.+2      	; 0x6ce2 <__udivmodqi4_ep>
    6ce0:	96 1b       	sub	r25, r22

00006ce2 <__udivmodqi4_ep>:
    6ce2:	88 1f       	adc	r24, r24
    6ce4:	7a 95       	dec	r23
    6ce6:	c9 f7       	brne	.-14     	; 0x6cda <__udivmodqi4_loop>
    6ce8:	80 95       	com	r24
    6cea:	08 95       	ret

00006cec <__udivmodhi4>:
    6cec:	aa 1b       	sub	r26, r26
    6cee:	bb 1b       	sub	r27, r27
    6cf0:	51 e1       	ldi	r21, 0x11	; 17
    6cf2:	07 c0       	rjmp	.+14     	; 0x6d02 <__udivmodhi4_ep>

00006cf4 <__udivmodhi4_loop>:
    6cf4:	aa 1f       	adc	r26, r26
    6cf6:	bb 1f       	adc	r27, r27
    6cf8:	a6 17       	cp	r26, r22
    6cfa:	b7 07       	cpc	r27, r23
    6cfc:	10 f0       	brcs	.+4      	; 0x6d02 <__udivmodhi4_ep>
    6cfe:	a6 1b       	sub	r26, r22
    6d00:	b7 0b       	sbc	r27, r23

00006d02 <__udivmodhi4_ep>:
    6d02:	88 1f       	adc	r24, r24
    6d04:	99 1f       	adc	r25, r25
    6d06:	5a 95       	dec	r21
    6d08:	a9 f7       	brne	.-22     	; 0x6cf4 <__udivmodhi4_loop>
    6d0a:	80 95       	com	r24
    6d0c:	90 95       	com	r25
    6d0e:	bc 01       	movw	r22, r24
    6d10:	cd 01       	movw	r24, r26
    6d12:	08 95       	ret

00006d14 <__udivmodsi4>:
    6d14:	a1 e2       	ldi	r26, 0x21	; 33
    6d16:	1a 2e       	mov	r1, r26
    6d18:	aa 1b       	sub	r26, r26
    6d1a:	bb 1b       	sub	r27, r27
    6d1c:	fd 01       	movw	r30, r26
    6d1e:	0d c0       	rjmp	.+26     	; 0x6d3a <__udivmodsi4_ep>

00006d20 <__udivmodsi4_loop>:
    6d20:	aa 1f       	adc	r26, r26
    6d22:	bb 1f       	adc	r27, r27
    6d24:	ee 1f       	adc	r30, r30
    6d26:	ff 1f       	adc	r31, r31
    6d28:	a2 17       	cp	r26, r18
    6d2a:	b3 07       	cpc	r27, r19
    6d2c:	e4 07       	cpc	r30, r20
    6d2e:	f5 07       	cpc	r31, r21
    6d30:	20 f0       	brcs	.+8      	; 0x6d3a <__udivmodsi4_ep>
    6d32:	a2 1b       	sub	r26, r18
    6d34:	b3 0b       	sbc	r27, r19
    6d36:	e4 0b       	sbc	r30, r20
    6d38:	f5 0b       	sbc	r31, r21

00006d3a <__udivmodsi4_ep>:
    6d3a:	66 1f       	adc	r22, r22
    6d3c:	77 1f       	adc	r23, r23
    6d3e:	88 1f       	adc	r24, r24
    6d40:	99 1f       	adc	r25, r25
    6d42:	1a 94       	dec	r1
    6d44:	69 f7       	brne	.-38     	; 0x6d20 <__udivmodsi4_loop>
    6d46:	60 95       	com	r22
    6d48:	70 95       	com	r23
    6d4a:	80 95       	com	r24
    6d4c:	90 95       	com	r25
    6d4e:	9b 01       	movw	r18, r22
    6d50:	ac 01       	movw	r20, r24
    6d52:	bd 01       	movw	r22, r26
    6d54:	cf 01       	movw	r24, r30
    6d56:	08 95       	ret

00006d58 <__prologue_saves__>:
    6d58:	2f 92       	push	r2
    6d5a:	3f 92       	push	r3
    6d5c:	4f 92       	push	r4
    6d5e:	5f 92       	push	r5
    6d60:	6f 92       	push	r6
    6d62:	7f 92       	push	r7
    6d64:	8f 92       	push	r8
    6d66:	9f 92       	push	r9
    6d68:	af 92       	push	r10
    6d6a:	bf 92       	push	r11
    6d6c:	cf 92       	push	r12
    6d6e:	df 92       	push	r13
    6d70:	ef 92       	push	r14
    6d72:	ff 92       	push	r15
    6d74:	0f 93       	push	r16
    6d76:	1f 93       	push	r17
    6d78:	cf 93       	push	r28
    6d7a:	df 93       	push	r29
    6d7c:	cd b7       	in	r28, 0x3d	; 61
    6d7e:	de b7       	in	r29, 0x3e	; 62
    6d80:	ca 1b       	sub	r28, r26
    6d82:	db 0b       	sbc	r29, r27
    6d84:	0f b6       	in	r0, 0x3f	; 63
    6d86:	f8 94       	cli
    6d88:	de bf       	out	0x3e, r29	; 62
    6d8a:	0f be       	out	0x3f, r0	; 63
    6d8c:	cd bf       	out	0x3d, r28	; 61
    6d8e:	09 94       	ijmp

00006d90 <__epilogue_restores__>:
    6d90:	2a 88       	ldd	r2, Y+18	; 0x12
    6d92:	39 88       	ldd	r3, Y+17	; 0x11
    6d94:	48 88       	ldd	r4, Y+16	; 0x10
    6d96:	5f 84       	ldd	r5, Y+15	; 0x0f
    6d98:	6e 84       	ldd	r6, Y+14	; 0x0e
    6d9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    6d9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    6d9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6da0:	aa 84       	ldd	r10, Y+10	; 0x0a
    6da2:	b9 84       	ldd	r11, Y+9	; 0x09
    6da4:	c8 84       	ldd	r12, Y+8	; 0x08
    6da6:	df 80       	ldd	r13, Y+7	; 0x07
    6da8:	ee 80       	ldd	r14, Y+6	; 0x06
    6daa:	fd 80       	ldd	r15, Y+5	; 0x05
    6dac:	0c 81       	ldd	r16, Y+4	; 0x04
    6dae:	1b 81       	ldd	r17, Y+3	; 0x03
    6db0:	aa 81       	ldd	r26, Y+2	; 0x02
    6db2:	b9 81       	ldd	r27, Y+1	; 0x01
    6db4:	ce 0f       	add	r28, r30
    6db6:	d1 1d       	adc	r29, r1
    6db8:	0f b6       	in	r0, 0x3f	; 63
    6dba:	f8 94       	cli
    6dbc:	de bf       	out	0x3e, r29	; 62
    6dbe:	0f be       	out	0x3f, r0	; 63
    6dc0:	cd bf       	out	0x3d, r28	; 61
    6dc2:	ed 01       	movw	r28, r26
    6dc4:	08 95       	ret

00006dc6 <atol>:
    6dc6:	1f 93       	push	r17
    6dc8:	fc 01       	movw	r30, r24
    6dca:	99 27       	eor	r25, r25
    6dcc:	88 27       	eor	r24, r24
    6dce:	bc 01       	movw	r22, r24
    6dd0:	e8 94       	clt
    6dd2:	11 91       	ld	r17, Z+
    6dd4:	10 32       	cpi	r17, 0x20	; 32
    6dd6:	e9 f3       	breq	.-6      	; 0x6dd2 <atol+0xc>
    6dd8:	19 30       	cpi	r17, 0x09	; 9
    6dda:	10 f0       	brcs	.+4      	; 0x6de0 <atol+0x1a>
    6ddc:	1e 30       	cpi	r17, 0x0E	; 14
    6dde:	c8 f3       	brcs	.-14     	; 0x6dd2 <atol+0xc>
    6de0:	1b 32       	cpi	r17, 0x2B	; 43
    6de2:	51 f0       	breq	.+20     	; 0x6df8 <atol+0x32>
    6de4:	1d 32       	cpi	r17, 0x2D	; 45
    6de6:	49 f4       	brne	.+18     	; 0x6dfa <atol+0x34>
    6de8:	68 94       	set
    6dea:	06 c0       	rjmp	.+12     	; 0x6df8 <atol+0x32>
    6dec:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <__mulsi_const_10>
    6df0:	61 0f       	add	r22, r17
    6df2:	71 1d       	adc	r23, r1
    6df4:	81 1d       	adc	r24, r1
    6df6:	91 1d       	adc	r25, r1
    6df8:	11 91       	ld	r17, Z+
    6dfa:	10 53       	subi	r17, 0x30	; 48
    6dfc:	1a 30       	cpi	r17, 0x0A	; 10
    6dfe:	b0 f3       	brcs	.-20     	; 0x6dec <atol+0x26>
    6e00:	3e f4       	brtc	.+14     	; 0x6e10 <atol+0x4a>
    6e02:	90 95       	com	r25
    6e04:	80 95       	com	r24
    6e06:	70 95       	com	r23
    6e08:	61 95       	neg	r22
    6e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    6e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e10:	1f 91       	pop	r17
    6e12:	08 95       	ret

00006e14 <ltoa>:
    6e14:	fa 01       	movw	r30, r20
    6e16:	cf 93       	push	r28
    6e18:	ff 93       	push	r31
    6e1a:	ef 93       	push	r30
    6e1c:	22 30       	cpi	r18, 0x02	; 2
    6e1e:	44 f1       	brlt	.+80     	; 0x6e70 <ltoa+0x5c>
    6e20:	25 32       	cpi	r18, 0x25	; 37
    6e22:	34 f5       	brge	.+76     	; 0x6e70 <ltoa+0x5c>
    6e24:	c2 2f       	mov	r28, r18
    6e26:	e8 94       	clt
    6e28:	ca 30       	cpi	r28, 0x0A	; 10
    6e2a:	49 f4       	brne	.+18     	; 0x6e3e <ltoa+0x2a>
    6e2c:	97 fb       	bst	r25, 7
    6e2e:	3e f4       	brtc	.+14     	; 0x6e3e <ltoa+0x2a>
    6e30:	90 95       	com	r25
    6e32:	80 95       	com	r24
    6e34:	70 95       	com	r23
    6e36:	61 95       	neg	r22
    6e38:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3a:	8f 4f       	sbci	r24, 0xFF	; 255
    6e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e3e:	2c 2f       	mov	r18, r28
    6e40:	33 27       	eor	r19, r19
    6e42:	44 27       	eor	r20, r20
    6e44:	55 27       	eor	r21, r21
    6e46:	ff 93       	push	r31
    6e48:	ef 93       	push	r30
    6e4a:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <__udivmodsi4>
    6e4e:	ef 91       	pop	r30
    6e50:	ff 91       	pop	r31
    6e52:	60 5d       	subi	r22, 0xD0	; 208
    6e54:	6a 33       	cpi	r22, 0x3A	; 58
    6e56:	0c f0       	brlt	.+2      	; 0x6e5a <ltoa+0x46>
    6e58:	69 5d       	subi	r22, 0xD9	; 217
    6e5a:	61 93       	st	Z+, r22
    6e5c:	b9 01       	movw	r22, r18
    6e5e:	ca 01       	movw	r24, r20
    6e60:	60 50       	subi	r22, 0x00	; 0
    6e62:	70 40       	sbci	r23, 0x00	; 0
    6e64:	80 40       	sbci	r24, 0x00	; 0
    6e66:	90 40       	sbci	r25, 0x00	; 0
    6e68:	51 f7       	brne	.-44     	; 0x6e3e <ltoa+0x2a>
    6e6a:	16 f4       	brtc	.+4      	; 0x6e70 <ltoa+0x5c>
    6e6c:	cd e2       	ldi	r28, 0x2D	; 45
    6e6e:	c1 93       	st	Z+, r28
    6e70:	10 82       	st	Z, r1
    6e72:	8f 91       	pop	r24
    6e74:	9f 91       	pop	r25
    6e76:	cf 91       	pop	r28
    6e78:	0c 94 53 37 	jmp	0x6ea6	; 0x6ea6 <strrev>

00006e7c <__mulsi_const_10>:
    6e7c:	59 2f       	mov	r21, r25
    6e7e:	48 2f       	mov	r20, r24
    6e80:	37 2f       	mov	r19, r23
    6e82:	26 2f       	mov	r18, r22
    6e84:	66 0f       	add	r22, r22
    6e86:	77 1f       	adc	r23, r23
    6e88:	88 1f       	adc	r24, r24
    6e8a:	99 1f       	adc	r25, r25
    6e8c:	66 0f       	add	r22, r22
    6e8e:	77 1f       	adc	r23, r23
    6e90:	88 1f       	adc	r24, r24
    6e92:	99 1f       	adc	r25, r25
    6e94:	62 0f       	add	r22, r18
    6e96:	73 1f       	adc	r23, r19
    6e98:	84 1f       	adc	r24, r20
    6e9a:	95 1f       	adc	r25, r21
    6e9c:	66 0f       	add	r22, r22
    6e9e:	77 1f       	adc	r23, r23
    6ea0:	88 1f       	adc	r24, r24
    6ea2:	99 1f       	adc	r25, r25
    6ea4:	08 95       	ret

00006ea6 <strrev>:
    6ea6:	dc 01       	movw	r26, r24
    6ea8:	fc 01       	movw	r30, r24
    6eaa:	67 2f       	mov	r22, r23
    6eac:	71 91       	ld	r23, Z+
    6eae:	77 23       	and	r23, r23
    6eb0:	e1 f7       	brne	.-8      	; 0x6eaa <strrev+0x4>
    6eb2:	32 97       	sbiw	r30, 0x02	; 2
    6eb4:	04 c0       	rjmp	.+8      	; 0x6ebe <strrev+0x18>
    6eb6:	7c 91       	ld	r23, X
    6eb8:	6d 93       	st	X+, r22
    6eba:	70 83       	st	Z, r23
    6ebc:	62 91       	ld	r22, -Z
    6ebe:	ae 17       	cp	r26, r30
    6ec0:	bf 07       	cpc	r27, r31
    6ec2:	c8 f3       	brcs	.-14     	; 0x6eb6 <strrev+0x10>
    6ec4:	08 95       	ret

00006ec6 <_exit>:
    6ec6:	f8 94       	cli

00006ec8 <__stop_program>:
    6ec8:	ff cf       	rjmp	.-2      	; 0x6ec8 <__stop_program>
