
ecu_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00001b84  00001c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004d  0080009c  0080009c  00001c54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003db7  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001297  00000000  00000000  00005de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a5d  00000000  00000000  0000707e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab4  00000000  00000000  00008adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014cc  00000000  00000000  00009590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002374  00000000  00000000  0000aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__vector_5>
      18:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 07 	call	0xf02	; 0xf02 <main>
      8a:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HBUTTON_HBUTTON_t_Create>:

#include "BUTTON_config.h"
#include "BUTTON_interface.h"
#include "BUTTON_private.h"

HBUTTON_t HBUTTON_HBUTTON_t_Create(Pin_t pin,HBUTTON_type_t type){
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	d8 2f       	mov	r29, r24
      98:	c6 2f       	mov	r28, r22
	HBUTTON_t button;
	
	button.pin = pin;
	button.type = type;
	
	switch(type){
      9a:	62 30       	cpi	r22, 0x02	; 2
      9c:	18 f0       	brcs	.+6      	; 0xa4 <HBUTTON_HBUTTON_t_Create+0x12>
      9e:	62 30       	cpi	r22, 0x02	; 2
      a0:	29 f0       	breq	.+10     	; 0xac <HBUTTON_HBUTTON_t_Create+0x1a>
      a2:	07 c0       	rjmp	.+14     	; 0xb2 <HBUTTON_HBUTTON_t_Create+0x20>
		case HBUTTON_inputExternalPullUp:
		case HBUTTON_inputExternalPullDown: 
			MDIO_voidSetPinDir(pin,INPUT); break;
      a4:	60 e0       	ldi	r22, 0x00	; 0
      a6:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
      aa:	03 c0       	rjmp	.+6      	; 0xb2 <HBUTTON_HBUTTON_t_Create+0x20>
		case HBUTTON_inputInternalPullUp: 
			MDIO_voidSetPinDir(pin,INPUT_PULL_UP); break;
      ac:	62 e0       	ldi	r22, 0x02	; 2
      ae:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
	}
	
	return button;
}
      b2:	8d 2f       	mov	r24, r29
      b4:	9c 2f       	mov	r25, r28
      b6:	df 91       	pop	r29
      b8:	cf 91       	pop	r28
      ba:	08 95       	ret

000000bc <HBUTTON_HBUTTON_state_t_getButtonState>:

HBUTTON_state_t HBUTTON_HBUTTON_state_t_getButtonState(HBUTTON_t* A_HBUTTON_t_Button){
      bc:	1f 93       	push	r17
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	ec 01       	movw	r28, r24
	u8 pinVal = MDIO_u8GetPinVal(A_HBUTTON_t_Button->pin);
      c4:	88 81       	ld	r24, Y
      c6:	0e 94 bd 08 	call	0x117a	; 0x117a <MDIO_u8GetPinVal>
	HBUTTON_state_t state;
	
	switch(A_HBUTTON_t_Button->type){
      ca:	99 81       	ldd	r25, Y+1	; 0x01
      cc:	99 23       	and	r25, r25
      ce:	19 f0       	breq	.+6      	; 0xd6 <HBUTTON_HBUTTON_state_t_getButtonState+0x1a>
      d0:	93 30       	cpi	r25, 0x03	; 3
      d2:	88 f4       	brcc	.+34     	; 0xf6 <HBUTTON_HBUTTON_state_t_getButtonState+0x3a>
      d4:	07 c0       	rjmp	.+14     	; 0xe4 <HBUTTON_HBUTTON_state_t_getButtonState+0x28>
		case HBUTTON_inputExternalPullDown:
			switch(pinVal){
      d6:	88 23       	and	r24, r24
      d8:	19 f0       	breq	.+6      	; 0xe0 <HBUTTON_HBUTTON_state_t_getButtonState+0x24>
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	49 f0       	breq	.+18     	; 0xf0 <HBUTTON_HBUTTON_state_t_getButtonState+0x34>
      de:	0b c0       	rjmp	.+22     	; 0xf6 <HBUTTON_HBUTTON_state_t_getButtonState+0x3a>
				case HIGH: state= HBUTTON_pressed; break;
				case LOW: state= HBUTTON_free; break;
      e0:	11 e0       	ldi	r17, 0x01	; 1
      e2:	09 c0       	rjmp	.+18     	; 0xf6 <HBUTTON_HBUTTON_state_t_getButtonState+0x3a>
			
		 break;
		 
		case HBUTTON_inputInternalPullUp:
		case HBUTTON_inputExternalPullUp: 
			switch(pinVal){
      e4:	88 23       	and	r24, r24
      e6:	31 f0       	breq	.+12     	; 0xf4 <HBUTTON_HBUTTON_state_t_getButtonState+0x38>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	29 f4       	brne	.+10     	; 0xf6 <HBUTTON_HBUTTON_state_t_getButtonState+0x3a>
				case LOW: state= HBUTTON_pressed; break;
				case HIGH: state= HBUTTON_free; break;
      ec:	11 e0       	ldi	r17, 0x01	; 1
      ee:	03 c0       	rjmp	.+6      	; 0xf6 <HBUTTON_HBUTTON_state_t_getButtonState+0x3a>
	HBUTTON_state_t state;
	
	switch(A_HBUTTON_t_Button->type){
		case HBUTTON_inputExternalPullDown:
			switch(pinVal){
				case HIGH: state= HBUTTON_pressed; break;
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <HBUTTON_HBUTTON_state_t_getButtonState+0x3a>
		 break;
		 
		case HBUTTON_inputInternalPullUp:
		case HBUTTON_inputExternalPullUp: 
			switch(pinVal){
				case LOW: state= HBUTTON_pressed; break;
      f4:	10 e0       	ldi	r17, 0x00	; 0
			}		
		 break;
	}
	
	return state;
      f6:	81 2f       	mov	r24, r17
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	1f 91       	pop	r17
      fe:	08 95       	ret

00000100 <HBUZZER_HBUZZER_t_Create>:

 #include "BUZZER_config.h"
 #include "BUZZER_interface.h"
 #include "BUZZER_private.h"

 HBUZZER_t HBUZZER_HBUZZER_t_Create(Pin_t A_Pin_t_pin, HBUZZERPolarity_t A_HBUZZERPolarity_t_polarity){
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	c8 2f       	mov	r28, r24
     106:	d6 2f       	mov	r29, r22
	 HBUZZER_t L_BUZZER ;
	 
	 L_BUZZER.pin = A_Pin_t_pin;
	 L_BUZZER.polarity = A_HBUZZERPolarity_t_polarity;
	 
	 MDIO_voidSetPinDir(A_Pin_t_pin,OUTPUT);
     108:	61 e0       	ldi	r22, 0x01	; 1
     10a:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
	 
	 return L_BUZZER;
 }
     10e:	8c 2f       	mov	r24, r28
     110:	9d 2f       	mov	r25, r29
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <HBUZZER_void_TurnOn>:

 void HBUZZER_void_TurnOn(HBUZZER_t *A_Pin_t_pin){
	 switch(A_Pin_t_pin->polarity){
     118:	fc 01       	movw	r30, r24
     11a:	21 81       	ldd	r18, Z+1	; 0x01
     11c:	22 23       	and	r18, r18
     11e:	39 f0       	breq	.+14     	; 0x12e <HBUZZER_void_TurnOn+0x16>
     120:	21 30       	cpi	r18, 0x01	; 1
     122:	51 f4       	brne	.+20     	; 0x138 <HBUZZER_void_TurnOn+0x20>
		 case HBUZZER_ActiveHigh:
		 MDIO_voidSetPinVal(A_Pin_t_pin->pin,HIGH); break;
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	80 81       	ld	r24, Z
     128:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     12c:	08 95       	ret
		 case HBUZZER_ActiveLow:
		 MDIO_voidSetPinVal(A_Pin_t_pin->pin,LOW); break;
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	fc 01       	movw	r30, r24
     132:	80 81       	ld	r24, Z
     134:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     138:	08 95       	ret

0000013a <HBUZZER_void_TurnOff>:
	 }
 }

 
 void HBUZZER_void_TurnOff(HBUZZER_t *A_Pin_t_pin){
	 switch(A_Pin_t_pin->polarity){
     13a:	fc 01       	movw	r30, r24
     13c:	21 81       	ldd	r18, Z+1	; 0x01
     13e:	22 23       	and	r18, r18
     140:	39 f0       	breq	.+14     	; 0x150 <HBUZZER_void_TurnOff+0x16>
     142:	21 30       	cpi	r18, 0x01	; 1
     144:	51 f4       	brne	.+20     	; 0x15a <HBUZZER_void_TurnOff+0x20>
		 case HBUZZER_ActiveHigh:
		 MDIO_voidSetPinVal(A_Pin_t_pin->pin,LOW); break;
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     14e:	08 95       	ret
		 case HBUZZER_ActiveLow:
		 MDIO_voidSetPinVal(A_Pin_t_pin->pin,HIGH); break;
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	fc 01       	movw	r30, r24
     154:	80 81       	ld	r24, Z
     156:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     15a:	08 95       	ret

0000015c <HLCD_void_send>:
		HLCD_RETURN_HOME_CMD(),
		HLCD_RETURN_HOME_CMD_RS,
		HLCD_RETURN_HOME_CMD_RW,
		HLCD_RETURN_HOME_CMD_TIME_US
		);
}
     15c:	af 92       	push	r10
     15e:	bf 92       	push	r11
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	ec 01       	movw	r28, r24
     172:	b6 2e       	mov	r11, r22
     174:	a2 2e       	mov	r10, r18
     176:	67 01       	movw	r12, r14
     178:	78 01       	movw	r14, r16
     17a:	64 2f       	mov	r22, r20
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     182:	6a 2d       	mov	r22, r10
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     18a:	88 81       	ld	r24, Y
     18c:	85 fd       	sbrc	r24, 5
     18e:	18 c0       	rjmp	.+48     	; 0x1c0 <HLCD_void_send+0x64>
     190:	29 c0       	rjmp	.+82     	; 0x1e4 <HLCD_void_send+0x88>
     192:	21 2f       	mov	r18, r17
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	43 e0       	ldi	r20, 0x03	; 3
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	42 1b       	sub	r20, r18
     19c:	53 0b       	sbc	r21, r19
     19e:	8b 2d       	mov	r24, r11
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <HLCD_void_send+0x4c>
     1a4:	95 95       	asr	r25
     1a6:	87 95       	ror	r24
     1a8:	4a 95       	dec	r20
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <HLCD_void_send+0x48>
     1ac:	68 2f       	mov	r22, r24
     1ae:	61 70       	andi	r22, 0x01	; 1
     1b0:	fe 01       	movw	r30, r28
     1b2:	e2 0f       	add	r30, r18
     1b4:	f3 1f       	adc	r31, r19
     1b6:	84 81       	ldd	r24, Z+4	; 0x04
     1b8:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     1bc:	1f 5f       	subi	r17, 0xFF	; 255
     1be:	01 c0       	rjmp	.+2      	; 0x1c2 <HLCD_void_send+0x66>
     1c0:	10 e0       	ldi	r17, 0x00	; 0
     1c2:	14 30       	cpi	r17, 0x04	; 4
     1c4:	30 f3       	brcs	.-52     	; 0x192 <HLCD_void_send+0x36>
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ca:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     1ce:	68 ee       	ldi	r22, 0xE8	; 232
     1d0:	73 e0       	ldi	r23, 0x03	; 3
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MDELAY_void_micro>
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     1e2:	52 c0       	rjmp	.+164    	; 0x288 <HLCD_void_send+0x12c>
     1e4:	6b 2d       	mov	r22, r11
     1e6:	66 1f       	adc	r22, r22
     1e8:	66 27       	eor	r22, r22
     1ea:	66 1f       	adc	r22, r22
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     1f2:	b6 fa       	bst	r11, 6
     1f4:	66 27       	eor	r22, r22
     1f6:	60 f9       	bld	r22, 0
     1f8:	8d 81       	ldd	r24, Y+5	; 0x05
     1fa:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     1fe:	b5 fa       	bst	r11, 5
     200:	66 27       	eor	r22, r22
     202:	60 f9       	bld	r22, 0
     204:	8e 81       	ldd	r24, Y+6	; 0x06
     206:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     20a:	b4 fa       	bst	r11, 4
     20c:	66 27       	eor	r22, r22
     20e:	60 f9       	bld	r22, 0
     210:	8f 81       	ldd	r24, Y+7	; 0x07
     212:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     216:	61 e0       	ldi	r22, 0x01	; 1
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     21e:	68 ee       	ldi	r22, 0xE8	; 232
     220:	73 e0       	ldi	r23, 0x03	; 3
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MDELAY_void_micro>
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	8b 81       	ldd	r24, Y+3	; 0x03
     22e:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     232:	68 ee       	ldi	r22, 0xE8	; 232
     234:	73 e0       	ldi	r23, 0x03	; 3
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MDELAY_void_micro>
     23e:	b3 fa       	bst	r11, 3
     240:	66 27       	eor	r22, r22
     242:	60 f9       	bld	r22, 0
     244:	8c 81       	ldd	r24, Y+4	; 0x04
     246:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     24a:	b2 fa       	bst	r11, 2
     24c:	66 27       	eor	r22, r22
     24e:	60 f9       	bld	r22, 0
     250:	8d 81       	ldd	r24, Y+5	; 0x05
     252:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     256:	b1 fa       	bst	r11, 1
     258:	66 27       	eor	r22, r22
     25a:	60 f9       	bld	r22, 0
     25c:	8e 81       	ldd	r24, Y+6	; 0x06
     25e:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     262:	6b 2d       	mov	r22, r11
     264:	61 70       	andi	r22, 0x01	; 1
     266:	8f 81       	ldd	r24, Y+7	; 0x07
     268:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     274:	68 ee       	ldi	r22, 0xE8	; 232
     276:	73 e0       	ldi	r23, 0x03	; 3
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MDELAY_void_micro>
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     288:	c7 01       	movw	r24, r14
     28a:	b6 01       	movw	r22, r12
     28c:	68 51       	subi	r22, 0x18	; 24
     28e:	7c 4f       	sbci	r23, 0xFC	; 252
     290:	8f 4f       	sbci	r24, 0xFF	; 255
     292:	9f 4f       	sbci	r25, 0xFF	; 255
     294:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MDELAY_void_micro>
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	08 95       	ret

000002ae <HLCD_HLCD_t_LcdCreate>:
     2ae:	df 92       	push	r13
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	60 97       	sbiw	r28, 0x10	; 16
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	18 2f       	mov	r17, r24
     2ce:	06 2f       	mov	r16, r22
     2d0:	d4 2e       	mov	r13, r20
     2d2:	79 01       	movw	r14, r18
     2d4:	68 ee       	ldi	r22, 0xE8	; 232
     2d6:	73 e0       	ldi	r23, 0x03	; 3
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MDELAY_void_micro>
     2e0:	dc 86       	std	Y+12, r13	; 0x0c
     2e2:	0b 87       	std	Y+11, r16	; 0x0b
     2e4:	1a 87       	std	Y+10, r17	; 0x0a
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	8d 2d       	mov	r24, r13
     2ea:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	80 2f       	mov	r24, r16
     2f2:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	81 2f       	mov	r24, r17
     2fa:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	12 c0       	rjmp	.+36     	; 0x326 <HLCD_HLCD_t_LcdCreate+0x78>
     302:	81 2f       	mov	r24, r17
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	f7 01       	movw	r30, r14
     308:	e8 0f       	add	r30, r24
     30a:	f9 1f       	adc	r31, r25
     30c:	20 81       	ld	r18, Z
     30e:	ad e0       	ldi	r26, 0x0D	; 13
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	ac 0f       	add	r26, r28
     314:	bd 1f       	adc	r27, r29
     316:	a8 0f       	add	r26, r24
     318:	b9 1f       	adc	r27, r25
     31a:	2c 93       	st	X, r18
     31c:	61 e0       	ldi	r22, 0x01	; 1
     31e:	80 81       	ld	r24, Z
     320:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
     324:	1f 5f       	subi	r17, 0xFF	; 255
     326:	14 30       	cpi	r17, 0x04	; 4
     328:	60 f3       	brcs	.-40     	; 0x302 <HLCD_HLCD_t_LcdCreate+0x54>
     32a:	89 85       	ldd	r24, Y+9	; 0x09
     32c:	8f 7d       	andi	r24, 0xDF	; 223
     32e:	80 64       	ori	r24, 0x40	; 64
     330:	8f 77       	andi	r24, 0x7F	; 127
     332:	89 87       	std	Y+9, r24	; 0x09
     334:	17 e2       	ldi	r17, 0x27	; 39
     336:	e1 2e       	mov	r14, r17
     338:	f1 2c       	mov	r15, r1
     33a:	00 e0       	ldi	r16, 0x00	; 0
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	68 e2       	ldi	r22, 0x28	; 40
     344:	ce 01       	movw	r24, r28
     346:	09 96       	adiw	r24, 0x09	; 9
     348:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_void_send>
     34c:	89 85       	ldd	r24, Y+9	; 0x09
     34e:	83 7f       	andi	r24, 0xF3	; 243
     350:	8f 7e       	andi	r24, 0xEF	; 239
     352:	89 87       	std	Y+9, r24	; 0x09
     354:	e1 2c       	mov	r14, r1
     356:	f1 2c       	mov	r15, r1
     358:	87 01       	movw	r16, r14
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	68 e0       	ldi	r22, 0x08	; 8
     360:	ce 01       	movw	r24, r28
     362:	09 96       	adiw	r24, 0x09	; 9
     364:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_void_send>
     368:	1a ef       	ldi	r17, 0xFA	; 250
     36a:	e1 2e       	mov	r14, r17
     36c:	15 e0       	ldi	r17, 0x05	; 5
     36e:	f1 2e       	mov	r15, r17
     370:	00 e0       	ldi	r16, 0x00	; 0
     372:	10 e0       	ldi	r17, 0x00	; 0
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	ce 01       	movw	r24, r28
     37c:	09 96       	adiw	r24, 0x09	; 9
     37e:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_void_send>
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	62 e0       	ldi	r22, 0x02	; 2
     388:	ce 01       	movw	r24, r28
     38a:	09 96       	adiw	r24, 0x09	; 9
     38c:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_void_send>
     390:	89 85       	ldd	r24, Y+9	; 0x09
     392:	81 60       	ori	r24, 0x01	; 1
     394:	8d 7f       	andi	r24, 0xFD	; 253
     396:	89 87       	std	Y+9, r24	; 0x09
     398:	17 e2       	ldi	r17, 0x27	; 39
     39a:	e1 2e       	mov	r14, r17
     39c:	f1 2c       	mov	r15, r1
     39e:	00 e0       	ldi	r16, 0x00	; 0
     3a0:	10 e0       	ldi	r17, 0x00	; 0
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	66 e0       	ldi	r22, 0x06	; 6
     3a8:	ce 01       	movw	r24, r28
     3aa:	09 96       	adiw	r24, 0x09	; 9
     3ac:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_void_send>
     3b0:	88 e0       	ldi	r24, 0x08	; 8
     3b2:	fe 01       	movw	r30, r28
     3b4:	39 96       	adiw	r30, 0x09	; 9
     3b6:	de 01       	movw	r26, r28
     3b8:	11 96       	adiw	r26, 0x01	; 1
     3ba:	01 90       	ld	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	8a 95       	dec	r24
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <HLCD_HLCD_t_LcdCreate+0x10c>
     3c2:	29 81       	ldd	r18, Y+1	; 0x01
     3c4:	3a 81       	ldd	r19, Y+2	; 0x02
     3c6:	4b 81       	ldd	r20, Y+3	; 0x03
     3c8:	5c 81       	ldd	r21, Y+4	; 0x04
     3ca:	6d 81       	ldd	r22, Y+5	; 0x05
     3cc:	7e 81       	ldd	r23, Y+6	; 0x06
     3ce:	8f 81       	ldd	r24, Y+7	; 0x07
     3d0:	98 85       	ldd	r25, Y+8	; 0x08
     3d2:	60 96       	adiw	r28, 0x10	; 16
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	08 95       	ret

000003ee <HLCD_void_DisplayOn>:
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	fc 01       	movw	r30, r24
     3f8:	90 81       	ld	r25, Z
     3fa:	94 60       	ori	r25, 0x04	; 4
     3fc:	90 83       	st	Z, r25
     3fe:	93 fb       	bst	r25, 3
     400:	66 27       	eor	r22, r22
     402:	60 f9       	bld	r22, 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	66 0f       	add	r22, r22
     408:	77 1f       	adc	r23, r23
     40a:	92 95       	swap	r25
     40c:	91 70       	andi	r25, 0x01	; 1
     40e:	6c 60       	ori	r22, 0x0C	; 12
     410:	69 2b       	or	r22, r25
     412:	e1 2c       	mov	r14, r1
     414:	f1 2c       	mov	r15, r1
     416:	87 01       	movw	r16, r14
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	cf 01       	movw	r24, r30
     41e:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_void_send>
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	08 95       	ret

0000042c <HLCD_void_WriteCharacter>:
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	1b e2       	ldi	r17, 0x2B	; 43
     436:	e1 2e       	mov	r14, r17
     438:	f1 2c       	mov	r15, r1
     43a:	00 e0       	ldi	r16, 0x00	; 0
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_void_send>
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
     44c:	ef 90       	pop	r14
     44e:	08 95       	ret

00000450 <HLCD_void_WriteString>:
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	8c 01       	movw	r16, r24
     45a:	eb 01       	movw	r28, r22
     45c:	04 c0       	rjmp	.+8      	; 0x466 <HLCD_void_WriteString+0x16>
     45e:	c8 01       	movw	r24, r16
     460:	0e 94 16 02 	call	0x42c	; 0x42c <HLCD_void_WriteCharacter>
     464:	21 96       	adiw	r28, 0x01	; 1
     466:	68 81       	ld	r22, Y
     468:	61 11       	cpse	r22, r1
     46a:	f9 cf       	rjmp	.-14     	; 0x45e <HLCD_void_WriteString+0xe>
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	08 95       	ret

00000476 <HLCD_void_setCursor>:
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	20 e4       	ldi	r18, 0x40	; 64
     480:	42 9f       	mul	r20, r18
     482:	60 0d       	add	r22, r0
     484:	11 24       	eor	r1, r1
     486:	60 68       	ori	r22, 0x80	; 128
     488:	17 e2       	ldi	r17, 0x27	; 39
     48a:	e1 2e       	mov	r14, r17
     48c:	f1 2c       	mov	r15, r1
     48e:	00 e0       	ldi	r16, 0x00	; 0
     490:	10 e0       	ldi	r17, 0x00	; 0
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_void_send>
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	08 95       	ret

000004a4 <HLCD_void_WriteNumber>:

void HLCD_void_WriteNumber(HLCD_t *A_HLCD_t_lcd,s32 A_s32_number){
     4a4:	8f 92       	push	r8
     4a6:	9f 92       	push	r9
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ec 01       	movw	r28, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	ba 01       	movw	r22, r20
	u8 L_u8_signFlag;
	s32 L_s32_ReversedNum =0;
	u8 L_digitsCounter =0;
	
	if(A_s32_number >= 0){
     4c2:	99 23       	and	r25, r25
     4c4:	4c f4       	brge	.+18     	; 0x4d8 <HLCD_void_WriteNumber+0x34>
		L_u8_signFlag = 0;
	}else{
		L_u8_signFlag = 1;
		A_s32_number = A_s32_number * -1;
     4c6:	90 95       	com	r25
     4c8:	80 95       	com	r24
     4ca:	70 95       	com	r23
     4cc:	61 95       	neg	r22
     4ce:	7f 4f       	sbci	r23, 0xFF	; 255
     4d0:	8f 4f       	sbci	r24, 0xFF	; 255
     4d2:	9f 4f       	sbci	r25, 0xFF	; 255
	u8 L_digitsCounter =0;
	
	if(A_s32_number >= 0){
		L_u8_signFlag = 0;
	}else{
		L_u8_signFlag = 1;
     4d4:	01 e0       	ldi	r16, 0x01	; 1
     4d6:	01 c0       	rjmp	.+2      	; 0x4da <HLCD_void_WriteNumber+0x36>
	u8 L_u8_signFlag;
	s32 L_s32_ReversedNum =0;
	u8 L_digitsCounter =0;
	
	if(A_s32_number >= 0){
		L_u8_signFlag = 0;
     4d8:	00 e0       	ldi	r16, 0x00	; 0
	}else{
		L_u8_signFlag = 1;
     4da:	10 e0       	ldi	r17, 0x00	; 0
     4dc:	c1 2c       	mov	r12, r1
     4de:	d1 2c       	mov	r13, r1
     4e0:	76 01       	movw	r14, r12
		A_s32_number = A_s32_number * -1;
	}
	
	do 
	{
		L_digitsCounter++;
     4e2:	1f 5f       	subi	r17, 0xFF	; 255
		L_s32_ReversedNum = L_s32_ReversedNum*10 + A_s32_number%10;
     4e4:	cc 0c       	add	r12, r12
     4e6:	dd 1c       	adc	r13, r13
     4e8:	ee 1c       	adc	r14, r14
     4ea:	ff 1c       	adc	r15, r15
     4ec:	46 01       	movw	r8, r12
     4ee:	57 01       	movw	r10, r14
     4f0:	88 0c       	add	r8, r8
     4f2:	99 1c       	adc	r9, r9
     4f4:	aa 1c       	adc	r10, r10
     4f6:	bb 1c       	adc	r11, r11
     4f8:	88 0c       	add	r8, r8
     4fa:	99 1c       	adc	r9, r9
     4fc:	aa 1c       	adc	r10, r10
     4fe:	bb 1c       	adc	r11, r11
     500:	c8 0c       	add	r12, r8
     502:	d9 1c       	adc	r13, r9
     504:	ea 1c       	adc	r14, r10
     506:	fb 1c       	adc	r15, r11
     508:	2a e0       	ldi	r18, 0x0A	; 10
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	0e 94 a5 0c 	call	0x194a	; 0x194a <__divmodsi4>
     514:	c6 0e       	add	r12, r22
     516:	d7 1e       	adc	r13, r23
     518:	e8 1e       	adc	r14, r24
     51a:	f9 1e       	adc	r15, r25
		A_s32_number = A_s32_number / 10;
     51c:	62 2f       	mov	r22, r18
     51e:	73 2f       	mov	r23, r19
     520:	84 2f       	mov	r24, r20
     522:	95 2f       	mov	r25, r21
		
	} while (A_s32_number != 0);
     524:	61 15       	cp	r22, r1
     526:	71 05       	cpc	r23, r1
     528:	81 05       	cpc	r24, r1
     52a:	91 05       	cpc	r25, r1
     52c:	d1 f6       	brne	.-76     	; 0x4e2 <HLCD_void_WriteNumber+0x3e>
	
	if(L_u8_signFlag == 1){
     52e:	01 30       	cpi	r16, 0x01	; 1
     530:	d1 f4       	brne	.+52     	; 0x566 <HLCD_void_WriteNumber+0xc2>
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'-');
     532:	6d e2       	ldi	r22, 0x2D	; 45
     534:	ce 01       	movw	r24, r28
     536:	0e 94 16 02 	call	0x42c	; 0x42c <HLCD_void_WriteCharacter>
     53a:	15 c0       	rjmp	.+42     	; 0x566 <HLCD_void_WriteNumber+0xc2>
	}
	
	while(L_digitsCounter > 0){
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'0'+  L_s32_ReversedNum%10);
     53c:	c7 01       	movw	r24, r14
     53e:	b6 01       	movw	r22, r12
     540:	2a e0       	ldi	r18, 0x0A	; 10
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	0e 94 a5 0c 	call	0x194a	; 0x194a <__divmodsi4>
     54c:	92 2e       	mov	r9, r18
     54e:	a3 2e       	mov	r10, r19
     550:	b4 2e       	mov	r11, r20
     552:	05 2f       	mov	r16, r21
     554:	60 5d       	subi	r22, 0xD0	; 208
     556:	ce 01       	movw	r24, r28
     558:	0e 94 16 02 	call	0x42c	; 0x42c <HLCD_void_WriteCharacter>
		L_s32_ReversedNum = L_s32_ReversedNum / 10;
     55c:	c9 2c       	mov	r12, r9
     55e:	da 2c       	mov	r13, r10
     560:	eb 2c       	mov	r14, r11
     562:	f0 2e       	mov	r15, r16
		L_digitsCounter--;
     564:	11 50       	subi	r17, 0x01	; 1
	
	if(L_u8_signFlag == 1){
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'-');
	}
	
	while(L_digitsCounter > 0){
     566:	11 11       	cpse	r17, r1
     568:	e9 cf       	rjmp	.-46     	; 0x53c <HLCD_void_WriteNumber+0x98>
		HLCD_void_WriteCharacter(A_HLCD_t_lcd,'0'+  L_s32_ReversedNum%10);
		L_s32_ReversedNum = L_s32_ReversedNum / 10;
		L_digitsCounter--;
	}
	
}
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	cf 90       	pop	r12
     57a:	bf 90       	pop	r11
     57c:	af 90       	pop	r10
     57e:	9f 90       	pop	r9
     580:	8f 90       	pop	r8
     582:	08 95       	ret

00000584 <HLED_HLed_t_Create>:

#include "LED_config.h"
#include "LED_interface.h"
#include "LED_private.h"

HLed_t HLED_HLed_t_Create(Pin_t A_Pin_t_pin, HLedPolarity_t A_HLedPolarity_t_polarity){
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	c8 2f       	mov	r28, r24
     58a:	d6 2f       	mov	r29, r22
	HLed_t L_led ;
	
	L_led.pin = A_Pin_t_pin;
	L_led.polarity = A_HLedPolarity_t_polarity;
	
	MDIO_voidSetPinDir(A_Pin_t_pin,OUTPUT);
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
	
	return L_led;
}
     592:	8c 2f       	mov	r24, r28
     594:	9d 2f       	mov	r25, r29
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <HLED_void_TurnOn>:

void HLED_void_TurnOn(HLed_t *A_Pin_t_pin){
	switch(A_Pin_t_pin->polarity){
     59c:	fc 01       	movw	r30, r24
     59e:	21 81       	ldd	r18, Z+1	; 0x01
     5a0:	22 23       	and	r18, r18
     5a2:	39 f0       	breq	.+14     	; 0x5b2 <HLED_void_TurnOn+0x16>
     5a4:	21 30       	cpi	r18, 0x01	; 1
     5a6:	51 f4       	brne	.+20     	; 0x5bc <HLED_void_TurnOn+0x20>
		case HLED_ActiveHigh:
			MDIO_voidSetPinVal(A_Pin_t_pin->pin,HIGH); break;
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	80 81       	ld	r24, Z
     5ac:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     5b0:	08 95       	ret
		case HLED_ActiveLow:
			MDIO_voidSetPinVal(A_Pin_t_pin->pin,LOW); break;	
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     5bc:	08 95       	ret

000005be <HLED_void_TurnOff>:
	}
}

	
void HLED_void_TurnOff(HLed_t *A_Pin_t_pin){
	switch(A_Pin_t_pin->polarity){
     5be:	fc 01       	movw	r30, r24
     5c0:	21 81       	ldd	r18, Z+1	; 0x01
     5c2:	22 23       	and	r18, r18
     5c4:	39 f0       	breq	.+14     	; 0x5d4 <HLED_void_TurnOff+0x16>
     5c6:	21 30       	cpi	r18, 0x01	; 1
     5c8:	51 f4       	brne	.+20     	; 0x5de <HLED_void_TurnOff+0x20>
		case HLED_ActiveHigh:
		MDIO_voidSetPinVal(A_Pin_t_pin->pin,LOW); break;
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     5d2:	08 95       	ret
		case HLED_ActiveLow:
		MDIO_voidSetPinVal(A_Pin_t_pin->pin,HIGH); break;
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	fc 01       	movw	r30, r24
     5d8:	80 81       	ld	r24, Z
     5da:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
     5de:	08 95       	ret

000005e0 <HUS_voidInit>:
#include "US_config.h"
#include "US_interface.h"
#include "US_private.h"

void HUS_voidInit(void){
	MICU_voidInit();
     5e0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <MICU_voidInit>
	MDIO_voidSetPinDir(HUS_TRIGGER_PIN,OUTPUT);
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	87 eb       	ldi	r24, 0xB7	; 183
     5e8:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
     5ec:	08 95       	ret

000005ee <HUS_u32ReadDistanceCM>:
}

u32 HUS_u32ReadDistanceCM(void){
     5ee:	af 92       	push	r10
     5f0:	bf 92       	push	r11
     5f2:	cf 92       	push	r12
     5f4:	df 92       	push	r13
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
	u32 L_u64Distance;
	u64 L_u64Time;
		
	MDIO_voidSetPinVal(HUS_TRIGGER_PIN,HIGH);
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	87 eb       	ldi	r24, 0xB7	; 183
     602:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
	MDELAY_void_micro(100);
     606:	64 e6       	ldi	r22, 0x64	; 100
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MDELAY_void_micro>
	MDIO_voidSetPinVal(HUS_TRIGGER_PIN,LOW);
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	87 eb       	ldi	r24, 0xB7	; 183
     616:	0e 94 84 08 	call	0x1108	; 0x1108 <MDIO_voidSetPinVal>
	MDELAY_void_micro(100);
     61a:	64 e6       	ldi	r22, 0x64	; 100
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MDELAY_void_micro>

	L_u64Time = MICU_u64ReadTimeHighMicro();
     626:	0e 94 0d 09 	call	0x121a	; 0x121a <MICU_u64ReadTimeHighMicro>
	L_u64Distance = (L_u64Time * HUS_WAVE_SPEED * 0.5) / 10000;
     62a:	0f 2e       	mov	r0, r31
     62c:	fa e5       	ldi	r31, 0x5A	; 90
     62e:	af 2e       	mov	r10, r31
     630:	f0 2d       	mov	r31, r0
     632:	bb 24       	eor	r11, r11
     634:	b3 94       	inc	r11
     636:	c1 2c       	mov	r12, r1
     638:	d1 2c       	mov	r13, r1
     63a:	e1 2c       	mov	r14, r1
     63c:	f1 2c       	mov	r15, r1
     63e:	00 e0       	ldi	r16, 0x00	; 0
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	0e 94 cf 0c 	call	0x199e	; 0x199e <__muldi3>
     646:	0e 94 87 0b 	call	0x170e	; 0x170e <__floatundisf>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	5f e3       	ldi	r21, 0x3F	; 63
     652:	0e 94 16 0c 	call	0x182c	; 0x182c <__mulsf3>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e4       	ldi	r19, 0x40	; 64
     65a:	4c e1       	ldi	r20, 0x1C	; 28
     65c:	56 e4       	ldi	r21, 0x46	; 70
     65e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__divsf3>
     662:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fixunssfsi>
	
	return L_u64Distance;
}
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	bf 90       	pop	r11
     674:	af 90       	pop	r10
     676:	08 95       	ret

00000678 <UART_onReceive>:
	

}

void UART_onReceive(u32 A_u32Data){
	if(A_u32Data == POWER_CHAR){
     678:	61 34       	cpi	r22, 0x41	; 65
     67a:	71 05       	cpc	r23, r1
     67c:	81 05       	cpc	r24, r1
     67e:	91 05       	cpc	r25, r1
     680:	11 f4       	brne	.+4      	; 0x686 <UART_onReceive+0xe>
		G_ESystemPower = sysOn;
     682:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <G_ESystemPower>
     686:	08 95       	ret

00000688 <Timer2_callback>:
	}
}

void Timer2_callback(){
     688:	af 92       	push	r10
     68a:	bf 92       	push	r11
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
	G_u64MillisCounter++;
     698:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <G_u64MillisCounter>
     69c:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <G_u64MillisCounter+0x1>
     6a0:	40 91 b4 00 	lds	r20, 0x00B4	; 0x8000b4 <G_u64MillisCounter+0x2>
     6a4:	50 91 b5 00 	lds	r21, 0x00B5	; 0x8000b5 <G_u64MillisCounter+0x3>
     6a8:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <G_u64MillisCounter+0x4>
     6ac:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <G_u64MillisCounter+0x5>
     6b0:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <G_u64MillisCounter+0x6>
     6b4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <G_u64MillisCounter+0x7>
     6b8:	a1 e0       	ldi	r26, 0x01	; 1
     6ba:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__adddi3_s8>
     6be:	20 93 b2 00 	sts	0x00B2, r18	; 0x8000b2 <G_u64MillisCounter>
     6c2:	30 93 b3 00 	sts	0x00B3, r19	; 0x8000b3 <G_u64MillisCounter+0x1>
     6c6:	40 93 b4 00 	sts	0x00B4, r20	; 0x8000b4 <G_u64MillisCounter+0x2>
     6ca:	50 93 b5 00 	sts	0x00B5, r21	; 0x8000b5 <G_u64MillisCounter+0x3>
     6ce:	60 93 b6 00 	sts	0x00B6, r22	; 0x8000b6 <G_u64MillisCounter+0x4>
     6d2:	70 93 b7 00 	sts	0x00B7, r23	; 0x8000b7 <G_u64MillisCounter+0x5>
     6d6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <G_u64MillisCounter+0x6>
     6da:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <G_u64MillisCounter+0x7>
	
	if(G_ESystemPower == sysOn){
     6de:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <G_ESystemPower>
     6e2:	81 11       	cpse	r24, r1
     6e4:	2a c0       	rjmp	.+84     	; 0x73a <Timer2_callback+0xb2>
		G_U64MillmetersCounter = G_U64MillmetersCounter + G_u8GasDutyCycle;
     6e6:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <G_u8GasDutyCycle>
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 90 a9 00 	lds	r10, 0x00A9	; 0x8000a9 <G_U64MillmetersCounter>
     6fa:	b0 90 aa 00 	lds	r11, 0x00AA	; 0x8000aa <G_U64MillmetersCounter+0x1>
     6fe:	c0 90 ab 00 	lds	r12, 0x00AB	; 0x8000ab <G_U64MillmetersCounter+0x2>
     702:	d0 90 ac 00 	lds	r13, 0x00AC	; 0x8000ac <G_U64MillmetersCounter+0x3>
     706:	e0 90 ad 00 	lds	r14, 0x00AD	; 0x8000ad <G_U64MillmetersCounter+0x4>
     70a:	f0 90 ae 00 	lds	r15, 0x00AE	; 0x8000ae <G_U64MillmetersCounter+0x5>
     70e:	00 91 af 00 	lds	r16, 0x00AF	; 0x8000af <G_U64MillmetersCounter+0x6>
     712:	10 91 b0 00 	lds	r17, 0x00B0	; 0x8000b0 <G_U64MillmetersCounter+0x7>
     716:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__adddi3>
     71a:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <G_U64MillmetersCounter>
     71e:	30 93 aa 00 	sts	0x00AA, r19	; 0x8000aa <G_U64MillmetersCounter+0x1>
     722:	40 93 ab 00 	sts	0x00AB, r20	; 0x8000ab <G_U64MillmetersCounter+0x2>
     726:	50 93 ac 00 	sts	0x00AC, r21	; 0x8000ac <G_U64MillmetersCounter+0x3>
     72a:	60 93 ad 00 	sts	0x00AD, r22	; 0x8000ad <G_U64MillmetersCounter+0x4>
     72e:	70 93 ae 00 	sts	0x00AE, r23	; 0x8000ae <G_U64MillmetersCounter+0x5>
     732:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <G_U64MillmetersCounter+0x6>
     736:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <G_U64MillmetersCounter+0x7>
	}
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	08 95       	ret

0000074c <App_voidInit>:
			App_LCD();
	   }
   }
}

void App_voidInit(){
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	28 97       	sbiw	r28, 0x08	; 8
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
	//init vars
	G_ESystemPower = sysOff;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <G_ESystemPower>
	G_EGearBox = gearN;
     766:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <G_EGearBox>
	G_EBAS = BAS_OFF;
     76a:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <G_EBAS>
	G_ESL = SL_OFF;
     76e:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <G_ESL>
	G_ECCS = CCS_OFF;
     772:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <G_ECCS>
	G_EDRIVE_MONITOR = DRIVE_MONITOR_OFF;
     776:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <G_EDRIVE_MONITOR>
	
	//init peripherals
	MDIO_voidInit();
     77a:	0e 94 2c 08 	call	0x1058	; 0x1058 <MDIO_voidInit>
	MADC_voidInit();
     77e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <MADC_voidInit>
	MUART_voidInit();
     782:	0e 94 90 0a 	call	0x1520	; 0x1520 <MUART_voidInit>
	MTIMER_2_voidInit();
     786:	0e 94 29 0a 	call	0x1452	; 0x1452 <MTIMER_2_voidInit>
	MUART_voidSetRXCallback(UART_onReceive);
     78a:	8c e3       	ldi	r24, 0x3C	; 60
     78c:	93 e0       	ldi	r25, 0x03	; 3
     78e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <MUART_voidSetRXCallback>
	MTIMER_2_voidSetCallback(Timer2_callback);
     792:	84 e4       	ldi	r24, 0x44	; 68
     794:	93 e0       	ldi	r25, 0x03	; 3
     796:	0e 94 3d 0a 	call	0x147a	; 0x147a <MTIMER_2_voidSetCallback>
	
	HUS_voidInit();
     79a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <HUS_voidInit>
	
	
	//init var
	G_ledBAS = HLED_HLed_t_Create(PinD3,HLED_ActiveHigh);
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	83 ed       	ldi	r24, 0xD3	; 211
     7a2:	0e 94 c2 02 	call	0x584	; 0x584 <HLED_HLed_t_Create>
     7a6:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <G_ledBAS+0x1>
     7aa:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <G_ledBAS>
	G_ledSL = HLED_HLed_t_Create(PinC2,HLED_ActiveHigh);
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	82 ec       	ldi	r24, 0xC2	; 194
     7b2:	0e 94 c2 02 	call	0x584	; 0x584 <HLED_HLed_t_Create>
     7b6:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <G_ledSL+0x1>
     7ba:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <G_ledSL>
	G_ledCCS = HLED_HLed_t_Create(PinC7,HLED_ActiveHigh);
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	87 ec       	ldi	r24, 0xC7	; 199
     7c2:	0e 94 c2 02 	call	0x584	; 0x584 <HLED_HLed_t_Create>
     7c6:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <G_ledCCS+0x1>
     7ca:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <G_ledCCS>
	
	Pin_t L_arrLcdDataPins[] ={PinA7,PinA6,PinA5,PinA4,PinC3,PinC5,PinC1,PinC0};
     7ce:	88 e0       	ldi	r24, 0x08	; 8
     7d0:	e0 e7       	ldi	r30, 0x70	; 112
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	de 01       	movw	r26, r28
     7d6:	11 96       	adiw	r26, 0x01	; 1
     7d8:	01 90       	ld	r0, Z+
     7da:	0d 92       	st	X+, r0
     7dc:	8a 95       	dec	r24
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <App_voidInit+0x8c>
	G_lcd = HLCD_HLCD_t_LcdCreate(PinB1,PinB2,PinB3,L_arrLcdDataPins);
     7e0:	9e 01       	movw	r18, r28
     7e2:	2f 5f       	subi	r18, 0xFF	; 255
     7e4:	3f 4f       	sbci	r19, 0xFF	; 255
     7e6:	43 eb       	ldi	r20, 0xB3	; 179
     7e8:	62 eb       	ldi	r22, 0xB2	; 178
     7ea:	81 eb       	ldi	r24, 0xB1	; 177
     7ec:	0e 94 57 01 	call	0x2ae	; 0x2ae <HLCD_HLCD_t_LcdCreate>
     7f0:	e1 ee       	ldi	r30, 0xE1	; 225
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	20 83       	st	Z, r18
     7f6:	31 83       	std	Z+1, r19	; 0x01
     7f8:	42 83       	std	Z+2, r20	; 0x02
     7fa:	53 83       	std	Z+3, r21	; 0x03
     7fc:	64 83       	std	Z+4, r22	; 0x04
     7fe:	75 83       	std	Z+5, r23	; 0x05
     800:	86 83       	std	Z+6, r24	; 0x06
     802:	97 83       	std	Z+7, r25	; 0x07

	G_buttonSL = HBUTTON_HBUTTON_t_Create(PinB0,HBUTTON_inputInternalPullUp);
     804:	62 e0       	ldi	r22, 0x02	; 2
     806:	80 eb       	ldi	r24, 0xB0	; 176
     808:	0e 94 49 00 	call	0x92	; 0x92 <HBUTTON_HBUTTON_t_Create>
     80c:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <G_buttonSL+0x1>
     810:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <G_buttonSL>
	G_buttonCSS = HBUTTON_HBUTTON_t_Create(PinD5,HBUTTON_inputInternalPullUp);
     814:	62 e0       	ldi	r22, 0x02	; 2
     816:	85 ed       	ldi	r24, 0xD5	; 213
     818:	0e 94 49 00 	call	0x92	; 0x92 <HBUTTON_HBUTTON_t_Create>
     81c:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <G_buttonCSS+0x1>
     820:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <G_buttonCSS>
	G_buttonGearBox = HBUTTON_HBUTTON_t_Create(PinD2,HBUTTON_inputInternalPullUp);
     824:	62 e0       	ldi	r22, 0x02	; 2
     826:	82 ed       	ldi	r24, 0xD2	; 210
     828:	0e 94 49 00 	call	0x92	; 0x92 <HBUTTON_HBUTTON_t_Create>
     82c:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <G_buttonGearBox+0x1>
     830:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <G_buttonGearBox>

	G_alarm = HBUZZER_HBUZZER_t_Create(PinA3,HBUZZER_ActiveHigh);
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	83 ea       	ldi	r24, 0xA3	; 163
     838:	0e 94 80 00 	call	0x100	; 0x100 <HBUZZER_HBUZZER_t_Create>
     83c:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <G_alarm+0x1>
     840:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <G_alarm>

	HLCD_void_DisplayOn(&G_lcd);
     844:	81 ee       	ldi	r24, 0xE1	; 225
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HLCD_void_DisplayOn>


	//enable GI
	MGI_void_Enable();
     84c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <MGI_void_Enable>
}
     850:	28 96       	adiw	r28, 0x08	; 8
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <App_checkInput>:

void App_checkInput(){
     862:	3f 92       	push	r3
     864:	4f 92       	push	r4
     866:	5f 92       	push	r5
     868:	6f 92       	push	r6
     86a:	7f 92       	push	r7
     86c:	8f 92       	push	r8
     86e:	9f 92       	push	r9
     870:	af 92       	push	r10
     872:	bf 92       	push	r11
     874:	cf 92       	push	r12
     876:	df 92       	push	r13
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
	u32 L_u32Temp;
	
	//------ SL -------
	static u8 L_SL_Old, L_SL_New;
	
	L_SL_New = HBUTTON_HBUTTON_state_t_getButtonState(&G_buttonSL);
     884:	8d ec       	ldi	r24, 0xCD	; 205
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 5e 00 	call	0xbc	; 0xbc <HBUTTON_HBUTTON_state_t_getButtonState>
	if(L_SL_New == HBUTTON_pressed && L_SL_Old == HBUTTON_free){
     88c:	81 11       	cpse	r24, r1
     88e:	36 c0       	rjmp	.+108    	; 0x8fc <App_checkInput+0x9a>
     890:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <L_SL_Old.1886>
     894:	91 30       	cpi	r25, 0x01	; 1
     896:	91 f5       	brne	.+100    	; 0x8fc <App_checkInput+0x9a>
		G_u64TimeSnappedWhenLastChange = G_u64MillisCounter;
     898:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <G_u64MillisCounter>
     89c:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <G_u64TimeSnappedWhenLastChange>
     8a0:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <G_u64MillisCounter+0x1>
     8a4:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <G_u64TimeSnappedWhenLastChange+0x1>
     8a8:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <G_u64MillisCounter+0x2>
     8ac:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <G_u64TimeSnappedWhenLastChange+0x2>
     8b0:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <G_u64MillisCounter+0x3>
     8b4:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <G_u64TimeSnappedWhenLastChange+0x3>
     8b8:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <G_u64MillisCounter+0x4>
     8bc:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <G_u64TimeSnappedWhenLastChange+0x4>
     8c0:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <G_u64MillisCounter+0x5>
     8c4:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <G_u64TimeSnappedWhenLastChange+0x5>
     8c8:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <G_u64MillisCounter+0x6>
     8cc:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <G_u64TimeSnappedWhenLastChange+0x6>
     8d0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <G_u64MillisCounter+0x7>
     8d4:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <G_u64TimeSnappedWhenLastChange+0x7>
		if(G_ESL == SL_ON){
     8d8:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <G_ESL>
     8dc:	91 11       	cpse	r25, r1
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <App_checkInput+0x86>
			G_ESL = SL_OFF;
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <G_ESL>
     8e6:	0a c0       	rjmp	.+20     	; 0x8fc <App_checkInput+0x9a>
		}else if(G_EGearBox == gearD){
     8e8:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <G_EGearBox>
     8ec:	91 11       	cpse	r25, r1
     8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <App_checkInput+0x94>
			G_ESL = SL_ON;
     8f0:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <G_ESL>
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <App_checkInput+0x9a>
		}else{
			G_ESL = SL_OFF;
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <G_ESL>
		}
	}
	L_SL_Old = L_SL_New;
     8fc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <L_SL_Old.1886>
	//-------------------------
	
	//------ CCS -------
	static u8 L_CCS_Old, L_CCS_New;
	
	L_CCS_New = HBUTTON_HBUTTON_state_t_getButtonState(&G_buttonCSS);
     900:	89 ec       	ldi	r24, 0xC9	; 201
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 5e 00 	call	0xbc	; 0xbc <HBUTTON_HBUTTON_state_t_getButtonState>
	if(L_CCS_New == HBUTTON_pressed && L_CCS_Old == HBUTTON_free){
     908:	81 11       	cpse	r24, r1
     90a:	36 c0       	rjmp	.+108    	; 0x978 <App_checkInput+0x116>
     90c:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <L_CCS_Old.1888>
     910:	91 30       	cpi	r25, 0x01	; 1
     912:	91 f5       	brne	.+100    	; 0x978 <App_checkInput+0x116>
		G_u64TimeSnappedWhenLastChange = G_u64MillisCounter;
     914:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <G_u64MillisCounter>
     918:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <G_u64TimeSnappedWhenLastChange>
     91c:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <G_u64MillisCounter+0x1>
     920:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <G_u64TimeSnappedWhenLastChange+0x1>
     924:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <G_u64MillisCounter+0x2>
     928:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <G_u64TimeSnappedWhenLastChange+0x2>
     92c:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <G_u64MillisCounter+0x3>
     930:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <G_u64TimeSnappedWhenLastChange+0x3>
     934:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <G_u64MillisCounter+0x4>
     938:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <G_u64TimeSnappedWhenLastChange+0x4>
     93c:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <G_u64MillisCounter+0x5>
     940:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <G_u64TimeSnappedWhenLastChange+0x5>
     944:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <G_u64MillisCounter+0x6>
     948:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <G_u64TimeSnappedWhenLastChange+0x6>
     94c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <G_u64MillisCounter+0x7>
     950:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <G_u64TimeSnappedWhenLastChange+0x7>
		if(G_ECCS == CCS_ON){
     954:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <G_ECCS>
     958:	91 11       	cpse	r25, r1
     95a:	04 c0       	rjmp	.+8      	; 0x964 <App_checkInput+0x102>
			G_ECCS = CCS_OFF;
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <G_ECCS>
     962:	0a c0       	rjmp	.+20     	; 0x978 <App_checkInput+0x116>
		}else if(G_EGearBox == gearD){
     964:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <G_EGearBox>
     968:	91 11       	cpse	r25, r1
     96a:	03 c0       	rjmp	.+6      	; 0x972 <App_checkInput+0x110>
			G_ECCS = CCS_ON;
     96c:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <G_ECCS>
     970:	03 c0       	rjmp	.+6      	; 0x978 <App_checkInput+0x116>
		}else{
			G_ECCS = CCS_OFF;
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <G_ECCS>
		}
	}
	L_CCS_Old = L_CCS_New;
     978:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <L_CCS_Old.1888>
	
	//------ GEAR BOX -------
	
	static u8 L_GearBox_Old, L_GearBox_New;
	
	L_GearBox_New = HBUTTON_HBUTTON_state_t_getButtonState(&G_buttonGearBox);
     97c:	83 ed       	ldi	r24, 0xD3	; 211
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 5e 00 	call	0xbc	; 0xbc <HBUTTON_HBUTTON_state_t_getButtonState>
	if(L_GearBox_New == HBUTTON_pressed && L_GearBox_Old == HBUTTON_free){
     984:	81 11       	cpse	r24, r1
     986:	3c c0       	rjmp	.+120    	; 0xa00 <App_checkInput+0x19e>
     988:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <L_GearBox_Old.1890>
     98c:	91 30       	cpi	r25, 0x01	; 1
     98e:	c1 f5       	brne	.+112    	; 0xa00 <App_checkInput+0x19e>
		G_u64TimeSnappedWhenLastChange = G_u64MillisCounter;
     990:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <G_u64MillisCounter>
     994:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <G_u64TimeSnappedWhenLastChange>
     998:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <G_u64MillisCounter+0x1>
     99c:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <G_u64TimeSnappedWhenLastChange+0x1>
     9a0:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <G_u64MillisCounter+0x2>
     9a4:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <G_u64TimeSnappedWhenLastChange+0x2>
     9a8:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <G_u64MillisCounter+0x3>
     9ac:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <G_u64TimeSnappedWhenLastChange+0x3>
     9b0:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <G_u64MillisCounter+0x4>
     9b4:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <G_u64TimeSnappedWhenLastChange+0x4>
     9b8:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <G_u64MillisCounter+0x5>
     9bc:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <G_u64TimeSnappedWhenLastChange+0x5>
     9c0:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <G_u64MillisCounter+0x6>
     9c4:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <G_u64TimeSnappedWhenLastChange+0x6>
     9c8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <G_u64MillisCounter+0x7>
     9cc:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <G_u64TimeSnappedWhenLastChange+0x7>
		switch(G_EGearBox){
     9d0:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <G_EGearBox>
     9d4:	91 30       	cpi	r25, 0x01	; 1
     9d6:	31 f0       	breq	.+12     	; 0x9e4 <App_checkInput+0x182>
     9d8:	40 f0       	brcs	.+16     	; 0x9ea <App_checkInput+0x188>
     9da:	92 30       	cpi	r25, 0x02	; 2
     9dc:	51 f0       	breq	.+20     	; 0x9f2 <App_checkInput+0x190>
     9de:	93 30       	cpi	r25, 0x03	; 3
     9e0:	61 f0       	breq	.+24     	; 0x9fa <App_checkInput+0x198>
     9e2:	0e c0       	rjmp	.+28     	; 0xa00 <App_checkInput+0x19e>
			case gearN: G_EGearBox = gearD; break;
     9e4:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <G_EGearBox>
     9e8:	0b c0       	rjmp	.+22     	; 0xa00 <App_checkInput+0x19e>
			case gearD: G_EGearBox = gearP; break;
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <G_EGearBox>
     9f0:	07 c0       	rjmp	.+14     	; 0xa00 <App_checkInput+0x19e>
			case gearP: G_EGearBox = gearR; break;
     9f2:	93 e0       	ldi	r25, 0x03	; 3
     9f4:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <G_EGearBox>
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <App_checkInput+0x19e>
			case gearR: G_EGearBox = gearN; break;
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <G_EGearBox>
		}
			
	}
	L_GearBox_Old = L_GearBox_New;
     a00:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <L_GearBox_Old.1890>
	//-------------------------

	
	//------- Gas Pot ---------
	static L_u32GasDCOld =  0;
	G_u8GasDutyCycle = (MADC_u32ReadVoltage(MADC_SINGLE_CHANNEL_1) * 100 / 1023);
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	0e 94 9f 07 	call	0xf3e	; 0xf3e <MADC_u32ReadVoltage>
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	a4 e6       	ldi	r26, 0x64	; 100
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__muluhisi3>
     a16:	2f ef       	ldi	r18, 0xFF	; 255
     a18:	33 e0       	ldi	r19, 0x03	; 3
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     a22:	c2 2f       	mov	r28, r18
     a24:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <G_u8GasDutyCycle>
	
	if((G_u64MillisCounter / 500) % 2){
     a28:	30 90 b2 00 	lds	r3, 0x00B2	; 0x8000b2 <G_u64MillisCounter>
     a2c:	40 90 b3 00 	lds	r4, 0x00B3	; 0x8000b3 <G_u64MillisCounter+0x1>
     a30:	50 90 b4 00 	lds	r5, 0x00B4	; 0x8000b4 <G_u64MillisCounter+0x2>
     a34:	60 90 b5 00 	lds	r6, 0x00B5	; 0x8000b5 <G_u64MillisCounter+0x3>
     a38:	70 90 b6 00 	lds	r7, 0x00B6	; 0x8000b6 <G_u64MillisCounter+0x4>
     a3c:	80 90 b7 00 	lds	r8, 0x00B7	; 0x8000b7 <G_u64MillisCounter+0x5>
     a40:	90 90 b8 00 	lds	r9, 0x00B8	; 0x8000b8 <G_u64MillisCounter+0x6>
     a44:	d0 91 b9 00 	lds	r29, 0x00B9	; 0x8000b9 <G_u64MillisCounter+0x7>
     a48:	0f 2e       	mov	r0, r31
     a4a:	f4 ef       	ldi	r31, 0xF4	; 244
     a4c:	af 2e       	mov	r10, r31
     a4e:	f0 2d       	mov	r31, r0
     a50:	bb 24       	eor	r11, r11
     a52:	b3 94       	inc	r11
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	e1 2c       	mov	r14, r1
     a5a:	f1 2c       	mov	r15, r1
     a5c:	00 e0       	ldi	r16, 0x00	; 0
     a5e:	10 e0       	ldi	r17, 0x00	; 0
     a60:	23 2d       	mov	r18, r3
     a62:	34 2d       	mov	r19, r4
     a64:	45 2d       	mov	r20, r5
     a66:	56 2d       	mov	r21, r6
     a68:	67 2d       	mov	r22, r7
     a6a:	78 2d       	mov	r23, r8
     a6c:	89 2d       	mov	r24, r9
     a6e:	9d 2f       	mov	r25, r29
     a70:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__udivdi3>
     a74:	21 70       	andi	r18, 0x01	; 1
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__cmpdi2_s8>
     a8a:	79 f1       	breq	.+94     	; 0xaea <App_checkInput+0x288>
		L_u32Temp = ABS(G_u8GasDutyCycle - L_u32GasDCOld);
     a8c:	2c 2f       	mov	r18, r28
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__data_end>
     a94:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <__data_end+0x1>
     a98:	a9 01       	movw	r20, r18
     a9a:	48 1b       	sub	r20, r24
     a9c:	59 0b       	sbc	r21, r25
     a9e:	ca 01       	movw	r24, r20
     aa0:	99 23       	and	r25, r25
     aa2:	24 f4       	brge	.+8      	; 0xaac <App_checkInput+0x24a>
     aa4:	88 27       	eor	r24, r24
     aa6:	99 27       	eor	r25, r25
     aa8:	84 1b       	sub	r24, r20
     aaa:	95 0b       	sbc	r25, r21
     aac:	09 2e       	mov	r0, r25
     aae:	00 0c       	add	r0, r0
     ab0:	aa 0b       	sbc	r26, r26
     ab2:	bb 0b       	sbc	r27, r27
		//if change is > 10%, so the ADC is changed
		if(L_u32Temp > 5){
     ab4:	06 97       	sbiw	r24, 0x06	; 6
     ab6:	a1 05       	cpc	r26, r1
     ab8:	b1 05       	cpc	r27, r1
     aba:	98 f0       	brcs	.+38     	; 0xae2 <App_checkInput+0x280>
			G_u64TimeSnappedWhenLastChange = G_u64MillisCounter;
     abc:	30 92 a1 00 	sts	0x00A1, r3	; 0x8000a1 <G_u64TimeSnappedWhenLastChange>
     ac0:	40 92 a2 00 	sts	0x00A2, r4	; 0x8000a2 <G_u64TimeSnappedWhenLastChange+0x1>
     ac4:	50 92 a3 00 	sts	0x00A3, r5	; 0x8000a3 <G_u64TimeSnappedWhenLastChange+0x2>
     ac8:	60 92 a4 00 	sts	0x00A4, r6	; 0x8000a4 <G_u64TimeSnappedWhenLastChange+0x3>
     acc:	70 92 a5 00 	sts	0x00A5, r7	; 0x8000a5 <G_u64TimeSnappedWhenLastChange+0x4>
     ad0:	80 92 a6 00 	sts	0x00A6, r8	; 0x8000a6 <G_u64TimeSnappedWhenLastChange+0x5>
     ad4:	90 92 a7 00 	sts	0x00A7, r9	; 0x8000a7 <G_u64TimeSnappedWhenLastChange+0x6>
     ad8:	d0 93 a8 00 	sts	0x00A8, r29	; 0x8000a8 <G_u64TimeSnappedWhenLastChange+0x7>
			G_ECCS = CCS_OFF;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <G_ECCS>
		}
		L_u32GasDCOld = G_u8GasDutyCycle;
     ae2:	30 93 9d 00 	sts	0x009D, r19	; 0x80009d <__data_end+0x1>
     ae6:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__data_end>
	/// todo dont forget drive monitier G_u64TimeSnappedWhenLastChange = G_U64MillmetersCounter;

	
	//-------------------------
		
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	cf 90       	pop	r12
     afa:	bf 90       	pop	r11
     afc:	af 90       	pop	r10
     afe:	9f 90       	pop	r9
     b00:	8f 90       	pop	r8
     b02:	7f 90       	pop	r7
     b04:	6f 90       	pop	r6
     b06:	5f 90       	pop	r5
     b08:	4f 90       	pop	r4
     b0a:	3f 90       	pop	r3
     b0c:	08 95       	ret

00000b0e <App_voidUpdate>:

void App_voidUpdate(){
     b0e:	2f 92       	push	r2
     b10:	3f 92       	push	r3
     b12:	4f 92       	push	r4
     b14:	5f 92       	push	r5
     b16:	6f 92       	push	r6
     b18:	7f 92       	push	r7
     b1a:	8f 92       	push	r8
     b1c:	9f 92       	push	r9
     b1e:	af 92       	push	r10
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	28 97       	sbiw	r28, 0x08	; 8
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
	u32 L_u32Temp,L_u64Temp;
	
	//----- US ---------
	G_u32US_Distance = HUS_u32ReadDistanceCM();
     b42:	0e 94 f7 02 	call	0x5ee	; 0x5ee <HUS_u32ReadDistanceCM>
     b46:	60 93 dc 00 	sts	0x00DC, r22	; 0x8000dc <G_u32US_Distance>
     b4a:	70 93 dd 00 	sts	0x00DD, r23	; 0x8000dd <G_u32US_Distance+0x1>
     b4e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <G_u32US_Distance+0x2>
     b52:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <G_u32US_Distance+0x3>
	//------------------

	
	//----- BAS --------
	if(G_EGearBox == gearD){
     b56:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <G_EGearBox>
     b5a:	21 11       	cpse	r18, r1
     b5c:	11 c0       	rjmp	.+34     	; 0xb80 <App_voidUpdate+0x72>
		G_EBAS = BAS_ON;
     b5e:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <G_EBAS>
		
		if(G_u32US_Distance > 10){
     b62:	6b 30       	cpi	r22, 0x0B	; 11
     b64:	71 05       	cpc	r23, r1
     b66:	81 05       	cpc	r24, r1
     b68:	91 05       	cpc	r25, r1
     b6a:	28 f0       	brcs	.+10     	; 0xb76 <App_voidUpdate+0x68>
			HLED_void_TurnOff(&G_ledBAS);
     b6c:	87 ed       	ldi	r24, 0xD7	; 215
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 df 02 	call	0x5be	; 0x5be <HLED_void_TurnOff>
     b74:	0c c0       	rjmp	.+24     	; 0xb8e <App_voidUpdate+0x80>
				HLED_void_TurnOff(&G_ledBAS);
			}else{
				HLED_void_TurnOn(&G_ledBAS);
			}
		}else{
			HLED_void_TurnOn(&G_ledBAS);
     b76:	87 ed       	ldi	r24, 0xD7	; 215
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 ce 02 	call	0x59c	; 0x59c <HLED_void_TurnOn>
     b7e:	07 c0       	rjmp	.+14     	; 0xb8e <App_voidUpdate+0x80>
		}
		
	}else{
		G_EBAS = BAS_OFF;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <G_EBAS>
		HLED_void_TurnOff(&G_ledBAS);
     b86:	87 ed       	ldi	r24, 0xD7	; 215
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 df 02 	call	0x5be	; 0x5be <HLED_void_TurnOff>
	
	//------------------
	
	
	//----- SL --------
	if (G_ESL == SL_ON){
     b8e:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <G_ESL>
     b92:	81 11       	cpse	r24, r1
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <App_voidUpdate+0x92>
		HLED_void_TurnOn(&G_ledSL);
     b96:	80 ed       	ldi	r24, 0xD0	; 208
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 ce 02 	call	0x59c	; 0x59c <HLED_void_TurnOn>
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <App_voidUpdate+0x9a>
	}else{
		HLED_void_TurnOff(&G_ledSL);
     ba0:	80 ed       	ldi	r24, 0xD0	; 208
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 df 02 	call	0x5be	; 0x5be <HLED_void_TurnOff>
	}
	if(G_EGearBox != gearD){
     ba8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <G_EGearBox>
     bac:	88 23       	and	r24, r24
     bae:	19 f0       	breq	.+6      	; 0xbb6 <App_voidUpdate+0xa8>
		G_ESL = SL_OFF;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <G_ESL>
	}
	//------------------
	
	
	//----- CCS --------
	if (G_ECCS == CCS_ON){
     bb6:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <G_ECCS>
     bba:	81 11       	cpse	r24, r1
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <App_voidUpdate+0xba>
		HLED_void_TurnOn(&G_ledCCS);
     bbe:	85 ed       	ldi	r24, 0xD5	; 213
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 ce 02 	call	0x59c	; 0x59c <HLED_void_TurnOn>
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <App_voidUpdate+0xc2>
	}else{
		HLED_void_TurnOff(&G_ledCCS);
     bc8:	85 ed       	ldi	r24, 0xD5	; 213
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 df 02 	call	0x5be	; 0x5be <HLED_void_TurnOff>
	}
	
	if(G_EGearBox != gearD){
     bd0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <G_EGearBox>
     bd4:	88 23       	and	r24, r24
     bd6:	19 f0       	breq	.+6      	; 0xbde <App_voidUpdate+0xd0>
		G_ECCS = CCS_OFF;
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <G_ECCS>
	}
	//------------------

	//----- Drive Monitor --------
	if (G_EGearBox == gearD){
     bde:	81 11       	cpse	r24, r1
     be0:	03 c0       	rjmp	.+6      	; 0xbe8 <App_voidUpdate+0xda>
		G_EDRIVE_MONITOR = DRIVE_MONITOR_ON;
     be2:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <G_EDRIVE_MONITOR>
     be6:	03 c0       	rjmp	.+6      	; 0xbee <App_voidUpdate+0xe0>
	}else{
		G_EDRIVE_MONITOR = DRIVE_MONITOR_OFF;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <G_EDRIVE_MONITOR>
	}
	
	if(G_EDRIVE_MONITOR == DRIVE_MONITOR_ON){
     bee:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <G_EDRIVE_MONITOR>
     bf2:	81 11       	cpse	r24, r1
     bf4:	68 c0       	rjmp	.+208    	; 0xcc6 <App_voidUpdate+0x1b8>
		if(G_u64MillisCounter > G_u64TimeSnappedWhenLastChange){
     bf6:	20 90 b2 00 	lds	r2, 0x00B2	; 0x8000b2 <G_u64MillisCounter>
     bfa:	30 90 b3 00 	lds	r3, 0x00B3	; 0x8000b3 <G_u64MillisCounter+0x1>
     bfe:	40 90 b4 00 	lds	r4, 0x00B4	; 0x8000b4 <G_u64MillisCounter+0x2>
     c02:	50 90 b5 00 	lds	r5, 0x00B5	; 0x8000b5 <G_u64MillisCounter+0x3>
     c06:	60 90 b6 00 	lds	r6, 0x00B6	; 0x8000b6 <G_u64MillisCounter+0x4>
     c0a:	70 90 b7 00 	lds	r7, 0x00B7	; 0x8000b7 <G_u64MillisCounter+0x5>
     c0e:	80 90 b8 00 	lds	r8, 0x00B8	; 0x8000b8 <G_u64MillisCounter+0x6>
     c12:	90 90 b9 00 	lds	r9, 0x00B9	; 0x8000b9 <G_u64MillisCounter+0x7>
     c16:	20 91 a1 00 	lds	r18, 0x00A1	; 0x8000a1 <G_u64TimeSnappedWhenLastChange>
     c1a:	29 83       	std	Y+1, r18	; 0x01
     c1c:	30 91 a2 00 	lds	r19, 0x00A2	; 0x8000a2 <G_u64TimeSnappedWhenLastChange+0x1>
     c20:	3a 83       	std	Y+2, r19	; 0x02
     c22:	40 91 a3 00 	lds	r20, 0x00A3	; 0x8000a3 <G_u64TimeSnappedWhenLastChange+0x2>
     c26:	4b 83       	std	Y+3, r20	; 0x03
     c28:	50 91 a4 00 	lds	r21, 0x00A4	; 0x8000a4 <G_u64TimeSnappedWhenLastChange+0x3>
     c2c:	5c 83       	std	Y+4, r21	; 0x04
     c2e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <G_u64TimeSnappedWhenLastChange+0x4>
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <G_u64TimeSnappedWhenLastChange+0x5>
     c38:	2e 83       	std	Y+6, r18	; 0x06
     c3a:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <G_u64TimeSnappedWhenLastChange+0x6>
     c3e:	3f 83       	std	Y+7, r19	; 0x07
     c40:	40 91 a8 00 	lds	r20, 0x00A8	; 0x8000a8 <G_u64TimeSnappedWhenLastChange+0x7>
     c44:	48 87       	std	Y+8, r20	; 0x08
     c46:	22 2d       	mov	r18, r2
     c48:	33 2d       	mov	r19, r3
     c4a:	44 2d       	mov	r20, r4
     c4c:	55 2d       	mov	r21, r5
     c4e:	66 2d       	mov	r22, r6
     c50:	77 2d       	mov	r23, r7
     c52:	88 2d       	mov	r24, r8
     c54:	99 2d       	mov	r25, r9
     c56:	a9 80       	ldd	r10, Y+1	; 0x01
     c58:	ba 80       	ldd	r11, Y+2	; 0x02
     c5a:	cb 80       	ldd	r12, Y+3	; 0x03
     c5c:	dc 80       	ldd	r13, Y+4	; 0x04
     c5e:	ed 80       	ldd	r14, Y+5	; 0x05
     c60:	fe 80       	ldd	r15, Y+6	; 0x06
     c62:	0f 81       	ldd	r16, Y+7	; 0x07
     c64:	18 85       	ldd	r17, Y+8	; 0x08
     c66:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__cmpdi2>
     c6a:	41 f1       	breq	.+80     	; 0xcbc <App_voidUpdate+0x1ae>
     c6c:	38 f1       	brcs	.+78     	; 0xcbc <App_voidUpdate+0x1ae>
			L_u64Temp = G_u64MillisCounter - G_u64TimeSnappedWhenLastChange;
     c6e:	c2 01       	movw	r24, r4
     c70:	b1 01       	movw	r22, r2
     c72:	29 81       	ldd	r18, Y+1	; 0x01
     c74:	3a 81       	ldd	r19, Y+2	; 0x02
     c76:	4b 81       	ldd	r20, Y+3	; 0x03
     c78:	5c 81       	ldd	r21, Y+4	; 0x04
     c7a:	62 1b       	sub	r22, r18
     c7c:	73 0b       	sbc	r23, r19
     c7e:	84 0b       	sbc	r24, r20
     c80:	95 0b       	sbc	r25, r21
			if(L_u64Temp > 5000){
     c82:	69 38       	cpi	r22, 0x89	; 137
     c84:	33 e1       	ldi	r19, 0x13	; 19
     c86:	73 07       	cpc	r23, r19
     c88:	81 05       	cpc	r24, r1
     c8a:	91 05       	cpc	r25, r1
     c8c:	90 f0       	brcs	.+36     	; 0xcb2 <App_voidUpdate+0x1a4>
				//alarm enable
				if((L_u64Temp / 100 ) % 2 ){
     c8e:	24 e6       	ldi	r18, 0x64	; 100
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     c9a:	20 ff       	sbrs	r18, 0
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <App_voidUpdate+0x19a>
					HBUZZER_void_TurnOn(&G_alarm);
     c9e:	8a ed       	ldi	r24, 0xDA	; 218
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 8c 00 	call	0x118	; 0x118 <HBUZZER_void_TurnOn>
     ca6:	13 c0       	rjmp	.+38     	; 0xcce <App_voidUpdate+0x1c0>
				}else{
					HBUZZER_void_TurnOff(&G_alarm);
     ca8:	8a ed       	ldi	r24, 0xDA	; 218
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 9d 00 	call	0x13a	; 0x13a <HBUZZER_void_TurnOff>
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <App_voidUpdate+0x1c0>
				}
				
			}else{
				//alarm off
				HBUZZER_void_TurnOff(&G_alarm);
     cb2:	8a ed       	ldi	r24, 0xDA	; 218
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 9d 00 	call	0x13a	; 0x13a <HBUZZER_void_TurnOff>
     cba:	09 c0       	rjmp	.+18     	; 0xcce <App_voidUpdate+0x1c0>
			}
		}else {
			HBUZZER_void_TurnOff(&G_alarm);
     cbc:	8a ed       	ldi	r24, 0xDA	; 218
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 9d 00 	call	0x13a	; 0x13a <HBUZZER_void_TurnOff>
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <App_voidUpdate+0x1c0>
		}
	}else{
		HBUZZER_void_TurnOff(&G_alarm);
     cc6:	8a ed       	ldi	r24, 0xDA	; 218
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 9d 00 	call	0x13a	; 0x13a <HBUZZER_void_TurnOff>
	}
	//-----------------------------

}
     cce:	28 96       	adiw	r28, 0x08	; 8
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	af 90       	pop	r10
     cee:	9f 90       	pop	r9
     cf0:	8f 90       	pop	r8
     cf2:	7f 90       	pop	r7
     cf4:	6f 90       	pop	r6
     cf6:	5f 90       	pop	r5
     cf8:	4f 90       	pop	r4
     cfa:	3f 90       	pop	r3
     cfc:	2f 90       	pop	r2
     cfe:	08 95       	ret

00000d00 <App_LCD>:

void App_LCD(){
     d00:	af 92       	push	r10
     d02:	bf 92       	push	r11
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
	HLCD_void_setCursor(&G_lcd,0,0);
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	81 ee       	ldi	r24, 0xE1	; 225
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 3b 02 	call	0x476	; 0x476 <HLCD_void_setCursor>
	HLCD_void_WriteString(&G_lcd,"BAS:");
     d1c:	68 e7       	ldi	r22, 0x78	; 120
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	81 ee       	ldi	r24, 0xE1	; 225
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	if(G_EBAS == BAS_ON){
     d28:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <G_EBAS>
     d2c:	81 11       	cpse	r24, r1
     d2e:	07 c0       	rjmp	.+14     	; 0xd3e <App_LCD+0x3e>
		HLCD_void_WriteString(&G_lcd," ON");
     d30:	6d e7       	ldi	r22, 0x7D	; 125
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	81 ee       	ldi	r24, 0xE1	; 225
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <App_LCD+0x4a>
	}else{
		HLCD_void_WriteString(&G_lcd,"OFF");
     d3e:	61 e8       	ldi	r22, 0x81	; 129
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	81 ee       	ldi	r24, 0xE1	; 225
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	}
	
	HLCD_void_WriteString(&G_lcd," ");
     d4a:	6a e9       	ldi	r22, 0x9A	; 154
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	81 ee       	ldi	r24, 0xE1	; 225
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	
	HLCD_void_WriteString(&G_lcd,"SL:");
     d56:	65 e8       	ldi	r22, 0x85	; 133
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	81 ee       	ldi	r24, 0xE1	; 225
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	if(G_ESL == SL_ON){
     d62:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <G_ESL>
     d66:	81 11       	cpse	r24, r1
     d68:	07 c0       	rjmp	.+14     	; 0xd78 <App_LCD+0x78>
		HLCD_void_WriteString(&G_lcd," ON");
     d6a:	6d e7       	ldi	r22, 0x7D	; 125
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	81 ee       	ldi	r24, 0xE1	; 225
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <App_LCD+0x84>
	}else{
		HLCD_void_WriteString(&G_lcd,"OFF");
     d78:	61 e8       	ldi	r22, 0x81	; 129
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	81 ee       	ldi	r24, 0xE1	; 225
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	}
	
	HLCD_void_WriteString(&G_lcd," ");
     d84:	6a e9       	ldi	r22, 0x9A	; 154
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	81 ee       	ldi	r24, 0xE1	; 225
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	
	switch(G_EGearBox){
     d90:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <G_EGearBox>
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	61 f0       	breq	.+24     	; 0xdb0 <App_LCD+0xb0>
     d98:	28 f0       	brcs	.+10     	; 0xda4 <App_LCD+0xa4>
     d9a:	82 30       	cpi	r24, 0x02	; 2
     d9c:	79 f0       	breq	.+30     	; 0xdbc <App_LCD+0xbc>
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	99 f0       	breq	.+38     	; 0xdc8 <App_LCD+0xc8>
     da2:	17 c0       	rjmp	.+46     	; 0xdd2 <App_LCD+0xd2>
		case gearD: HLCD_void_WriteCharacter(&G_lcd,'D'); break;
     da4:	64 e4       	ldi	r22, 0x44	; 68
     da6:	81 ee       	ldi	r24, 0xE1	; 225
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 16 02 	call	0x42c	; 0x42c <HLCD_void_WriteCharacter>
     dae:	11 c0       	rjmp	.+34     	; 0xdd2 <App_LCD+0xd2>
		case gearN: HLCD_void_WriteCharacter(&G_lcd,'N'); break;
     db0:	6e e4       	ldi	r22, 0x4E	; 78
     db2:	81 ee       	ldi	r24, 0xE1	; 225
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 16 02 	call	0x42c	; 0x42c <HLCD_void_WriteCharacter>
     dba:	0b c0       	rjmp	.+22     	; 0xdd2 <App_LCD+0xd2>
		case gearP: HLCD_void_WriteCharacter(&G_lcd,'P'); break;
     dbc:	60 e5       	ldi	r22, 0x50	; 80
     dbe:	81 ee       	ldi	r24, 0xE1	; 225
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 16 02 	call	0x42c	; 0x42c <HLCD_void_WriteCharacter>
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <App_LCD+0xd2>
		case gearR: HLCD_void_WriteCharacter(&G_lcd,'R'); break;
     dc8:	62 e5       	ldi	r22, 0x52	; 82
     dca:	81 ee       	ldi	r24, 0xE1	; 225
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 16 02 	call	0x42c	; 0x42c <HLCD_void_WriteCharacter>
	}
	
	HLCD_void_setCursor(&G_lcd,0,1);
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	81 ee       	ldi	r24, 0xE1	; 225
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 3b 02 	call	0x476	; 0x476 <HLCD_void_setCursor>
	
	HLCD_void_WriteString(&G_lcd,"CCS:");
     dde:	69 e8       	ldi	r22, 0x89	; 137
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	81 ee       	ldi	r24, 0xE1	; 225
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	if(G_ECCS == CCS_ON){
     dea:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <G_ECCS>
     dee:	81 11       	cpse	r24, r1
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <App_LCD+0x100>
		HLCD_void_WriteString(&G_lcd," ON");
     df2:	6d e7       	ldi	r22, 0x7D	; 125
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	81 ee       	ldi	r24, 0xE1	; 225
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <App_LCD+0x10c>
	}else{
		HLCD_void_WriteString(&G_lcd,"OFF");
     e00:	61 e8       	ldi	r22, 0x81	; 129
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	81 ee       	ldi	r24, 0xE1	; 225
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	}
	HLCD_void_WriteString(&G_lcd," ");
     e0c:	6a e9       	ldi	r22, 0x9A	; 154
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	81 ee       	ldi	r24, 0xE1	; 225
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	
	if( (G_u64MillisCounter  / 1000) % 2){
     e18:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <G_u64MillisCounter>
     e1c:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <G_u64MillisCounter+0x1>
     e20:	40 91 b4 00 	lds	r20, 0x00B4	; 0x8000b4 <G_u64MillisCounter+0x2>
     e24:	50 91 b5 00 	lds	r21, 0x00B5	; 0x8000b5 <G_u64MillisCounter+0x3>
     e28:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <G_u64MillisCounter+0x4>
     e2c:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <G_u64MillisCounter+0x5>
     e30:	0f 2e       	mov	r0, r31
     e32:	f8 ee       	ldi	r31, 0xE8	; 232
     e34:	af 2e       	mov	r10, r31
     e36:	f0 2d       	mov	r31, r0
     e38:	0f 2e       	mov	r0, r31
     e3a:	f3 e0       	ldi	r31, 0x03	; 3
     e3c:	bf 2e       	mov	r11, r31
     e3e:	f0 2d       	mov	r31, r0
     e40:	c1 2c       	mov	r12, r1
     e42:	d1 2c       	mov	r13, r1
     e44:	e1 2c       	mov	r14, r1
     e46:	f1 2c       	mov	r15, r1
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <G_u64MillisCounter+0x6>
     e50:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <G_u64MillisCounter+0x7>
     e54:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__udivdi3>
     e58:	21 70       	andi	r18, 0x01	; 1
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 e0       	ldi	r26, 0x00	; 0
     e6a:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__cmpdi2_s8>
     e6e:	41 f1       	breq	.+80     	; 0xec0 <App_LCD+0x1c0>
		HLCD_void_WriteString(&G_lcd,"KM:");
     e70:	6e e8       	ldi	r22, 0x8E	; 142
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	81 ee       	ldi	r24, 0xE1	; 225
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
		HLCD_void_WriteNumber(&G_lcd,G_U64MillmetersCounter/ 10000);
     e7c:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <G_U64MillmetersCounter>
     e80:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <G_U64MillmetersCounter+0x1>
     e84:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <G_U64MillmetersCounter+0x2>
     e88:	50 91 ac 00 	lds	r21, 0x00AC	; 0x8000ac <G_U64MillmetersCounter+0x3>
     e8c:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <G_U64MillmetersCounter+0x4>
     e90:	70 91 ae 00 	lds	r23, 0x00AE	; 0x8000ae <G_U64MillmetersCounter+0x5>
     e94:	68 94       	set
     e96:	aa 24       	eor	r10, r10
     e98:	a4 f8       	bld	r10, 4
     e9a:	0f 2e       	mov	r0, r31
     e9c:	f7 e2       	ldi	r31, 0x27	; 39
     e9e:	bf 2e       	mov	r11, r31
     ea0:	f0 2d       	mov	r31, r0
     ea2:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <G_U64MillmetersCounter+0x6>
     ea6:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <G_U64MillmetersCounter+0x7>
     eaa:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__udivdi3>
     eae:	64 2f       	mov	r22, r20
     eb0:	75 2f       	mov	r23, r21
     eb2:	42 2f       	mov	r20, r18
     eb4:	53 2f       	mov	r21, r19
     eb6:	81 ee       	ldi	r24, 0xE1	; 225
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 52 02 	call	0x4a4	; 0x4a4 <HLCD_void_WriteNumber>
     ebe:	12 c0       	rjmp	.+36     	; 0xee4 <App_LCD+0x1e4>
	}else{
		HLCD_void_WriteString(&G_lcd,"US:");
     ec0:	62 e9       	ldi	r22, 0x92	; 146
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	81 ee       	ldi	r24, 0xE1	; 225
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
		HLCD_void_WriteNumber(&G_lcd,G_u32US_Distance);
     ecc:	40 91 dc 00 	lds	r20, 0x00DC	; 0x8000dc <G_u32US_Distance>
     ed0:	50 91 dd 00 	lds	r21, 0x00DD	; 0x8000dd <G_u32US_Distance+0x1>
     ed4:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <G_u32US_Distance+0x2>
     ed8:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <G_u32US_Distance+0x3>
     edc:	81 ee       	ldi	r24, 0xE1	; 225
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <HLCD_void_WriteNumber>
	}
	
	HLCD_void_WriteString(&G_lcd,"     ");
     ee4:	66 e9       	ldi	r22, 0x96	; 150
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	81 ee       	ldi	r24, 0xE1	; 225
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 28 02 	call	0x450	; 0x450 <HLCD_void_WriteString>
	
	

}
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	08 95       	ret

00000f02 <main>:
void UART_onReceive(u32);
void Timer2_callback();

int main(void)
{
   App_voidInit();
     f02:	0e 94 a6 03 	call	0x74c	; 0x74c <App_voidInit>

   while(1) 
   {
	   
	 
	   if(G_ESystemPower == sysOn){
     f06:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <G_ESystemPower>
     f0a:	81 11       	cpse	r24, r1
     f0c:	fc cf       	rjmp	.-8      	; 0xf06 <main+0x4>
		    App_checkInput();
     f0e:	0e 94 31 04 	call	0x862	; 0x862 <App_checkInput>
			App_voidUpdate();
     f12:	0e 94 87 05 	call	0xb0e	; 0xb0e <App_voidUpdate>
			App_LCD();
     f16:	0e 94 80 06 	call	0xd00	; 0xd00 <App_LCD>
     f1a:	f5 cf       	rjmp	.-22     	; 0xf06 <main+0x4>

00000f1c <MADC_voidInit>:
void MADC_voidEnableInterrupt(void){
	SET_BIT(ADCSRA_REG,ADCSRA_ADIE_BIT);
}

void MADC_voidSetCallback( void (*A_ptr2voidFunU32)(u32) ){
	G_ptr2voidFunU32 = A_ptr2voidFunU32;
     f1c:	86 b1       	in	r24, 0x06	; 6
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	86 b9       	out	0x06, r24	; 6
     f22:	87 b1       	in	r24, 0x07	; 7
     f24:	8f 73       	andi	r24, 0x3F	; 63
     f26:	80 64       	ori	r24, 0x40	; 64
     f28:	87 b9       	out	0x07, r24	; 7
     f2a:	86 b1       	in	r24, 0x06	; 6
     f2c:	87 60       	ori	r24, 0x07	; 7
     f2e:	86 b9       	out	0x06, r24	; 6
     f30:	87 b1       	in	r24, 0x07	; 7
     f32:	8f 7d       	andi	r24, 0xDF	; 223
     f34:	87 b9       	out	0x07, r24	; 7
     f36:	86 b1       	in	r24, 0x06	; 6
     f38:	8f 7d       	andi	r24, 0xDF	; 223
     f3a:	86 b9       	out	0x06, r24	; 6
     f3c:	08 95       	ret

00000f3e <MADC_u32ReadVoltage>:
     f3e:	97 b1       	in	r25, 0x07	; 7
     f40:	90 7e       	andi	r25, 0xE0	; 224
     f42:	8f 71       	andi	r24, 0x1F	; 31
     f44:	89 2b       	or	r24, r25
     f46:	87 b9       	out	0x07, r24	; 7
     f48:	86 b1       	in	r24, 0x06	; 6
     f4a:	80 64       	ori	r24, 0x40	; 64
     f4c:	86 b9       	out	0x06, r24	; 6
     f4e:	34 9b       	sbis	0x06, 4	; 6
     f50:	fe cf       	rjmp	.-4      	; 0xf4e <MADC_u32ReadVoltage+0x10>
     f52:	84 b1       	in	r24, 0x04	; 4
     f54:	65 b1       	in	r22, 0x05	; 5
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	76 2f       	mov	r23, r22
     f5a:	66 27       	eor	r22, r22
     f5c:	68 0f       	add	r22, r24
     f5e:	71 1d       	adc	r23, r1
     f60:	07 2e       	mov	r0, r23
     f62:	00 0c       	add	r0, r0
     f64:	88 0b       	sbc	r24, r24
     f66:	99 0b       	sbc	r25, r25
     f68:	26 b1       	in	r18, 0x06	; 6
     f6a:	20 61       	ori	r18, 0x10	; 16
     f6c:	26 b9       	out	0x06, r18	; 6
     f6e:	08 95       	ret

00000f70 <__vector_16>:
}

void __vector_16 (void) __attribute__ ((signal,used, externally_visible));
void __vector_16 (void){
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
	if(G_ptr2voidFunU32 != NULL){
     f92:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <G_ptr2voidFunU32>
     f96:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <G_ptr2voidFunU32+0x1>
     f9a:	30 97       	sbiw	r30, 0x00	; 0
     f9c:	71 f0       	breq	.+28     	; 0xfba <__vector_16+0x4a>
		u32 returnVal = 0;

		//read
		#if MADC_ADJUST==0
			returnVal = ((int)(ADCL_REG) + ((int)ADCH_REG<<8));
     f9e:	84 b1       	in	r24, 0x04	; 4
     fa0:	65 b1       	in	r22, 0x05	; 5
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	76 2f       	mov	r23, r22
     fa6:	66 27       	eor	r22, r22
     fa8:	68 0f       	add	r22, r24
     faa:	71 1d       	adc	r23, r1
     fac:	07 2e       	mov	r0, r23
     fae:	00 0c       	add	r0, r0
     fb0:	88 0b       	sbc	r24, r24
     fb2:	99 0b       	sbc	r25, r25
			returnVal = (int)ADCL_REG>>6 + (int)ADCH_REG<<2;
		#else
			#error "ADC ERROR, adjust undefined"
		#endif
		
		if(G_ptr2voidFunU32 != NULL){
     fb4:	30 97       	sbiw	r30, 0x00	; 0
     fb6:	09 f0       	breq	.+2      	; 0xfba <__vector_16+0x4a>
			G_ptr2voidFunU32(returnVal);
     fb8:	09 95       	icall
		}
	}
}
     fba:	ff 91       	pop	r31
     fbc:	ef 91       	pop	r30
     fbe:	bf 91       	pop	r27
     fc0:	af 91       	pop	r26
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	7f 91       	pop	r23
     fc8:	6f 91       	pop	r22
     fca:	5f 91       	pop	r21
     fcc:	4f 91       	pop	r20
     fce:	3f 91       	pop	r19
     fd0:	2f 91       	pop	r18
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	0f 90       	pop	r0
     fd8:	1f 90       	pop	r1
     fda:	18 95       	reti

00000fdc <MDELAY_void_micro>:
		}
	}
}

void MDELAY_void_micro(u32 A_u32_us){
	while(A_u32_us>0){
     fdc:	37 c0       	rjmp	.+110    	; 0x104c <MDELAY_void_micro+0x70>
		if(A_u32_us >= 1000){
     fde:	68 3e       	cpi	r22, 0xE8	; 232
     fe0:	23 e0       	ldi	r18, 0x03	; 3
     fe2:	72 07       	cpc	r23, r18
     fe4:	81 05       	cpc	r24, r1
     fe6:	91 05       	cpc	r25, r1
     fe8:	58 f0       	brcs	.+22     	; 0x1000 <MDELAY_void_micro+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fea:	ef ec       	ldi	r30, 0xCF	; 207
     fec:	f7 e0       	ldi	r31, 0x07	; 7
     fee:	31 97       	sbiw	r30, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <MDELAY_void_micro+0x12>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <MDELAY_void_micro+0x18>
     ff4:	00 00       	nop
			_delay_us(1000);
			A_u32_us -= 1000;
     ff6:	68 5e       	subi	r22, 0xE8	; 232
     ff8:	73 40       	sbci	r23, 0x03	; 3
     ffa:	81 09       	sbc	r24, r1
     ffc:	91 09       	sbc	r25, r1
     ffe:	26 c0       	rjmp	.+76     	; 0x104c <MDELAY_void_micro+0x70>
		}
		else if(A_u32_us >= 100){
    1000:	64 36       	cpi	r22, 0x64	; 100
    1002:	71 05       	cpc	r23, r1
    1004:	81 05       	cpc	r24, r1
    1006:	91 05       	cpc	r25, r1
    1008:	58 f0       	brcs	.+22     	; 0x1020 <MDELAY_void_micro+0x44>
    100a:	e7 ec       	ldi	r30, 0xC7	; 199
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	31 97       	sbiw	r30, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <MDELAY_void_micro+0x32>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <MDELAY_void_micro+0x38>
    1014:	00 00       	nop
			_delay_us(100);
			A_u32_us -= 100;
    1016:	64 56       	subi	r22, 0x64	; 100
    1018:	71 09       	sbc	r23, r1
    101a:	81 09       	sbc	r24, r1
    101c:	91 09       	sbc	r25, r1
    101e:	16 c0       	rjmp	.+44     	; 0x104c <MDELAY_void_micro+0x70>
		}else if(A_u32_us >= 10){
    1020:	6a 30       	cpi	r22, 0x0A	; 10
    1022:	71 05       	cpc	r23, r1
    1024:	81 05       	cpc	r24, r1
    1026:	91 05       	cpc	r25, r1
    1028:	48 f0       	brcs	.+18     	; 0x103c <MDELAY_void_micro+0x60>
    102a:	fa e1       	ldi	r31, 0x1A	; 26
    102c:	fa 95       	dec	r31
    102e:	f1 f7       	brne	.-4      	; 0x102c <MDELAY_void_micro+0x50>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <MDELAY_void_micro+0x56>
			_delay_us(10);
			A_u32_us -= 10;
    1032:	6a 50       	subi	r22, 0x0A	; 10
    1034:	71 09       	sbc	r23, r1
    1036:	81 09       	sbc	r24, r1
    1038:	91 09       	sbc	r25, r1
    103a:	08 c0       	rjmp	.+16     	; 0x104c <MDELAY_void_micro+0x70>
    103c:	22 e0       	ldi	r18, 0x02	; 2
    103e:	2a 95       	dec	r18
    1040:	f1 f7       	brne	.-4      	; 0x103e <MDELAY_void_micro+0x62>
    1042:	00 c0       	rjmp	.+0      	; 0x1044 <MDELAY_void_micro+0x68>
		}else{
			_delay_us(1);
			A_u32_us -= 1;
    1044:	61 50       	subi	r22, 0x01	; 1
    1046:	71 09       	sbc	r23, r1
    1048:	81 09       	sbc	r24, r1
    104a:	91 09       	sbc	r25, r1
		}
	}
}

void MDELAY_void_micro(u32 A_u32_us){
	while(A_u32_us>0){
    104c:	61 15       	cp	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	81 05       	cpc	r24, r1
    1052:	91 05       	cpc	r25, r1
    1054:	21 f6       	brne	.-120    	; 0xfde <MDELAY_void_micro+0x2>
		}else{
			_delay_us(1);
			A_u32_us -= 1;
		}
	}
    1056:	08 95       	ret

00001058 <MDIO_voidInit>:

void MDIO_voidInit(void){
	#if MDIO_ENABLE_PULL_UP_CIRCUIT == 0
		SET_BIT(SFIOR_REG,PUD_BIT);
	#else
		CLR_BIT(SFIOR_REG,PUD_BIT);
    1058:	80 b7       	in	r24, 0x30	; 48
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	80 bf       	out	0x30, r24	; 48
    105e:	08 95       	ret

00001060 <MDIO_voidSetPinDir>:
	#endif
}


void MDIO_voidSetPinDir(Pin_t A_Pin_tPin, u8 A_u8Dir){
	u8 L_portNum = A_Pin_tPin & 0xF0;
    1060:	98 2f       	mov	r25, r24
    1062:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
    1064:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
    1066:	90 3b       	cpi	r25, 0xB0	; 176
    1068:	49 f0       	breq	.+18     	; 0x107c <MDIO_voidSetPinDir+0x1c>
    106a:	18 f4       	brcc	.+6      	; 0x1072 <MDIO_voidSetPinDir+0x12>
    106c:	90 3a       	cpi	r25, 0xA0	; 160
    106e:	a9 f0       	breq	.+42     	; 0x109a <MDIO_voidSetPinDir+0x3a>
    1070:	18 c0       	rjmp	.+48     	; 0x10a2 <MDIO_voidSetPinDir+0x42>
    1072:	90 3c       	cpi	r25, 0xC0	; 192
    1074:	41 f0       	breq	.+16     	; 0x1086 <MDIO_voidSetPinDir+0x26>
    1076:	90 3d       	cpi	r25, 0xD0	; 208
    1078:	59 f0       	breq	.+22     	; 0x1090 <MDIO_voidSetPinDir+0x30>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <MDIO_voidSetPinDir+0x42>
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
			break;
		case MDIO_PORT_B_NUM:
						L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
    107c:	a8 e3       	ldi	r26, 0x38	; 56
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e3       	ldi	r30, 0x37	; 55
    1082:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_C_NUM:
						L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
    1086:	a5 e3       	ldi	r26, 0x35	; 53
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e4 e3       	ldi	r30, 0x34	; 52
    108c:	f0 e0       	ldi	r31, 0x00	; 0

			break;		
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <MDIO_voidSetPinDir+0x42>
		case MDIO_PORT_D_NUM:
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
    1090:	a2 e3       	ldi	r26, 0x32	; 50
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e1 e3       	ldi	r30, 0x31	; 49
    1096:	f0 e0       	ldi	r31, 0x00	; 0

			break;
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <MDIO_voidSetPinDir+0x42>
	volatile u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
				L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
    109a:	ab e3       	ldi	r26, 0x3B	; 59
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ea e3       	ldi	r30, 0x3A	; 58
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
						L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

			break;
		}
		
		switch(A_u8Dir){
    10a2:	61 30       	cpi	r22, 0x01	; 1
    10a4:	91 f0       	breq	.+36     	; 0x10ca <MDIO_voidSetPinDir+0x6a>
    10a6:	18 f0       	brcs	.+6      	; 0x10ae <MDIO_voidSetPinDir+0x4e>
    10a8:	62 30       	cpi	r22, 0x02	; 2
    10aa:	e1 f0       	breq	.+56     	; 0x10e4 <MDIO_voidSetPinDir+0x84>
    10ac:	08 95       	ret
			case INPUT: 
				CLR_BIT(*L_dirReg,L_pinNum) ;
    10ae:	40 81       	ld	r20, Z
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	b9 01       	movw	r22, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <MDIO_voidSetPinDir+0x5c>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	8a 95       	dec	r24
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <MDIO_voidSetPinDir+0x58>
    10c0:	cb 01       	movw	r24, r22
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	80 83       	st	Z, r24
				break;
    10c8:	08 95       	ret
			case OUTPUT: 
				SET_BIT(*L_dirReg,L_pinNum) ;
    10ca:	40 81       	ld	r20, Z
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	b9 01       	movw	r22, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <MDIO_voidSetPinDir+0x78>
    10d4:	66 0f       	add	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <MDIO_voidSetPinDir+0x74>
    10dc:	cb 01       	movw	r24, r22
    10de:	84 2b       	or	r24, r20
    10e0:	80 83       	st	Z, r24
				break;
    10e2:	08 95       	ret
			case INPUT_PULL_UP: 
				CLR_BIT(*L_dirReg,L_pinNum);
    10e4:	40 81       	ld	r20, Z
    10e6:	21 e0       	ldi	r18, 0x01	; 1
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	b9 01       	movw	r22, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <MDIO_voidSetPinDir+0x92>
    10ee:	66 0f       	add	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	8a 95       	dec	r24
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <MDIO_voidSetPinDir+0x8e>
    10f6:	cb 01       	movw	r24, r22
    10f8:	96 2f       	mov	r25, r22
    10fa:	90 95       	com	r25
    10fc:	94 23       	and	r25, r20
    10fe:	90 83       	st	Z, r25
				SET_BIT(*L_valReg,L_pinNum);
    1100:	9c 91       	ld	r25, X
    1102:	89 2b       	or	r24, r25
    1104:	8c 93       	st	X, r24
    1106:	08 95       	ret

00001108 <MDIO_voidSetPinVal>:
				break;
		}
	
}
void MDIO_voidSetPinVal(Pin_t A_Pin_tPin, u8 A_u8Val){
	u8 L_portNum = A_Pin_tPin & 0xF0;
    1108:	98 2f       	mov	r25, r24
    110a:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
    110c:	8f 70       	andi	r24, 0x0F	; 15
	
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
    110e:	90 3b       	cpi	r25, 0xB0	; 176
    1110:	49 f0       	breq	.+18     	; 0x1124 <MDIO_voidSetPinVal+0x1c>
    1112:	18 f4       	brcc	.+6      	; 0x111a <MDIO_voidSetPinVal+0x12>
    1114:	90 3a       	cpi	r25, 0xA0	; 160
    1116:	79 f0       	breq	.+30     	; 0x1136 <MDIO_voidSetPinVal+0x2e>
    1118:	10 c0       	rjmp	.+32     	; 0x113a <MDIO_voidSetPinVal+0x32>
    111a:	90 3c       	cpi	r25, 0xC0	; 192
    111c:	31 f0       	breq	.+12     	; 0x112a <MDIO_voidSetPinVal+0x22>
    111e:	90 3d       	cpi	r25, 0xD0	; 208
    1120:	39 f0       	breq	.+14     	; 0x1130 <MDIO_voidSetPinVal+0x28>
    1122:	0b c0       	rjmp	.+22     	; 0x113a <MDIO_voidSetPinVal+0x32>
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
		break;
		case MDIO_PORT_B_NUM:
		L_dirReg = &DDRB_REG; L_valReg = &PORTB_REG;
    1124:	e8 e3       	ldi	r30, 0x38	; 56
    1126:	f0 e0       	ldi	r31, 0x00	; 0

		break;
    1128:	08 c0       	rjmp	.+16     	; 0x113a <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_C_NUM:
		L_dirReg = &DDRC_REG; L_valReg = &PORTC_REG;
    112a:	e5 e3       	ldi	r30, 0x35	; 53
    112c:	f0 e0       	ldi	r31, 0x00	; 0

		break;
    112e:	05 c0       	rjmp	.+10     	; 0x113a <MDIO_voidSetPinVal+0x32>
		case MDIO_PORT_D_NUM:
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;
    1130:	e2 e3       	ldi	r30, 0x32	; 50
    1132:	f0 e0       	ldi	r31, 0x00	; 0

		break;
    1134:	02 c0       	rjmp	.+4      	; 0x113a <MDIO_voidSetPinVal+0x32>
	volatile  u8 *L_dirReg,*L_valReg;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_valReg = &PORTA_REG;
    1136:	eb e3       	ldi	r30, 0x3B	; 59
    1138:	f0 e0       	ldi	r31, 0x00	; 0
		L_dirReg = &DDRD_REG; L_valReg = &PORTD_REG;

		break;
	}
	
	switch(A_u8Val){
    113a:	66 23       	and	r22, r22
    113c:	19 f0       	breq	.+6      	; 0x1144 <MDIO_voidSetPinVal+0x3c>
    113e:	61 30       	cpi	r22, 0x01	; 1
    1140:	79 f0       	breq	.+30     	; 0x1160 <MDIO_voidSetPinVal+0x58>
    1142:	08 95       	ret
		case LOW:
		CLR_BIT(*L_valReg,L_pinNum) ;
    1144:	40 81       	ld	r20, Z
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	b9 01       	movw	r22, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <MDIO_voidSetPinVal+0x4a>
    114e:	66 0f       	add	r22, r22
    1150:	77 1f       	adc	r23, r23
    1152:	8a 95       	dec	r24
    1154:	e2 f7       	brpl	.-8      	; 0x114e <MDIO_voidSetPinVal+0x46>
    1156:	cb 01       	movw	r24, r22
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	80 83       	st	Z, r24
		break;
    115e:	08 95       	ret
		case HIGH:
		SET_BIT(*L_valReg,L_pinNum) ;
    1160:	40 81       	ld	r20, Z
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	b9 01       	movw	r22, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <MDIO_voidSetPinVal+0x66>
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	8a 95       	dec	r24
    1170:	e2 f7       	brpl	.-8      	; 0x116a <MDIO_voidSetPinVal+0x62>
    1172:	cb 01       	movw	r24, r22
    1174:	84 2b       	or	r24, r20
    1176:	80 83       	st	Z, r24
    1178:	08 95       	ret

0000117a <MDIO_u8GetPinVal>:
		
	}
}

u8	 MDIO_u8GetPinVal(Pin_t A_Pin_tPin){
	u8 L_portNum = A_Pin_tPin & 0xF0;
    117a:	98 2f       	mov	r25, r24
    117c:	90 7f       	andi	r25, 0xF0	; 240
	u8 L_pinNum = A_Pin_tPin & 0x0F;
    117e:	28 2f       	mov	r18, r24
    1180:	2f 70       	andi	r18, 0x0F	; 15
	u8 L_returnVal = 0;
	
	volatile u8  *L_dirReg = NULL,*L_pinReg =NULL;
	
	switch (L_portNum)
    1182:	90 3b       	cpi	r25, 0xB0	; 176
    1184:	59 f0       	breq	.+22     	; 0x119c <MDIO_u8GetPinVal+0x22>
    1186:	18 f4       	brcc	.+6      	; 0x118e <MDIO_u8GetPinVal+0x14>
    1188:	90 3a       	cpi	r25, 0xA0	; 160
    118a:	89 f0       	breq	.+34     	; 0x11ae <MDIO_u8GetPinVal+0x34>
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <MDIO_u8GetPinVal+0x1c>
    118e:	90 3c       	cpi	r25, 0xC0	; 192
    1190:	41 f0       	breq	.+16     	; 0x11a2 <MDIO_u8GetPinVal+0x28>
    1192:	90 3d       	cpi	r25, 0xD0	; 208
    1194:	49 f0       	breq	.+18     	; 0x11a8 <MDIO_u8GetPinVal+0x2e>
u8	 MDIO_u8GetPinVal(Pin_t A_Pin_tPin){
	u8 L_portNum = A_Pin_tPin & 0xF0;
	u8 L_pinNum = A_Pin_tPin & 0x0F;
	u8 L_returnVal = 0;
	
	volatile u8  *L_dirReg = NULL,*L_pinReg =NULL;
    1196:	e0 e0       	ldi	r30, 0x00	; 0
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	0b c0       	rjmp	.+22     	; 0x11b2 <MDIO_u8GetPinVal+0x38>
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_pinReg = &PINA_REG;
		break;
		case MDIO_PORT_B_NUM:
		L_dirReg = &DDRB_REG; L_pinReg = &PINB_REG;
    119c:	e6 e3       	ldi	r30, 0x36	; 54
    119e:	f0 e0       	ldi	r31, 0x00	; 0

		break;
    11a0:	08 c0       	rjmp	.+16     	; 0x11b2 <MDIO_u8GetPinVal+0x38>
		case MDIO_PORT_C_NUM:
		L_dirReg = &DDRC_REG; L_pinReg = &PINC_REG;
    11a2:	e3 e3       	ldi	r30, 0x33	; 51
    11a4:	f0 e0       	ldi	r31, 0x00	; 0

		break;
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <MDIO_u8GetPinVal+0x38>
		case MDIO_PORT_D_NUM:
		L_dirReg = &DDRD_REG; L_pinReg = &PIND_REG;
    11a8:	e0 e3       	ldi	r30, 0x30	; 48
    11aa:	f0 e0       	ldi	r31, 0x00	; 0

		break;
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <MDIO_u8GetPinVal+0x38>
	volatile u8  *L_dirReg = NULL,*L_pinReg =NULL;
	
	switch (L_portNum)
	{
		case MDIO_PORT_A_NUM:
		L_dirReg = &DDRA_REG; L_pinReg = &PINA_REG;
    11ae:	e9 e3       	ldi	r30, 0x39	; 57
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}
	

	
	switch(GET_BIT(*L_pinReg,L_pinNum)){
    11b2:	90 81       	ld	r25, Z
    11b4:	89 2f       	mov	r24, r25
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <MDIO_u8GetPinVal+0x44>
    11ba:	95 95       	asr	r25
    11bc:	87 95       	ror	r24
    11be:	2a 95       	dec	r18
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <MDIO_u8GetPinVal+0x40>
    11c2:	80 fd       	sbrc	r24, 0
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <MDIO_u8GetPinVal+0x50>
}

u8	 MDIO_u8GetPinVal(Pin_t A_Pin_tPin){
	u8 L_portNum = A_Pin_tPin & 0xF0;
	u8 L_pinNum = A_Pin_tPin & 0x0F;
	u8 L_returnVal = 0;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 95       	ret
	switch(GET_BIT(*L_pinReg,L_pinNum)){
		case 0:
			L_returnVal = LOW;
		break;
		case 1:
			L_returnVal = HIGH;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return 	L_returnVal ;
}
    11cc:	08 95       	ret

000011ce <MGI_void_Enable>:
#include "GI_config.h"
#include "GI_interface.h"
#include "GI_private.h"

void MGI_void_Enable(void){
	SET_BIT(SREG_REG,SREG_I_BIT);	
    11ce:	8f b7       	in	r24, 0x3f	; 63
    11d0:	80 68       	ori	r24, 0x80	; 128
    11d2:	8f bf       	out	0x3f, r24	; 63
    11d4:	08 95       	ret

000011d6 <MICU_voidInit>:
}

//0 --> 100
u8 MICU_u8ReadDutyCycle(void){
	return (G_u64TicksHigh * 100 ) / (G_u64TicksHigh + G_u64TicksLow);
}
    11d6:	8f b5       	in	r24, 0x2f	; 47
    11d8:	8e 7f       	andi	r24, 0xFE	; 254
    11da:	8f bd       	out	0x2f, r24	; 47
    11dc:	8f b5       	in	r24, 0x2f	; 47
    11de:	8d 7f       	andi	r24, 0xFD	; 253
    11e0:	8f bd       	out	0x2f, r24	; 47
    11e2:	8e b5       	in	r24, 0x2e	; 46
    11e4:	87 7f       	andi	r24, 0xF7	; 247
    11e6:	8e bd       	out	0x2e, r24	; 46
    11e8:	8e b5       	in	r24, 0x2e	; 46
    11ea:	8f 7e       	andi	r24, 0xEF	; 239
    11ec:	8e bd       	out	0x2e, r24	; 46
    11ee:	8e b5       	in	r24, 0x2e	; 46
    11f0:	80 68       	ori	r24, 0x80	; 128
    11f2:	8e bd       	out	0x2e, r24	; 46
    11f4:	89 b7       	in	r24, 0x39	; 57
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	89 bf       	out	0x39, r24	; 57
    11fa:	8e b5       	in	r24, 0x2e	; 46
    11fc:	80 64       	ori	r24, 0x40	; 64
    11fe:	8e bd       	out	0x2e, r24	; 46
    1200:	89 b7       	in	r24, 0x39	; 57
    1202:	84 60       	ori	r24, 0x04	; 4
    1204:	89 bf       	out	0x39, r24	; 57
    1206:	8e b5       	in	r24, 0x2e	; 46
    1208:	8e 7f       	andi	r24, 0xFE	; 254
    120a:	8e bd       	out	0x2e, r24	; 46
    120c:	8e b5       	in	r24, 0x2e	; 46
    120e:	82 60       	ori	r24, 0x02	; 2
    1210:	8e bd       	out	0x2e, r24	; 46
    1212:	8e b5       	in	r24, 0x2e	; 46
    1214:	8b 7f       	andi	r24, 0xFB	; 251
    1216:	8e bd       	out	0x2e, r24	; 46
    1218:	08 95       	ret

0000121a <MICU_u64ReadTimeHighMicro>:
    121a:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <G_u64TicksHigh>
    121e:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <G_u64TicksHigh+0x1>
    1222:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <G_u64TicksHigh+0x2>
    1226:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <G_u64TicksHigh+0x3>
    122a:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <G_u64TicksHigh+0x4>
    122e:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <G_u64TicksHigh+0x5>
    1232:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <G_u64TicksHigh+0x6>
    1236:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <G_u64TicksHigh+0x7>
    123a:	08 95       	ret

0000123c <__vector_6>:



//Timer/Counter1 Capture Event
void __vector_6 (void) __attribute__ ((signal,used, externally_visible));
void __vector_6 (void){
    123c:	1f 92       	push	r1
    123e:	0f 92       	push	r0
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	0f 92       	push	r0
    1244:	11 24       	eor	r1, r1
    1246:	2f 92       	push	r2
    1248:	3f 92       	push	r3
    124a:	4f 92       	push	r4
    124c:	5f 92       	push	r5
    124e:	6f 92       	push	r6
    1250:	7f 92       	push	r7
    1252:	8f 92       	push	r8
    1254:	9f 92       	push	r9
    1256:	af 92       	push	r10
    1258:	bf 92       	push	r11
    125a:	cf 92       	push	r12
    125c:	df 92       	push	r13
    125e:	ef 92       	push	r14
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
	static u8 L_u8Flag  = 0;
	
	switch(L_u8Flag){			
    1282:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <L_u8Flag.1660>
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	b1 f0       	breq	.+44     	; 0x12b6 <__vector_6+0x7a>
    128a:	20 f0       	brcs	.+8      	; 0x1294 <__vector_6+0x58>
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	09 f4       	brne	.+2      	; 0x1292 <__vector_6+0x56>
    1290:	55 c0       	rjmp	.+170    	; 0x133c <__vector_6+0x100>
    1292:	96 c0       	rjmp	.+300    	; 0x13c0 <__vector_6+0x184>
		case 0:
			L_u8Flag = 1;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <L_u8Flag.1660>
			TCNT1_REG = (u16)0;			//clear timer
    129a:	1d bc       	out	0x2d, r1	; 45
    129c:	1c bc       	out	0x2c, r1	; 44
			CLR_BIT(TCCR1B_REG,ICES1);	//edge select: wait FALLING
    129e:	8e b5       	in	r24, 0x2e	; 46
    12a0:	8f 7b       	andi	r24, 0xBF	; 191
    12a2:	8e bd       	out	0x2e, r24	; 46
			G_u32OverflowsCount = 0;
    12a4:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <G_u32OverflowsCount>
    12a8:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <G_u32OverflowsCount+0x1>
    12ac:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <G_u32OverflowsCount+0x2>
    12b0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <G_u32OverflowsCount+0x3>
			break;	
    12b4:	85 c0       	rjmp	.+266    	; 0x13c0 <__vector_6+0x184>
			
		case 1:
			L_u8Flag = 2;
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <L_u8Flag.1660>
			G_u64TicksHigh = (u64)(TCNT1_REG)  + G_u32OverflowsCount * 0XFFFF;	// read high ticks
    12bc:	2c b4       	in	r2, 0x2c	; 44
    12be:	3d b4       	in	r3, 0x2d	; 45
    12c0:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <G_u32OverflowsCount>
    12c4:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <G_u32OverflowsCount+0x1>
    12c8:	40 91 bf 00 	lds	r20, 0x00BF	; 0x8000bf <G_u32OverflowsCount+0x2>
    12cc:	50 91 c0 00 	lds	r21, 0x00C0	; 0x8000c0 <G_u32OverflowsCount+0x3>
    12d0:	af ef       	ldi	r26, 0xFF	; 255
    12d2:	bf ef       	ldi	r27, 0xFF	; 255
    12d4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__muluhisi3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	28 2f       	mov	r18, r24
    12de:	39 2f       	mov	r19, r25
    12e0:	4a 2f       	mov	r20, r26
    12e2:	5b 2f       	mov	r21, r27
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a2 2c       	mov	r10, r2
    12ee:	b3 2c       	mov	r11, r3
    12f0:	c1 2c       	mov	r12, r1
    12f2:	d1 2c       	mov	r13, r1
    12f4:	e1 2c       	mov	r14, r1
    12f6:	f1 2c       	mov	r15, r1
    12f8:	00 e0       	ldi	r16, 0x00	; 0
    12fa:	10 e0       	ldi	r17, 0x00	; 0
    12fc:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__adddi3>
    1300:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <G_u64TicksHigh>
    1304:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <G_u64TicksHigh+0x1>
    1308:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <G_u64TicksHigh+0x2>
    130c:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <G_u64TicksHigh+0x3>
    1310:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <G_u64TicksHigh+0x4>
    1314:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <G_u64TicksHigh+0x5>
    1318:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <G_u64TicksHigh+0x6>
    131c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <G_u64TicksHigh+0x7>
			TCNT1_REG = (u16)0;					//clear timer
    1320:	1d bc       	out	0x2d, r1	; 45
    1322:	1c bc       	out	0x2c, r1	; 44
			G_u32OverflowsCount = 0;
    1324:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <G_u32OverflowsCount>
    1328:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <G_u32OverflowsCount+0x1>
    132c:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <G_u32OverflowsCount+0x2>
    1330:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <G_u32OverflowsCount+0x3>
			SET_BIT(TCCR1B_REG,ICES1);			//edge select: wait RISING
    1334:	8e b5       	in	r24, 0x2e	; 46
    1336:	80 64       	ori	r24, 0x40	; 64
    1338:	8e bd       	out	0x2e, r24	; 46
			break;	
    133a:	42 c0       	rjmp	.+132    	; 0x13c0 <__vector_6+0x184>
			
		case 2:
		
			L_u8Flag = 1;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <L_u8Flag.1660>
			G_u64TicksLow = (u64)(TCNT1_REG)  + G_u32OverflowsCount * 0XFFFF; // read low ticks
    1342:	2c b4       	in	r2, 0x2c	; 44
    1344:	3d b4       	in	r3, 0x2d	; 45
    1346:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <G_u32OverflowsCount>
    134a:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <G_u32OverflowsCount+0x1>
    134e:	40 91 bf 00 	lds	r20, 0x00BF	; 0x8000bf <G_u32OverflowsCount+0x2>
    1352:	50 91 c0 00 	lds	r21, 0x00C0	; 0x8000c0 <G_u32OverflowsCount+0x3>
    1356:	af ef       	ldi	r26, 0xFF	; 255
    1358:	bf ef       	ldi	r27, 0xFF	; 255
    135a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__muluhisi3>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	28 2f       	mov	r18, r24
    1364:	39 2f       	mov	r19, r25
    1366:	4a 2f       	mov	r20, r26
    1368:	5b 2f       	mov	r21, r27
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a2 2c       	mov	r10, r2
    1374:	b3 2c       	mov	r11, r3
    1376:	c1 2c       	mov	r12, r1
    1378:	d1 2c       	mov	r13, r1
    137a:	e1 2c       	mov	r14, r1
    137c:	f1 2c       	mov	r15, r1
    137e:	00 e0       	ldi	r16, 0x00	; 0
    1380:	10 e0       	ldi	r17, 0x00	; 0
    1382:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__adddi3>
    1386:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
    138a:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    138e:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1392:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1396:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
    139a:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
    139e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    13a2:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
			TCNT1_REG = (u16)0;					//clear timer
    13a6:	1d bc       	out	0x2d, r1	; 45
    13a8:	1c bc       	out	0x2c, r1	; 44
			G_u32OverflowsCount = 0;
    13aa:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <G_u32OverflowsCount>
    13ae:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <G_u32OverflowsCount+0x1>
    13b2:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <G_u32OverflowsCount+0x2>
    13b6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <G_u32OverflowsCount+0x3>
			CLR_BIT(TCCR1B_REG,ICES1);	//edge select: wait falling
    13ba:	8e b5       	in	r24, 0x2e	; 46
    13bc:	8f 7b       	andi	r24, 0xBF	; 191
    13be:	8e bd       	out	0x2e, r24	; 46
			break;						
	} 
}
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	bf 91       	pop	r27
    13ca:	af 91       	pop	r26
    13cc:	9f 91       	pop	r25
    13ce:	8f 91       	pop	r24
    13d0:	7f 91       	pop	r23
    13d2:	6f 91       	pop	r22
    13d4:	5f 91       	pop	r21
    13d6:	4f 91       	pop	r20
    13d8:	3f 91       	pop	r19
    13da:	2f 91       	pop	r18
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	df 90       	pop	r13
    13e6:	cf 90       	pop	r12
    13e8:	bf 90       	pop	r11
    13ea:	af 90       	pop	r10
    13ec:	9f 90       	pop	r9
    13ee:	8f 90       	pop	r8
    13f0:	7f 90       	pop	r7
    13f2:	6f 90       	pop	r6
    13f4:	5f 90       	pop	r5
    13f6:	4f 90       	pop	r4
    13f8:	3f 90       	pop	r3
    13fa:	2f 90       	pop	r2
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	0f 90       	pop	r0
    1402:	1f 90       	pop	r1
    1404:	18 95       	reti

00001406 <__vector_9>:

void __vector_9 (void)__attribute__((signal))__attribute__((interrupt));
void __vector_9 (void)
	{
    1406:	78 94       	sei
    1408:	1f 92       	push	r1
    140a:	0f 92       	push	r0
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	0f 92       	push	r0
    1410:	11 24       	eor	r1, r1
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	af 93       	push	r26
    1418:	bf 93       	push	r27
		G_u32OverflowsCount++;
    141a:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <G_u32OverflowsCount>
    141e:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <G_u32OverflowsCount+0x1>
    1422:	a0 91 bf 00 	lds	r26, 0x00BF	; 0x8000bf <G_u32OverflowsCount+0x2>
    1426:	b0 91 c0 00 	lds	r27, 0x00C0	; 0x8000c0 <G_u32OverflowsCount+0x3>
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	a1 1d       	adc	r26, r1
    142e:	b1 1d       	adc	r27, r1
    1430:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <G_u32OverflowsCount>
    1434:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <G_u32OverflowsCount+0x1>
    1438:	a0 93 bf 00 	sts	0x00BF, r26	; 0x8000bf <G_u32OverflowsCount+0x2>
    143c:	b0 93 c0 00 	sts	0x00C0, r27	; 0x8000c0 <G_u32OverflowsCount+0x3>
}
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <MTIMER_2_voidInit>:
#endif

#if MTIMER2_MODE_SELECT == MTIMER2_MODE_NORMAL || MTIMER2_MODE_SELECT == MTIMER2_MODE_CTC
void MTIMER_2_voidEnableInterrupt(void){
	#if MTIMER2_MODE_SELECT == MTIMER2_MODE_NORMAL
	SET_BIT(TIMSK_REG,6);
    1452:	85 b5       	in	r24, 0x25	; 37
    1454:	8f 7b       	andi	r24, 0xBF	; 191
    1456:	85 bd       	out	0x25, r24	; 37
    1458:	85 b5       	in	r24, 0x25	; 37
    145a:	87 7f       	andi	r24, 0xF7	; 247
    145c:	85 bd       	out	0x25, r24	; 37
    145e:	85 b5       	in	r24, 0x25	; 37
    1460:	8f 7c       	andi	r24, 0xCF	; 207
    1462:	80 62       	ori	r24, 0x20	; 32
    1464:	85 bd       	out	0x25, r24	; 37
    1466:	88 e1       	ldi	r24, 0x18	; 24
    1468:	84 bd       	out	0x24, r24	; 36
    146a:	85 b5       	in	r24, 0x25	; 37
    146c:	88 7f       	andi	r24, 0xF8	; 248
    146e:	82 60       	ori	r24, 0x02	; 2
    1470:	85 bd       	out	0x25, r24	; 37
    1472:	89 b7       	in	r24, 0x39	; 57
    1474:	80 64       	ori	r24, 0x40	; 64
    1476:	89 bf       	out	0x39, r24	; 57
    1478:	08 95       	ret

0000147a <MTIMER_2_voidSetCallback>:
    147a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <G_ptr2voidCallback_callback+0x1>
    147e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <G_ptr2voidCallback_callback>
    1482:	08 95       	ret

00001484 <__vector_5>:


//Timer/Counter2 Overflow ISR
#if MTIMER2_MODE_SELECT == MTIMER2_MODE_NORMAL
void __vector_5(void)__attribute__((signal));
void __vector_5(){
    1484:	1f 92       	push	r1
    1486:	0f 92       	push	r0
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	0f 92       	push	r0
    148c:	11 24       	eor	r1, r1
    148e:	2f 93       	push	r18
    1490:	3f 93       	push	r19
    1492:	4f 93       	push	r20
    1494:	5f 93       	push	r21
    1496:	6f 93       	push	r22
    1498:	7f 93       	push	r23
    149a:	8f 93       	push	r24
    149c:	9f 93       	push	r25
    149e:	af 93       	push	r26
    14a0:	bf 93       	push	r27
    14a2:	ef 93       	push	r30
    14a4:	ff 93       	push	r31
	static u32 counter = 0;
	counter++;
    14a6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <counter.1665>
    14aa:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <counter.1665+0x1>
    14ae:	a0 91 c3 00 	lds	r26, 0x00C3	; 0x8000c3 <counter.1665+0x2>
    14b2:	b0 91 c4 00 	lds	r27, 0x00C4	; 0x8000c4 <counter.1665+0x3>
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	a1 1d       	adc	r26, r1
    14ba:	b1 1d       	adc	r27, r1
    14bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <counter.1665>
    14c0:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <counter.1665+0x1>
    14c4:	a0 93 c3 00 	sts	0x00C3, r26	; 0x8000c3 <counter.1665+0x2>
    14c8:	b0 93 c4 00 	sts	0x00C4, r27	; 0x8000c4 <counter.1665+0x3>

	if(counter == MTIMER2_MAX_COUNT){
    14cc:	04 97       	sbiw	r24, 0x04	; 4
    14ce:	a1 05       	cpc	r26, r1
    14d0:	b1 05       	cpc	r27, r1
    14d2:	a9 f4       	brne	.+42     	; 0x14fe <__vector_5+0x7a>
		counter = 0;
    14d4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <counter.1665>
    14d8:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <counter.1665+0x1>
    14dc:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <counter.1665+0x2>
    14e0:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <counter.1665+0x3>
		TCNT2_REG = MTIMER2_PRELOAD_VAL;
    14e4:	88 e1       	ldi	r24, 0x18	; 24
    14e6:	84 bd       	out	0x24, r24	; 36
		
		if(G_ptr2voidCallback_callback != NULL){
    14e8:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <G_ptr2voidCallback_callback>
    14ec:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <G_ptr2voidCallback_callback+0x1>
    14f0:	89 2b       	or	r24, r25
    14f2:	29 f0       	breq	.+10     	; 0x14fe <__vector_5+0x7a>
			G_ptr2voidCallback_callback();
    14f4:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <G_ptr2voidCallback_callback>
    14f8:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <G_ptr2voidCallback_callback+0x1>
    14fc:	09 95       	icall
		}
		
	}
}
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	0f 90       	pop	r0
    151c:	1f 90       	pop	r1
    151e:	18 95       	reti

00001520 <MUART_voidInit>:
		L_u32Data = GET_BIT(UCSRB_REG,1) << 8;
		#endif
		L_u32Data = L_u32Data | UDR_REG;
		
		return L_u32Data;
}
    1520:	8b b1       	in	r24, 0x0b	; 11
    1522:	8e 7f       	andi	r24, 0xFE	; 254
    1524:	8b b9       	out	0x0b, r24	; 11
    1526:	83 e3       	ldi	r24, 0x33	; 51
    1528:	89 b9       	out	0x09, r24	; 9
    152a:	10 bc       	out	0x20, r1	; 32
    152c:	8a b1       	in	r24, 0x0a	; 10
    152e:	80 68       	ori	r24, 0x80	; 128
    1530:	8a b9       	out	0x0a, r24	; 10
    1532:	8b b1       	in	r24, 0x0b	; 11
    1534:	8d 7f       	andi	r24, 0xFD	; 253
    1536:	8b b9       	out	0x0b, r24	; 11
    1538:	8a b1       	in	r24, 0x0a	; 10
    153a:	80 61       	ori	r24, 0x10	; 16
    153c:	8a b9       	out	0x0a, r24	; 10
    153e:	8a b1       	in	r24, 0x0a	; 10
    1540:	88 60       	ori	r24, 0x08	; 8
    1542:	8a b9       	out	0x0a, r24	; 10
    1544:	8a b1       	in	r24, 0x0a	; 10
    1546:	8b 7f       	andi	r24, 0xFB	; 251
    1548:	8a b9       	out	0x0a, r24	; 10
    154a:	86 e8       	ldi	r24, 0x86	; 134
    154c:	80 bd       	out	0x20, r24	; 32
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	81 ed       	ldi	r24, 0xD1	; 209
    1552:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	80 ed       	ldi	r24, 0xD0	; 208
    155a:	0e 94 30 08 	call	0x1060	; 0x1060 <MDIO_voidSetPinDir>
    155e:	08 95       	ret

00001560 <MUART_voidSetRXCallback>:

#if MUART_RX_COMPLETE_INTERRUPTS_ENABLE == 1
	static volatile ptr2voidU32Callback G_ptrCallback = NULL;
	void MUART_voidSetRXCallback(ptr2voidU32Callback A_ptrCallback){
		G_ptrCallback = A_ptrCallback;
    1560:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <G_ptrCallback+0x1>
    1564:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <G_ptrCallback>
    1568:	08 95       	ret

0000156a <__vector_13>:
	}
	
	void __vector_13(void)__attribute__((signal));
	void __vector_13(void){
    156a:	1f 92       	push	r1
    156c:	0f 92       	push	r0
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	0f 92       	push	r0
    1572:	11 24       	eor	r1, r1
    1574:	2f 93       	push	r18
    1576:	3f 93       	push	r19
    1578:	4f 93       	push	r20
    157a:	5f 93       	push	r21
    157c:	6f 93       	push	r22
    157e:	7f 93       	push	r23
    1580:	8f 93       	push	r24
    1582:	9f 93       	push	r25
    1584:	af 93       	push	r26
    1586:	bf 93       	push	r27
    1588:	ef 93       	push	r30
    158a:	ff 93       	push	r31
		if(G_ptrCallback != NULL){
    158c:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <G_ptrCallback>
    1590:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <G_ptrCallback+0x1>
    1594:	89 2b       	or	r24, r25
    1596:	49 f0       	breq	.+18     	; 0x15aa <__vector_13+0x40>
			
			//write ninth bit then write the low 8 bits
			#if MUART_CHAR_SIZE_SELECT==MUART_CHAR_SIZE_9_BITS
			L_u32Data = GET_BIT(UCSRB_REG,1) << 8;
			#endif
			L_u32Data = L_u32Data | UDR_REG;
    1598:	6c b1       	in	r22, 0x0c	; 12
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
			
			G_ptrCallback(L_u32Data);
    15a0:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <G_ptrCallback>
    15a4:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <G_ptrCallback+0x1>
    15a8:	09 95       	icall
		}
	}
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	bf 91       	pop	r27
    15b0:	af 91       	pop	r26
    15b2:	9f 91       	pop	r25
    15b4:	8f 91       	pop	r24
    15b6:	7f 91       	pop	r23
    15b8:	6f 91       	pop	r22
    15ba:	5f 91       	pop	r21
    15bc:	4f 91       	pop	r20
    15be:	3f 91       	pop	r19
    15c0:	2f 91       	pop	r18
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <__divsf3>:
    15cc:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__divsf3x>
    15d0:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_round>
    15d4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__fp_pscB>
    15d8:	58 f0       	brcs	.+22     	; 0x15f0 <__divsf3+0x24>
    15da:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fp_pscA>
    15de:	40 f0       	brcs	.+16     	; 0x15f0 <__divsf3+0x24>
    15e0:	29 f4       	brne	.+10     	; 0x15ec <__divsf3+0x20>
    15e2:	5f 3f       	cpi	r21, 0xFF	; 255
    15e4:	29 f0       	breq	.+10     	; 0x15f0 <__divsf3+0x24>
    15e6:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    15ea:	51 11       	cpse	r21, r1
    15ec:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__fp_szero>
    15f0:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_nan>

000015f4 <__divsf3x>:
    15f4:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fp_split3>
    15f8:	68 f3       	brcs	.-38     	; 0x15d4 <__divsf3+0x8>

000015fa <__divsf3_pse>:
    15fa:	99 23       	and	r25, r25
    15fc:	b1 f3       	breq	.-20     	; 0x15ea <__divsf3+0x1e>
    15fe:	55 23       	and	r21, r21
    1600:	91 f3       	breq	.-28     	; 0x15e6 <__divsf3+0x1a>
    1602:	95 1b       	sub	r25, r21
    1604:	55 0b       	sbc	r21, r21
    1606:	bb 27       	eor	r27, r27
    1608:	aa 27       	eor	r26, r26
    160a:	62 17       	cp	r22, r18
    160c:	73 07       	cpc	r23, r19
    160e:	84 07       	cpc	r24, r20
    1610:	38 f0       	brcs	.+14     	; 0x1620 <__divsf3_pse+0x26>
    1612:	9f 5f       	subi	r25, 0xFF	; 255
    1614:	5f 4f       	sbci	r21, 0xFF	; 255
    1616:	22 0f       	add	r18, r18
    1618:	33 1f       	adc	r19, r19
    161a:	44 1f       	adc	r20, r20
    161c:	aa 1f       	adc	r26, r26
    161e:	a9 f3       	breq	.-22     	; 0x160a <__divsf3_pse+0x10>
    1620:	35 d0       	rcall	.+106    	; 0x168c <__divsf3_pse+0x92>
    1622:	0e 2e       	mov	r0, r30
    1624:	3a f0       	brmi	.+14     	; 0x1634 <__divsf3_pse+0x3a>
    1626:	e0 e8       	ldi	r30, 0x80	; 128
    1628:	32 d0       	rcall	.+100    	; 0x168e <__divsf3_pse+0x94>
    162a:	91 50       	subi	r25, 0x01	; 1
    162c:	50 40       	sbci	r21, 0x00	; 0
    162e:	e6 95       	lsr	r30
    1630:	00 1c       	adc	r0, r0
    1632:	ca f7       	brpl	.-14     	; 0x1626 <__divsf3_pse+0x2c>
    1634:	2b d0       	rcall	.+86     	; 0x168c <__divsf3_pse+0x92>
    1636:	fe 2f       	mov	r31, r30
    1638:	29 d0       	rcall	.+82     	; 0x168c <__divsf3_pse+0x92>
    163a:	66 0f       	add	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	88 1f       	adc	r24, r24
    1640:	bb 1f       	adc	r27, r27
    1642:	26 17       	cp	r18, r22
    1644:	37 07       	cpc	r19, r23
    1646:	48 07       	cpc	r20, r24
    1648:	ab 07       	cpc	r26, r27
    164a:	b0 e8       	ldi	r27, 0x80	; 128
    164c:	09 f0       	breq	.+2      	; 0x1650 <__divsf3_pse+0x56>
    164e:	bb 0b       	sbc	r27, r27
    1650:	80 2d       	mov	r24, r0
    1652:	bf 01       	movw	r22, r30
    1654:	ff 27       	eor	r31, r31
    1656:	93 58       	subi	r25, 0x83	; 131
    1658:	5f 4f       	sbci	r21, 0xFF	; 255
    165a:	3a f0       	brmi	.+14     	; 0x166a <__divsf3_pse+0x70>
    165c:	9e 3f       	cpi	r25, 0xFE	; 254
    165e:	51 05       	cpc	r21, r1
    1660:	78 f0       	brcs	.+30     	; 0x1680 <__divsf3_pse+0x86>
    1662:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    1666:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__fp_szero>
    166a:	5f 3f       	cpi	r21, 0xFF	; 255
    166c:	e4 f3       	brlt	.-8      	; 0x1666 <__divsf3_pse+0x6c>
    166e:	98 3e       	cpi	r25, 0xE8	; 232
    1670:	d4 f3       	brlt	.-12     	; 0x1666 <__divsf3_pse+0x6c>
    1672:	86 95       	lsr	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b7 95       	ror	r27
    167a:	f7 95       	ror	r31
    167c:	9f 5f       	subi	r25, 0xFF	; 255
    167e:	c9 f7       	brne	.-14     	; 0x1672 <__divsf3_pse+0x78>
    1680:	88 0f       	add	r24, r24
    1682:	91 1d       	adc	r25, r1
    1684:	96 95       	lsr	r25
    1686:	87 95       	ror	r24
    1688:	97 f9       	bld	r25, 7
    168a:	08 95       	ret
    168c:	e1 e0       	ldi	r30, 0x01	; 1
    168e:	66 0f       	add	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	88 1f       	adc	r24, r24
    1694:	bb 1f       	adc	r27, r27
    1696:	62 17       	cp	r22, r18
    1698:	73 07       	cpc	r23, r19
    169a:	84 07       	cpc	r24, r20
    169c:	ba 07       	cpc	r27, r26
    169e:	20 f0       	brcs	.+8      	; 0x16a8 <__divsf3_pse+0xae>
    16a0:	62 1b       	sub	r22, r18
    16a2:	73 0b       	sbc	r23, r19
    16a4:	84 0b       	sbc	r24, r20
    16a6:	ba 0b       	sbc	r27, r26
    16a8:	ee 1f       	adc	r30, r30
    16aa:	88 f7       	brcc	.-30     	; 0x168e <__divsf3_pse+0x94>
    16ac:	e0 95       	com	r30
    16ae:	08 95       	ret

000016b0 <__fixunssfsi>:
    16b0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_splitA>
    16b4:	88 f0       	brcs	.+34     	; 0x16d8 <__fixunssfsi+0x28>
    16b6:	9f 57       	subi	r25, 0x7F	; 127
    16b8:	98 f0       	brcs	.+38     	; 0x16e0 <__fixunssfsi+0x30>
    16ba:	b9 2f       	mov	r27, r25
    16bc:	99 27       	eor	r25, r25
    16be:	b7 51       	subi	r27, 0x17	; 23
    16c0:	b0 f0       	brcs	.+44     	; 0x16ee <__fixunssfsi+0x3e>
    16c2:	e1 f0       	breq	.+56     	; 0x16fc <__fixunssfsi+0x4c>
    16c4:	66 0f       	add	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	88 1f       	adc	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	1a f0       	brmi	.+6      	; 0x16d4 <__fixunssfsi+0x24>
    16ce:	ba 95       	dec	r27
    16d0:	c9 f7       	brne	.-14     	; 0x16c4 <__fixunssfsi+0x14>
    16d2:	14 c0       	rjmp	.+40     	; 0x16fc <__fixunssfsi+0x4c>
    16d4:	b1 30       	cpi	r27, 0x01	; 1
    16d6:	91 f0       	breq	.+36     	; 0x16fc <__fixunssfsi+0x4c>
    16d8:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fp_zero>
    16dc:	b1 e0       	ldi	r27, 0x01	; 1
    16de:	08 95       	ret
    16e0:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_zero>
    16e4:	67 2f       	mov	r22, r23
    16e6:	78 2f       	mov	r23, r24
    16e8:	88 27       	eor	r24, r24
    16ea:	b8 5f       	subi	r27, 0xF8	; 248
    16ec:	39 f0       	breq	.+14     	; 0x16fc <__fixunssfsi+0x4c>
    16ee:	b9 3f       	cpi	r27, 0xF9	; 249
    16f0:	cc f3       	brlt	.-14     	; 0x16e4 <__fixunssfsi+0x34>
    16f2:	86 95       	lsr	r24
    16f4:	77 95       	ror	r23
    16f6:	67 95       	ror	r22
    16f8:	b3 95       	inc	r27
    16fa:	d9 f7       	brne	.-10     	; 0x16f2 <__fixunssfsi+0x42>
    16fc:	3e f4       	brtc	.+14     	; 0x170c <__fixunssfsi+0x5c>
    16fe:	90 95       	com	r25
    1700:	80 95       	com	r24
    1702:	70 95       	com	r23
    1704:	61 95       	neg	r22
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	8f 4f       	sbci	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	08 95       	ret

0000170e <__floatundisf>:
    170e:	e8 94       	clt

00001710 <__fp_di2sf>:
    1710:	f9 2f       	mov	r31, r25
    1712:	96 eb       	ldi	r25, 0xB6	; 182
    1714:	ff 23       	and	r31, r31
    1716:	81 f0       	breq	.+32     	; 0x1738 <__fp_di2sf+0x28>
    1718:	12 16       	cp	r1, r18
    171a:	13 06       	cpc	r1, r19
    171c:	14 06       	cpc	r1, r20
    171e:	44 0b       	sbc	r20, r20
    1720:	93 95       	inc	r25
    1722:	f6 95       	lsr	r31
    1724:	87 95       	ror	r24
    1726:	77 95       	ror	r23
    1728:	67 95       	ror	r22
    172a:	57 95       	ror	r21
    172c:	40 40       	sbci	r20, 0x00	; 0
    172e:	ff 23       	and	r31, r31
    1730:	b9 f7       	brne	.-18     	; 0x1720 <__fp_di2sf+0x10>
    1732:	1b c0       	rjmp	.+54     	; 0x176a <__fp_di2sf+0x5a>
    1734:	99 27       	eor	r25, r25
    1736:	08 95       	ret
    1738:	88 23       	and	r24, r24
    173a:	51 f4       	brne	.+20     	; 0x1750 <__fp_di2sf+0x40>
    173c:	98 50       	subi	r25, 0x08	; 8
    173e:	d2 f7       	brpl	.-12     	; 0x1734 <__fp_di2sf+0x24>
    1740:	87 2b       	or	r24, r23
    1742:	76 2f       	mov	r23, r22
    1744:	65 2f       	mov	r22, r21
    1746:	54 2f       	mov	r21, r20
    1748:	43 2f       	mov	r20, r19
    174a:	32 2f       	mov	r19, r18
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	b1 f3       	breq	.-20     	; 0x173c <__fp_di2sf+0x2c>
    1750:	12 16       	cp	r1, r18
    1752:	13 06       	cpc	r1, r19
    1754:	14 06       	cpc	r1, r20
    1756:	44 0b       	sbc	r20, r20
    1758:	88 23       	and	r24, r24
    175a:	3a f0       	brmi	.+14     	; 0x176a <__fp_di2sf+0x5a>
    175c:	9a 95       	dec	r25
    175e:	44 0f       	add	r20, r20
    1760:	55 1f       	adc	r21, r21
    1762:	66 1f       	adc	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	88 1f       	adc	r24, r24
    1768:	ca f7       	brpl	.-14     	; 0x175c <__fp_di2sf+0x4c>
    176a:	55 23       	and	r21, r21
    176c:	4a f4       	brpl	.+18     	; 0x1780 <__fp_di2sf+0x70>
    176e:	44 0f       	add	r20, r20
    1770:	55 1f       	adc	r21, r21
    1772:	11 f4       	brne	.+4      	; 0x1778 <__fp_di2sf+0x68>
    1774:	60 ff       	sbrs	r22, 0
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <__fp_di2sf+0x70>
    1778:	6f 5f       	subi	r22, 0xFF	; 255
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	8f 4f       	sbci	r24, 0xFF	; 255
    177e:	9f 4f       	sbci	r25, 0xFF	; 255
    1780:	88 0f       	add	r24, r24
    1782:	96 95       	lsr	r25
    1784:	87 95       	ror	r24
    1786:	97 f9       	bld	r25, 7
    1788:	08 95       	ret

0000178a <__fp_inf>:
    178a:	97 f9       	bld	r25, 7
    178c:	9f 67       	ori	r25, 0x7F	; 127
    178e:	80 e8       	ldi	r24, 0x80	; 128
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	08 95       	ret

00001796 <__fp_nan>:
    1796:	9f ef       	ldi	r25, 0xFF	; 255
    1798:	80 ec       	ldi	r24, 0xC0	; 192
    179a:	08 95       	ret

0000179c <__fp_pscA>:
    179c:	00 24       	eor	r0, r0
    179e:	0a 94       	dec	r0
    17a0:	16 16       	cp	r1, r22
    17a2:	17 06       	cpc	r1, r23
    17a4:	18 06       	cpc	r1, r24
    17a6:	09 06       	cpc	r0, r25
    17a8:	08 95       	ret

000017aa <__fp_pscB>:
    17aa:	00 24       	eor	r0, r0
    17ac:	0a 94       	dec	r0
    17ae:	12 16       	cp	r1, r18
    17b0:	13 06       	cpc	r1, r19
    17b2:	14 06       	cpc	r1, r20
    17b4:	05 06       	cpc	r0, r21
    17b6:	08 95       	ret

000017b8 <__fp_round>:
    17b8:	09 2e       	mov	r0, r25
    17ba:	03 94       	inc	r0
    17bc:	00 0c       	add	r0, r0
    17be:	11 f4       	brne	.+4      	; 0x17c4 <__fp_round+0xc>
    17c0:	88 23       	and	r24, r24
    17c2:	52 f0       	brmi	.+20     	; 0x17d8 <__fp_round+0x20>
    17c4:	bb 0f       	add	r27, r27
    17c6:	40 f4       	brcc	.+16     	; 0x17d8 <__fp_round+0x20>
    17c8:	bf 2b       	or	r27, r31
    17ca:	11 f4       	brne	.+4      	; 0x17d0 <__fp_round+0x18>
    17cc:	60 ff       	sbrs	r22, 0
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <__fp_round+0x20>
    17d0:	6f 5f       	subi	r22, 0xFF	; 255
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	8f 4f       	sbci	r24, 0xFF	; 255
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	08 95       	ret

000017da <__fp_split3>:
    17da:	57 fd       	sbrc	r21, 7
    17dc:	90 58       	subi	r25, 0x80	; 128
    17de:	44 0f       	add	r20, r20
    17e0:	55 1f       	adc	r21, r21
    17e2:	59 f0       	breq	.+22     	; 0x17fa <__fp_splitA+0x10>
    17e4:	5f 3f       	cpi	r21, 0xFF	; 255
    17e6:	71 f0       	breq	.+28     	; 0x1804 <__fp_splitA+0x1a>
    17e8:	47 95       	ror	r20

000017ea <__fp_splitA>:
    17ea:	88 0f       	add	r24, r24
    17ec:	97 fb       	bst	r25, 7
    17ee:	99 1f       	adc	r25, r25
    17f0:	61 f0       	breq	.+24     	; 0x180a <__fp_splitA+0x20>
    17f2:	9f 3f       	cpi	r25, 0xFF	; 255
    17f4:	79 f0       	breq	.+30     	; 0x1814 <__fp_splitA+0x2a>
    17f6:	87 95       	ror	r24
    17f8:	08 95       	ret
    17fa:	12 16       	cp	r1, r18
    17fc:	13 06       	cpc	r1, r19
    17fe:	14 06       	cpc	r1, r20
    1800:	55 1f       	adc	r21, r21
    1802:	f2 cf       	rjmp	.-28     	; 0x17e8 <__fp_split3+0xe>
    1804:	46 95       	lsr	r20
    1806:	f1 df       	rcall	.-30     	; 0x17ea <__fp_splitA>
    1808:	08 c0       	rjmp	.+16     	; 0x181a <__fp_splitA+0x30>
    180a:	16 16       	cp	r1, r22
    180c:	17 06       	cpc	r1, r23
    180e:	18 06       	cpc	r1, r24
    1810:	99 1f       	adc	r25, r25
    1812:	f1 cf       	rjmp	.-30     	; 0x17f6 <__fp_splitA+0xc>
    1814:	86 95       	lsr	r24
    1816:	71 05       	cpc	r23, r1
    1818:	61 05       	cpc	r22, r1
    181a:	08 94       	sec
    181c:	08 95       	ret

0000181e <__fp_zero>:
    181e:	e8 94       	clt

00001820 <__fp_szero>:
    1820:	bb 27       	eor	r27, r27
    1822:	66 27       	eor	r22, r22
    1824:	77 27       	eor	r23, r23
    1826:	cb 01       	movw	r24, r22
    1828:	97 f9       	bld	r25, 7
    182a:	08 95       	ret

0000182c <__mulsf3>:
    182c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__mulsf3x>
    1830:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__fp_round>
    1834:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fp_pscA>
    1838:	38 f0       	brcs	.+14     	; 0x1848 <__mulsf3+0x1c>
    183a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__fp_pscB>
    183e:	20 f0       	brcs	.+8      	; 0x1848 <__mulsf3+0x1c>
    1840:	95 23       	and	r25, r21
    1842:	11 f0       	breq	.+4      	; 0x1848 <__mulsf3+0x1c>
    1844:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    1848:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_nan>
    184c:	11 24       	eor	r1, r1
    184e:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__fp_szero>

00001852 <__mulsf3x>:
    1852:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fp_split3>
    1856:	70 f3       	brcs	.-36     	; 0x1834 <__mulsf3+0x8>

00001858 <__mulsf3_pse>:
    1858:	95 9f       	mul	r25, r21
    185a:	c1 f3       	breq	.-16     	; 0x184c <__mulsf3+0x20>
    185c:	95 0f       	add	r25, r21
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	55 1f       	adc	r21, r21
    1862:	62 9f       	mul	r22, r18
    1864:	f0 01       	movw	r30, r0
    1866:	72 9f       	mul	r23, r18
    1868:	bb 27       	eor	r27, r27
    186a:	f0 0d       	add	r31, r0
    186c:	b1 1d       	adc	r27, r1
    186e:	63 9f       	mul	r22, r19
    1870:	aa 27       	eor	r26, r26
    1872:	f0 0d       	add	r31, r0
    1874:	b1 1d       	adc	r27, r1
    1876:	aa 1f       	adc	r26, r26
    1878:	64 9f       	mul	r22, r20
    187a:	66 27       	eor	r22, r22
    187c:	b0 0d       	add	r27, r0
    187e:	a1 1d       	adc	r26, r1
    1880:	66 1f       	adc	r22, r22
    1882:	82 9f       	mul	r24, r18
    1884:	22 27       	eor	r18, r18
    1886:	b0 0d       	add	r27, r0
    1888:	a1 1d       	adc	r26, r1
    188a:	62 1f       	adc	r22, r18
    188c:	73 9f       	mul	r23, r19
    188e:	b0 0d       	add	r27, r0
    1890:	a1 1d       	adc	r26, r1
    1892:	62 1f       	adc	r22, r18
    1894:	83 9f       	mul	r24, r19
    1896:	a0 0d       	add	r26, r0
    1898:	61 1d       	adc	r22, r1
    189a:	22 1f       	adc	r18, r18
    189c:	74 9f       	mul	r23, r20
    189e:	33 27       	eor	r19, r19
    18a0:	a0 0d       	add	r26, r0
    18a2:	61 1d       	adc	r22, r1
    18a4:	23 1f       	adc	r18, r19
    18a6:	84 9f       	mul	r24, r20
    18a8:	60 0d       	add	r22, r0
    18aa:	21 1d       	adc	r18, r1
    18ac:	82 2f       	mov	r24, r18
    18ae:	76 2f       	mov	r23, r22
    18b0:	6a 2f       	mov	r22, r26
    18b2:	11 24       	eor	r1, r1
    18b4:	9f 57       	subi	r25, 0x7F	; 127
    18b6:	50 40       	sbci	r21, 0x00	; 0
    18b8:	9a f0       	brmi	.+38     	; 0x18e0 <__mulsf3_pse+0x88>
    18ba:	f1 f0       	breq	.+60     	; 0x18f8 <__mulsf3_pse+0xa0>
    18bc:	88 23       	and	r24, r24
    18be:	4a f0       	brmi	.+18     	; 0x18d2 <__mulsf3_pse+0x7a>
    18c0:	ee 0f       	add	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	bb 1f       	adc	r27, r27
    18c6:	66 1f       	adc	r22, r22
    18c8:	77 1f       	adc	r23, r23
    18ca:	88 1f       	adc	r24, r24
    18cc:	91 50       	subi	r25, 0x01	; 1
    18ce:	50 40       	sbci	r21, 0x00	; 0
    18d0:	a9 f7       	brne	.-22     	; 0x18bc <__mulsf3_pse+0x64>
    18d2:	9e 3f       	cpi	r25, 0xFE	; 254
    18d4:	51 05       	cpc	r21, r1
    18d6:	80 f0       	brcs	.+32     	; 0x18f8 <__mulsf3_pse+0xa0>
    18d8:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__fp_inf>
    18dc:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__fp_szero>
    18e0:	5f 3f       	cpi	r21, 0xFF	; 255
    18e2:	e4 f3       	brlt	.-8      	; 0x18dc <__mulsf3_pse+0x84>
    18e4:	98 3e       	cpi	r25, 0xE8	; 232
    18e6:	d4 f3       	brlt	.-12     	; 0x18dc <__mulsf3_pse+0x84>
    18e8:	86 95       	lsr	r24
    18ea:	77 95       	ror	r23
    18ec:	67 95       	ror	r22
    18ee:	b7 95       	ror	r27
    18f0:	f7 95       	ror	r31
    18f2:	e7 95       	ror	r30
    18f4:	9f 5f       	subi	r25, 0xFF	; 255
    18f6:	c1 f7       	brne	.-16     	; 0x18e8 <__mulsf3_pse+0x90>
    18f8:	fe 2b       	or	r31, r30
    18fa:	88 0f       	add	r24, r24
    18fc:	91 1d       	adc	r25, r1
    18fe:	96 95       	lsr	r25
    1900:	87 95       	ror	r24
    1902:	97 f9       	bld	r25, 7
    1904:	08 95       	ret

00001906 <__udivmodsi4>:
    1906:	a1 e2       	ldi	r26, 0x21	; 33
    1908:	1a 2e       	mov	r1, r26
    190a:	aa 1b       	sub	r26, r26
    190c:	bb 1b       	sub	r27, r27
    190e:	fd 01       	movw	r30, r26
    1910:	0d c0       	rjmp	.+26     	; 0x192c <__udivmodsi4_ep>

00001912 <__udivmodsi4_loop>:
    1912:	aa 1f       	adc	r26, r26
    1914:	bb 1f       	adc	r27, r27
    1916:	ee 1f       	adc	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	a2 17       	cp	r26, r18
    191c:	b3 07       	cpc	r27, r19
    191e:	e4 07       	cpc	r30, r20
    1920:	f5 07       	cpc	r31, r21
    1922:	20 f0       	brcs	.+8      	; 0x192c <__udivmodsi4_ep>
    1924:	a2 1b       	sub	r26, r18
    1926:	b3 0b       	sbc	r27, r19
    1928:	e4 0b       	sbc	r30, r20
    192a:	f5 0b       	sbc	r31, r21

0000192c <__udivmodsi4_ep>:
    192c:	66 1f       	adc	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	1a 94       	dec	r1
    1936:	69 f7       	brne	.-38     	; 0x1912 <__udivmodsi4_loop>
    1938:	60 95       	com	r22
    193a:	70 95       	com	r23
    193c:	80 95       	com	r24
    193e:	90 95       	com	r25
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	bd 01       	movw	r22, r26
    1946:	cf 01       	movw	r24, r30
    1948:	08 95       	ret

0000194a <__divmodsi4>:
    194a:	05 2e       	mov	r0, r21
    194c:	97 fb       	bst	r25, 7
    194e:	1e f4       	brtc	.+6      	; 0x1956 <__divmodsi4+0xc>
    1950:	00 94       	com	r0
    1952:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__negsi2>
    1956:	57 fd       	sbrc	r21, 7
    1958:	07 d0       	rcall	.+14     	; 0x1968 <__divmodsi4_neg2>
    195a:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
    195e:	07 fc       	sbrc	r0, 7
    1960:	03 d0       	rcall	.+6      	; 0x1968 <__divmodsi4_neg2>
    1962:	4e f4       	brtc	.+18     	; 0x1976 <__divmodsi4_exit>
    1964:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__negsi2>

00001968 <__divmodsi4_neg2>:
    1968:	50 95       	com	r21
    196a:	40 95       	com	r20
    196c:	30 95       	com	r19
    196e:	21 95       	neg	r18
    1970:	3f 4f       	sbci	r19, 0xFF	; 255
    1972:	4f 4f       	sbci	r20, 0xFF	; 255
    1974:	5f 4f       	sbci	r21, 0xFF	; 255

00001976 <__divmodsi4_exit>:
    1976:	08 95       	ret

00001978 <__negsi2>:
    1978:	90 95       	com	r25
    197a:	80 95       	com	r24
    197c:	70 95       	com	r23
    197e:	61 95       	neg	r22
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8f 4f       	sbci	r24, 0xFF	; 255
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	08 95       	ret

00001988 <__muluhisi3>:
    1988:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__umulhisi3>
    198c:	a5 9f       	mul	r26, r21
    198e:	90 0d       	add	r25, r0
    1990:	b4 9f       	mul	r27, r20
    1992:	90 0d       	add	r25, r0
    1994:	a4 9f       	mul	r26, r20
    1996:	80 0d       	add	r24, r0
    1998:	91 1d       	adc	r25, r1
    199a:	11 24       	eor	r1, r1
    199c:	08 95       	ret

0000199e <__muldi3>:
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	1f 93       	push	r17
    19a4:	0f 93       	push	r16
    19a6:	9a 9d       	mul	r25, r10
    19a8:	f0 2d       	mov	r31, r0
    19aa:	21 9f       	mul	r18, r17
    19ac:	f0 0d       	add	r31, r0
    19ae:	8b 9d       	mul	r24, r11
    19b0:	f0 0d       	add	r31, r0
    19b2:	8a 9d       	mul	r24, r10
    19b4:	e0 2d       	mov	r30, r0
    19b6:	f1 0d       	add	r31, r1
    19b8:	03 9f       	mul	r16, r19
    19ba:	f0 0d       	add	r31, r0
    19bc:	02 9f       	mul	r16, r18
    19be:	e0 0d       	add	r30, r0
    19c0:	f1 1d       	adc	r31, r1
    19c2:	4e 9d       	mul	r20, r14
    19c4:	e0 0d       	add	r30, r0
    19c6:	f1 1d       	adc	r31, r1
    19c8:	5e 9d       	mul	r21, r14
    19ca:	f0 0d       	add	r31, r0
    19cc:	4f 9d       	mul	r20, r15
    19ce:	f0 0d       	add	r31, r0
    19d0:	7f 93       	push	r23
    19d2:	6f 93       	push	r22
    19d4:	bf 92       	push	r11
    19d6:	af 92       	push	r10
    19d8:	5f 93       	push	r21
    19da:	4f 93       	push	r20
    19dc:	d5 01       	movw	r26, r10
    19de:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__umulhisi3>
    19e2:	8b 01       	movw	r16, r22
    19e4:	ac 01       	movw	r20, r24
    19e6:	d7 01       	movw	r26, r14
    19e8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__umulhisi3>
    19ec:	eb 01       	movw	r28, r22
    19ee:	e8 0f       	add	r30, r24
    19f0:	f9 1f       	adc	r31, r25
    19f2:	d6 01       	movw	r26, r12
    19f4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__muldi3_6>
    19f8:	2f 91       	pop	r18
    19fa:	3f 91       	pop	r19
    19fc:	d6 01       	movw	r26, r12
    19fe:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__umulhisi3>
    1a02:	c6 0f       	add	r28, r22
    1a04:	d7 1f       	adc	r29, r23
    1a06:	e8 1f       	adc	r30, r24
    1a08:	f9 1f       	adc	r31, r25
    1a0a:	af 91       	pop	r26
    1a0c:	bf 91       	pop	r27
    1a0e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__muldi3_6>
    1a12:	2f 91       	pop	r18
    1a14:	3f 91       	pop	r19
    1a16:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__umulhisi3>
    1a1a:	c6 0f       	add	r28, r22
    1a1c:	d7 1f       	adc	r29, r23
    1a1e:	e8 1f       	adc	r30, r24
    1a20:	f9 1f       	adc	r31, r25
    1a22:	d6 01       	movw	r26, r12
    1a24:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__umulhisi3>
    1a28:	e6 0f       	add	r30, r22
    1a2a:	f7 1f       	adc	r31, r23
    1a2c:	98 01       	movw	r18, r16
    1a2e:	be 01       	movw	r22, r28
    1a30:	cf 01       	movw	r24, r30
    1a32:	11 24       	eor	r1, r1
    1a34:	0f 91       	pop	r16
    1a36:	1f 91       	pop	r17
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <__muldi3_6>:
    1a3e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__umulhisi3>
    1a42:	46 0f       	add	r20, r22
    1a44:	57 1f       	adc	r21, r23
    1a46:	c8 1f       	adc	r28, r24
    1a48:	d9 1f       	adc	r29, r25
    1a4a:	08 f4       	brcc	.+2      	; 0x1a4e <__muldi3_6+0x10>
    1a4c:	31 96       	adiw	r30, 0x01	; 1
    1a4e:	08 95       	ret

00001a50 <__umoddi3>:
    1a50:	68 94       	set
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <__udivdi3_umoddi3>

00001a54 <__udivdi3>:
    1a54:	e8 94       	clt

00001a56 <__udivdi3_umoddi3>:
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__udivmod64>
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	9f 90       	pop	r9
    1a68:	8f 90       	pop	r8
    1a6a:	08 95       	ret

00001a6c <__udivmod64>:
    1a6c:	88 24       	eor	r8, r8
    1a6e:	99 24       	eor	r9, r9
    1a70:	f4 01       	movw	r30, r8
    1a72:	e4 01       	movw	r28, r8
    1a74:	b0 e4       	ldi	r27, 0x40	; 64
    1a76:	9f 93       	push	r25
    1a78:	aa 27       	eor	r26, r26
    1a7a:	9a 15       	cp	r25, r10
    1a7c:	8b 04       	cpc	r8, r11
    1a7e:	9c 04       	cpc	r9, r12
    1a80:	ed 05       	cpc	r30, r13
    1a82:	fe 05       	cpc	r31, r14
    1a84:	cf 05       	cpc	r28, r15
    1a86:	d0 07       	cpc	r29, r16
    1a88:	a1 07       	cpc	r26, r17
    1a8a:	98 f4       	brcc	.+38     	; 0x1ab2 <__udivmod64+0x46>
    1a8c:	ad 2f       	mov	r26, r29
    1a8e:	dc 2f       	mov	r29, r28
    1a90:	cf 2f       	mov	r28, r31
    1a92:	fe 2f       	mov	r31, r30
    1a94:	e9 2d       	mov	r30, r9
    1a96:	98 2c       	mov	r9, r8
    1a98:	89 2e       	mov	r8, r25
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	87 2f       	mov	r24, r23
    1a9e:	76 2f       	mov	r23, r22
    1aa0:	65 2f       	mov	r22, r21
    1aa2:	54 2f       	mov	r21, r20
    1aa4:	43 2f       	mov	r20, r19
    1aa6:	32 2f       	mov	r19, r18
    1aa8:	22 27       	eor	r18, r18
    1aaa:	b8 50       	subi	r27, 0x08	; 8
    1aac:	31 f7       	brne	.-52     	; 0x1a7a <__udivmod64+0xe>
    1aae:	bf 91       	pop	r27
    1ab0:	27 c0       	rjmp	.+78     	; 0x1b00 <__udivmod64+0x94>
    1ab2:	1b 2e       	mov	r1, r27
    1ab4:	bf 91       	pop	r27
    1ab6:	bb 27       	eor	r27, r27
    1ab8:	22 0f       	add	r18, r18
    1aba:	33 1f       	adc	r19, r19
    1abc:	44 1f       	adc	r20, r20
    1abe:	55 1f       	adc	r21, r21
    1ac0:	66 1f       	adc	r22, r22
    1ac2:	77 1f       	adc	r23, r23
    1ac4:	88 1f       	adc	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	88 1c       	adc	r8, r8
    1aca:	99 1c       	adc	r9, r9
    1acc:	ee 1f       	adc	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	cc 1f       	adc	r28, r28
    1ad2:	dd 1f       	adc	r29, r29
    1ad4:	aa 1f       	adc	r26, r26
    1ad6:	bb 1f       	adc	r27, r27
    1ad8:	8a 14       	cp	r8, r10
    1ada:	9b 04       	cpc	r9, r11
    1adc:	ec 05       	cpc	r30, r12
    1ade:	fd 05       	cpc	r31, r13
    1ae0:	ce 05       	cpc	r28, r14
    1ae2:	df 05       	cpc	r29, r15
    1ae4:	a0 07       	cpc	r26, r16
    1ae6:	b1 07       	cpc	r27, r17
    1ae8:	48 f0       	brcs	.+18     	; 0x1afc <__udivmod64+0x90>
    1aea:	8a 18       	sub	r8, r10
    1aec:	9b 08       	sbc	r9, r11
    1aee:	ec 09       	sbc	r30, r12
    1af0:	fd 09       	sbc	r31, r13
    1af2:	ce 09       	sbc	r28, r14
    1af4:	df 09       	sbc	r29, r15
    1af6:	a0 0b       	sbc	r26, r16
    1af8:	b1 0b       	sbc	r27, r17
    1afa:	21 60       	ori	r18, 0x01	; 1
    1afc:	1a 94       	dec	r1
    1afe:	e1 f6       	brne	.-72     	; 0x1ab8 <__udivmod64+0x4c>
    1b00:	2e f4       	brtc	.+10     	; 0x1b0c <__udivmod64+0xa0>
    1b02:	94 01       	movw	r18, r8
    1b04:	af 01       	movw	r20, r30
    1b06:	be 01       	movw	r22, r28
    1b08:	cd 01       	movw	r24, r26
    1b0a:	00 0c       	add	r0, r0
    1b0c:	08 95       	ret

00001b0e <__adddi3>:
    1b0e:	2a 0d       	add	r18, r10
    1b10:	3b 1d       	adc	r19, r11
    1b12:	4c 1d       	adc	r20, r12
    1b14:	5d 1d       	adc	r21, r13
    1b16:	6e 1d       	adc	r22, r14
    1b18:	7f 1d       	adc	r23, r15
    1b1a:	80 1f       	adc	r24, r16
    1b1c:	91 1f       	adc	r25, r17
    1b1e:	08 95       	ret

00001b20 <__adddi3_s8>:
    1b20:	00 24       	eor	r0, r0
    1b22:	a7 fd       	sbrc	r26, 7
    1b24:	00 94       	com	r0
    1b26:	2a 0f       	add	r18, r26
    1b28:	30 1d       	adc	r19, r0
    1b2a:	40 1d       	adc	r20, r0
    1b2c:	50 1d       	adc	r21, r0
    1b2e:	60 1d       	adc	r22, r0
    1b30:	70 1d       	adc	r23, r0
    1b32:	80 1d       	adc	r24, r0
    1b34:	90 1d       	adc	r25, r0
    1b36:	08 95       	ret

00001b38 <__cmpdi2>:
    1b38:	2a 15       	cp	r18, r10
    1b3a:	3b 05       	cpc	r19, r11
    1b3c:	4c 05       	cpc	r20, r12
    1b3e:	5d 05       	cpc	r21, r13
    1b40:	6e 05       	cpc	r22, r14
    1b42:	7f 05       	cpc	r23, r15
    1b44:	80 07       	cpc	r24, r16
    1b46:	91 07       	cpc	r25, r17
    1b48:	08 95       	ret

00001b4a <__cmpdi2_s8>:
    1b4a:	00 24       	eor	r0, r0
    1b4c:	a7 fd       	sbrc	r26, 7
    1b4e:	00 94       	com	r0
    1b50:	2a 17       	cp	r18, r26
    1b52:	30 05       	cpc	r19, r0
    1b54:	40 05       	cpc	r20, r0
    1b56:	50 05       	cpc	r21, r0
    1b58:	60 05       	cpc	r22, r0
    1b5a:	70 05       	cpc	r23, r0
    1b5c:	80 05       	cpc	r24, r0
    1b5e:	90 05       	cpc	r25, r0
    1b60:	08 95       	ret

00001b62 <__umulhisi3>:
    1b62:	a2 9f       	mul	r26, r18
    1b64:	b0 01       	movw	r22, r0
    1b66:	b3 9f       	mul	r27, r19
    1b68:	c0 01       	movw	r24, r0
    1b6a:	a3 9f       	mul	r26, r19
    1b6c:	70 0d       	add	r23, r0
    1b6e:	81 1d       	adc	r24, r1
    1b70:	11 24       	eor	r1, r1
    1b72:	91 1d       	adc	r25, r1
    1b74:	b2 9f       	mul	r27, r18
    1b76:	70 0d       	add	r23, r0
    1b78:	81 1d       	adc	r24, r1
    1b7a:	11 24       	eor	r1, r1
    1b7c:	91 1d       	adc	r25, r1
    1b7e:	08 95       	ret

00001b80 <_exit>:
    1b80:	f8 94       	cli

00001b82 <__stop_program>:
    1b82:	ff cf       	rjmp	.-2      	; 0x1b82 <__stop_program>
